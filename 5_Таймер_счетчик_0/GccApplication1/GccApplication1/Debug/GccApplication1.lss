
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000110  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000542  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004d4  00000000  00000000  000006b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f3  00000000  00000000  00000b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000d80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e3  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  00001097  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000010d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	12 d0       	rcall	.+36     	; 0x58 <main>
  34:	28 c0       	rjmp	.+80     	; 0x86 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <switch_leds>:
#include <avr/io.h>
#include <avr/delay.h>

void switch_leds()
{
	if (PIND == 0xff)
  38:	80 b3       	in	r24, 0x10	; 16
  3a:	8f 3f       	cpi	r24, 0xFF	; 255
  3c:	19 f4       	brne	.+6      	; 0x44 <__SREG__+0x5>
	{
		PORTD = 0b00000001;
  3e:	81 e0       	ldi	r24, 0x01	; 1
  40:	82 bb       	out	0x12, r24	; 18
  42:	08 95       	ret
	}
	else
	{
		PORTD |= PORTD << 2;
  44:	82 b3       	in	r24, 0x12	; 18
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	88 0f       	add	r24, r24
  4a:	99 1f       	adc	r25, r25
  4c:	88 0f       	add	r24, r24
  4e:	99 1f       	adc	r25, r25
  50:	92 b3       	in	r25, 0x12	; 18
  52:	89 2b       	or	r24, r25
  54:	82 bb       	out	0x12, r24	; 18
  56:	08 95       	ret

00000058 <main>:
}

int main(void)
{
	int count = 0;
	DDRD = 0b11111111;
  58:	8f ef       	ldi	r24, 0xFF	; 255
  5a:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b00000001;
  5c:	81 e0       	ldi	r24, 0x01	; 1
  5e:	82 bb       	out	0x12, r24	; 18
	
	// инициализация таймера 0
	TCCR0 |= (1 << 0) | (1 << 2);
  60:	83 b7       	in	r24, 0x33	; 51
  62:	85 60       	ori	r24, 0x05	; 5
  64:	83 bf       	out	0x33, r24	; 51
	
	// обнуляем занчение таймера
	TCNT0 = 0;
  66:	12 be       	out	0x32, r1	; 50
	}
}

int main(void)
{
	int count = 0;
  68:	20 e0       	ldi	r18, 0x00	; 0
  6a:	30 e0       	ldi	r19, 0x00	; 0
	TCNT0 = 0;
	
    while (1) 
    {
		// типа раз в 1 секунду короч
		if (count == 2)
  6c:	22 30       	cpi	r18, 0x02	; 2
  6e:	31 05       	cpc	r19, r1
  70:	19 f4       	brne	.+6      	; 0x78 <main+0x20>
		{
			switch_leds();
  72:	e2 df       	rcall	.-60     	; 0x38 <switch_leds>
			count = 0;
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	30 e0       	ldi	r19, 0x00	; 0
		}
		
		
		if (TCNT0 == 255)
  78:	82 b7       	in	r24, 0x32	; 50
  7a:	8f 3f       	cpi	r24, 0xFF	; 255
  7c:	b9 f7       	brne	.-18     	; 0x6c <main+0x14>
		{
			count++;
  7e:	2f 5f       	subi	r18, 0xFF	; 255
  80:	3f 4f       	sbci	r19, 0xFF	; 255
			TCNT0 = 0;
  82:	12 be       	out	0x32, r1	; 50
  84:	f3 cf       	rjmp	.-26     	; 0x6c <main+0x14>

00000086 <_exit>:
  86:	f8 94       	cli

00000088 <__stop_program>:
  88:	ff cf       	rjmp	.-2      	; 0x88 <__stop_program>
