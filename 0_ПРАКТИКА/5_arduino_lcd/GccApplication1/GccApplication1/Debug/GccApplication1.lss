
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000029a  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011a2  00000000  00000000  00000484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c3  00000000  00000000  00001626  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006bf  00000000  00000000  00001fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  000026a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bb  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b4  00000000  00000000  00002d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000033d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e9       	ldi	r30, 0x9A	; 154
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
  9e:	0c 94 4b 01 	jmp	0x296	; 0x296 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_wait>:
	TWBR=32;
}

//ожидание завершени€ задани€
void i2c_wait(void){
	while (!(TWCR & (1<<TWINT)));
  a6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  aa:	88 23       	and	r24, r24
  ac:	e4 f7       	brge	.-8      	; 0xa6 <i2c_wait>
}
  ae:	08 95       	ret

000000b0 <i2c_start>:

// условие старт
void i2c_start(void) {
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  b0:	84 ea       	ldi	r24, 0xA4	; 164
  b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
  b6:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_wait>
  ba:	08 95       	ret

000000bc <i2c_stop>:
}

// условие стоп
void i2c_stop(void) {
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
  bc:	84 e9       	ldi	r24, 0x94	; 148
  be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c2:	08 95       	ret

000000c4 <i2c_write>:
}

// запись байта
void i2c_write(uint8_t byte) {
	TWDR = byte;
  c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN);
  c8:	84 e8       	ldi	r24, 0x84	; 132
  ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2c_wait();
  ce:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_wait>
  d2:	08 95       	ret

000000d4 <write>:
	mychar();
}

void lcd_clear()
{
	send_byte(0x1, 0);
  d4:	cf 93       	push	r28
  d6:	c8 2f       	mov	r28, r24
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	0e 94 3d 01 	call	0x27a	; 0x27a <pcf_write>
  de:	8c 2f       	mov	r24, r28
  e0:	8b 7f       	andi	r24, 0xFB	; 251
  e2:	0e 94 3d 01 	call	0x27a	; 0x27a <pcf_write>
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <send_byte>:
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	c8 2f       	mov	r28, r24
  f0:	61 11       	cpse	r22, r1
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <send_byte+0xe>
  f4:	d0 e0       	ldi	r29, 0x00	; 0
  f6:	01 c0       	rjmp	.+2      	; 0xfa <send_byte+0x10>
  f8:	d1 e0       	ldi	r29, 0x01	; 1
  fa:	8c 2f       	mov	r24, r28
  fc:	80 7f       	andi	r24, 0xF0	; 240
  fe:	8d 2b       	or	r24, r29
 100:	0e 94 6a 00 	call	0xd4	; 0xd4 <write>
 104:	20 e1       	ldi	r18, 0x10	; 16
 106:	c2 9f       	mul	r28, r18
 108:	c0 01       	movw	r24, r0
 10a:	11 24       	eor	r1, r1
 10c:	8d 2b       	or	r24, r29
 10e:	0e 94 6a 00 	call	0xd4	; 0xd4 <write>
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <lcd_str>:
}

// вывод строки на индикацию
void lcd_str(char* str){
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	8c 01       	movw	r16, r24
	uint8_t n=0;// счетчик
 120:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[n])// пока н-ный символ не 0 работает цикл
 122:	04 c0       	rjmp	.+8      	; 0x12c <lcd_str+0x14>
	{
		send_byte(str[n],1);// выводим н-ный символна индикацию
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 75 00 	call	0xea	; 0xea <send_byte>
		n++;// мен€ем номер символа
 12a:	cf 5f       	subi	r28, 0xFF	; 255
}

// вывод строки на индикацию
void lcd_str(char* str){
	uint8_t n=0;// счетчик
	while(str[n])// пока н-ный символ не 0 работает цикл
 12c:	f8 01       	movw	r30, r16
 12e:	ec 0f       	add	r30, r28
 130:	f1 1d       	adc	r31, r1
 132:	80 81       	ld	r24, Z
 134:	81 11       	cpse	r24, r1
 136:	f6 cf       	rjmp	.-20     	; 0x124 <lcd_str+0xc>
	{
		send_byte(str[n],1);// выводим н-ный символна индикацию
		n++;// мен€ем номер символа
	}
	pcf_write(0x0C);
 138:	8c e0       	ldi	r24, 0x0C	; 12
 13a:	0e 94 3d 01 	call	0x27a	; 0x27a <pcf_write>
}
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	08 95       	ret

00000146 <lcd_pos>:

// смена активной €чейки видео пам€ти (позици€ курсора)
void lcd_pos(uint8_t line, uint8_t pos){
	uint8_t adress=(line*0x40+pos)|0x80;// вычисл€ем адрес и приводим значение в вид команды
 146:	90 e4       	ldi	r25, 0x40	; 64
 148:	89 9f       	mul	r24, r25
 14a:	60 0d       	add	r22, r0
 14c:	11 24       	eor	r1, r1
 14e:	86 2f       	mov	r24, r22
	send_byte(adress,0);// отправка команды
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	80 68       	ori	r24, 0x80	; 128
 154:	0e 94 75 00 	call	0xea	; 0xea <send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	80 e1       	ldi	r24, 0x10	; 16
 15a:	8a 95       	dec	r24
 15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_pos+0x14>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <lcd_pos+0x1a>
 160:	08 95       	ret

00000162 <mychar>:
	write(data|(byte&0xF0));// передача старшего полубайта
	write(data|(byte<<4));// передача младшего полубайта
}

// загрузка своих символов
void mychar(void){
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
 16c:	60 97       	sbiw	r28, 0x10	; 16
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	de bf       	out	0x3e, r29	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	cd bf       	out	0x3d, r28	; 61
	
	// массив с двум€ символами
	uint8_t simvol[16]={
 178:	80 e1       	ldi	r24, 0x10	; 16
 17a:	e0 e0       	ldi	r30, 0x00	; 0
 17c:	f1 e0       	ldi	r31, 0x01	; 1
 17e:	de 01       	movw	r26, r28
 180:	11 96       	adiw	r26, 0x01	; 1
 182:	01 90       	ld	r0, Z+
 184:	0d 92       	st	X+, r0
 186:	8a 95       	dec	r24
 188:	e1 f7       	brne	.-8      	; 0x182 <mychar+0x20>
		0x04,
		0x0A,
		0x0A,
		0x00
	};
	send_byte(64,0); // перейти в €чейку 0 CGRAM пам€ти
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	80 e4       	ldi	r24, 0x40	; 64
 18e:	0e 94 75 00 	call	0xea	; 0xea <send_byte>
	
	// загрузить массив с символами в пам€ть CGRAM
	for (uint8_t i=0; i<16; i++)
 192:	10 e0       	ldi	r17, 0x00	; 0
 194:	0b c0       	rjmp	.+22     	; 0x1ac <mychar+0x4a>
	{
		send_byte(simvol[i], 1);
 196:	e1 e0       	ldi	r30, 0x01	; 1
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	ec 0f       	add	r30, r28
 19c:	fd 1f       	adc	r31, r29
 19e:	e1 0f       	add	r30, r17
 1a0:	f1 1d       	adc	r31, r1
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	80 81       	ld	r24, Z
 1a6:	0e 94 75 00 	call	0xea	; 0xea <send_byte>
		0x00
	};
	send_byte(64,0); // перейти в €чейку 0 CGRAM пам€ти
	
	// загрузить массив с символами в пам€ть CGRAM
	for (uint8_t i=0; i<16; i++)
 1aa:	1f 5f       	subi	r17, 0xFF	; 255
 1ac:	10 31       	cpi	r17, 0x10	; 16
 1ae:	98 f3       	brcs	.-26     	; 0x196 <mychar+0x34>
	{
		send_byte(simvol[i], 1);
	}
	
	// перейти обратно в видео пам€ть
	lcd_pos(0,0);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_pos>
}
 1b8:	60 96       	adiw	r28, 0x10	; 16
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	08 95       	ret

000001cc <lcd_ini>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	8f e0       	ldi	r24, 0x0F	; 15
 1ce:	97 e2       	ldi	r25, 0x27	; 39
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_ini+0x4>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_ini+0xa>
 1d6:	00 00       	nop
	
	//----------- магические действи€ инциализации----------------
	
	_delay_ms(40);// ждем 40 мс стабилизации питани€

	write(0x30);
 1d8:	80 e3       	ldi	r24, 0x30	; 48
 1da:	0e 94 6a 00 	call	0xd4	; 0xd4 <write>
 1de:	81 ee       	ldi	r24, 0xE1	; 225
 1e0:	94 e0       	ldi	r25, 0x04	; 4
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_ini+0x16>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_ini+0x1c>
 1e8:	00 00       	nop
	_delay_ms(5);
	write(0x30);
 1ea:	80 e3       	ldi	r24, 0x30	; 48
 1ec:	0e 94 6a 00 	call	0xd4	; 0xd4 <write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f0:	92 e3       	ldi	r25, 0x32	; 50
 1f2:	9a 95       	dec	r25
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_ini+0x26>
	_delay_us(150);
	write(0x30);
 1f6:	80 e3       	ldi	r24, 0x30	; 48
 1f8:	0e 94 6a 00 	call	0xd4	; 0xd4 <write>
 1fc:	80 e1       	ldi	r24, 0x10	; 16
 1fe:	8a 95       	dec	r24
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_ini+0x32>
 202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_ini+0x38>
	_delay_us(50);// минимальное врем€ выполнени€ команды
	write(0x20);
 204:	80 e2       	ldi	r24, 0x20	; 32
 206:	0e 94 6a 00 	call	0xd4	; 0xd4 <write>
 20a:	90 e1       	ldi	r25, 0x10	; 16
 20c:	9a 95       	dec	r25
 20e:	f1 f7       	brne	.-4      	; 0x20c <lcd_ini+0x40>
 210:	00 c0       	rjmp	.+0      	; 0x212 <lcd_ini+0x46>
	
	// ---------------------- маги€ всЄ------------------------------
	
	// -----------команды инициализации--------------------
	
	send_byte(40,0);// команда Function Set 001_DL_N_F_X_X
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	88 e2       	ldi	r24, 0x28	; 40
 216:	0e 94 75 00 	call	0xea	; 0xea <send_byte>
 21a:	80 e1       	ldi	r24, 0x10	; 16
 21c:	8a 95       	dec	r24
 21e:	f1 f7       	brne	.-4      	; 0x21c <lcd_ini+0x50>
 220:	00 c0       	rjmp	.+0      	; 0x222 <lcd_ini+0x56>
	// DL 0/1 -4bit/8bit
	// N 0/1 -1/2 строки
	// F 0/1 -5x7/5x11 шрифт
	_delay_us(50);

	send_byte(0b00001101,0);// команда DISPLAY SWITCH 00001_D_C_B
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	8d e0       	ldi	r24, 0x0D	; 13
 226:	0e 94 75 00 	call	0xea	; 0xea <send_byte>
 22a:	90 e1       	ldi	r25, 0x10	; 16
 22c:	9a 95       	dec	r25
 22e:	f1 f7       	brne	.-4      	; 0x22c <lcd_ini+0x60>
 230:	00 c0       	rjmp	.+0      	; 0x232 <lcd_ini+0x66>
	// C 0/1 - off/on cursor
	// B 0/1 - off/on blink
	
	_delay_us(50);
	
	send_byte(1,0);// команда очистка диспле€ (без параметров)
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 75 00 	call	0xea	; 0xea <send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	83 ef       	ldi	r24, 0xF3	; 243
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <lcd_ini+0x72>
 242:	00 c0       	rjmp	.+0      	; 0x244 <lcd_ini+0x78>
 244:	00 00       	nop
	_delay_ms(2);
	
	send_byte(6,0);// команда INPUT SET 000001_ID_S
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	0e 94 75 00 	call	0xea	; 0xea <send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24e:	90 e1       	ldi	r25, 0x10	; 16
 250:	9a 95       	dec	r25
 252:	f1 f7       	brne	.-4      	; 0x250 <lcd_ini+0x84>
 254:	00 c0       	rjmp	.+0      	; 0x256 <lcd_ini+0x8a>
	// S 0/1 shift
	_delay_us(50);
	
	//--------------- команды всЄ ------------------------------------
	
	mychar();
 256:	0e 94 b1 00 	call	0x162	; 0x162 <mychar>
 25a:	08 95       	ret

0000025c <main>:
#include "main.h"

int main(void)
{
	lcd_ini();
 25c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <lcd_ini>
	lcd_str("hello");
 260:	80 e1       	ldi	r24, 0x10	; 16
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_str>
	lcd_pos(1,2);
 268:	62 e0       	ldi	r22, 0x02	; 2
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_pos>
	lcd_str("Epta!");
 270:	86 e1       	ldi	r24, 0x16	; 22
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 8c 00 	call	0x118	; 0x118 <lcd_str>
 278:	ff cf       	rjmp	.-2      	; 0x278 <main+0x1c>

0000027a <pcf_write>:
#include "../main.h"

// ADDRESS PCF8574 - 0b01001110

void pcf_write(uint8_t byte){
 27a:	cf 93       	push	r28
 27c:	c8 2f       	mov	r28, r24
	i2c_start();
 27e:	0e 94 58 00 	call	0xb0	; 0xb0 <i2c_start>
	i2c_write(0x4E);// адрес на запись
 282:	8e e4       	ldi	r24, 0x4E	; 78
 284:	0e 94 62 00 	call	0xc4	; 0xc4 <i2c_write>
	i2c_write(byte);
 288:	8c 2f       	mov	r24, r28
 28a:	0e 94 62 00 	call	0xc4	; 0xc4 <i2c_write>
	i2c_stop();
 28e:	0e 94 5e 00 	call	0xbc	; 0xbc <i2c_stop>
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <_exit>:
 296:	f8 94       	cli

00000298 <__stop_program>:
 298:	ff cf       	rjmp	.-2      	; 0x298 <__stop_program>
