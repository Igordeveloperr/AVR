
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000a3c  00000ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006c  0080006c  00000adc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e70  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bfe  00000000  00000000  00003b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015e6  00000000  00000000  00004746  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  00005d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068c  00000000  00000000  0000610c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020f0  00000000  00000000  00006798  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00008888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	f4 c0       	rjmp	.+488    	; 0x1ec <__vector_1>
   4:	42 c1       	rjmp	.+644    	; 0x28a <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	af c0       	rjmp	.+350    	; 0x168 <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e3       	ldi	r30, 0x3C	; 60
  3a:	fa e0       	ldi	r31, 0x0A	; 10
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 37       	cpi	r26, 0x74	; 116
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	72 d1       	rcall	.+740    	; 0x33e <main>
  5a:	ee c4       	rjmp	.+2524   	; 0xa38 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <select_display_digit>:
	0b11101111
};

uint8_t select_display_digit(uint8_t digit)
{
	if (digit >= 0 && digit < 10)
  5e:	8a 30       	cpi	r24, 0x0A	; 10
  60:	30 f4       	brcc	.+12     	; 0x6e <select_display_digit+0x10>
	{
		return display_digit[digit];
  62:	e8 2f       	mov	r30, r24
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	e0 5a       	subi	r30, 0xA0	; 160
  68:	ff 4f       	sbci	r31, 0xFF	; 255
  6a:	80 81       	ld	r24, Z
  6c:	08 95       	ret
	}
	else
	{
		return TM1637_SPAT_BLANK;
  6e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
  70:	08 95       	ret

00000072 <wakeup_display>:

void wakeup_display()
{
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	3a d3       	rcall	.+1652   	; 0x6ea <TM1637_turnOnAndSetBrightness>
  76:	08 95       	ret

00000078 <print_time_on_display>:
}

void print_time_on_display(uint8_t hour, uint8_t min)
{
  78:	ff 92       	push	r15
  7a:	0f 93       	push	r16
  7c:	1f 93       	push	r17
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	28 97       	sbiw	r28, 0x08	; 8
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	f8 94       	cli
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	0f be       	out	0x3f, r0	; 63
  90:	cd bf       	out	0x3d, r28	; 61
	uint8_t d_time[DISP_LEN];
	d_time[0] = hour / DIVIDER;
  92:	9d ec       	ldi	r25, 0xCD	; 205
  94:	89 9f       	mul	r24, r25
  96:	21 2d       	mov	r18, r1
  98:	11 24       	eor	r1, r1
  9a:	26 95       	lsr	r18
  9c:	26 95       	lsr	r18
  9e:	26 95       	lsr	r18
  a0:	29 83       	std	Y+1, r18	; 0x01
	d_time[1] = hour % DIVIDER;
  a2:	22 0f       	add	r18, r18
  a4:	32 2f       	mov	r19, r18
  a6:	33 0f       	add	r19, r19
  a8:	33 0f       	add	r19, r19
  aa:	23 0f       	add	r18, r19
  ac:	82 1b       	sub	r24, r18
  ae:	8a 83       	std	Y+2, r24	; 0x02
	d_time[2] = min / DIVIDER;
  b0:	69 9f       	mul	r22, r25
  b2:	81 2d       	mov	r24, r1
  b4:	11 24       	eor	r1, r1
  b6:	86 95       	lsr	r24
  b8:	86 95       	lsr	r24
  ba:	86 95       	lsr	r24
  bc:	8b 83       	std	Y+3, r24	; 0x03
	d_time[3] = min % DIVIDER;
  be:	88 0f       	add	r24, r24
  c0:	98 2f       	mov	r25, r24
  c2:	99 0f       	add	r25, r25
  c4:	99 0f       	add	r25, r25
  c6:	89 0f       	add	r24, r25
  c8:	68 1b       	sub	r22, r24
  ca:	6c 83       	std	Y+4, r22	; 0x04
	
	uint8_t out_time[TM1637_DIGITS_COUNT];
	for(uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
  cc:	f1 2c       	mov	r15, r1
  ce:	12 c0       	rjmp	.+36     	; 0xf4 <print_time_on_display+0x7c>
	{
		out_time[i] = select_display_digit(d_time[i]);
  d0:	0f 2d       	mov	r16, r15
  d2:	10 e0       	ldi	r17, 0x00	; 0
  d4:	e1 e0       	ldi	r30, 0x01	; 1
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	ec 0f       	add	r30, r28
  da:	fd 1f       	adc	r31, r29
  dc:	e0 0f       	add	r30, r16
  de:	f1 1f       	adc	r31, r17
  e0:	80 81       	ld	r24, Z
  e2:	bd df       	rcall	.-134    	; 0x5e <select_display_digit>
  e4:	e5 e0       	ldi	r30, 0x05	; 5
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	ec 0f       	add	r30, r28
  ea:	fd 1f       	adc	r31, r29
  ec:	e0 0f       	add	r30, r16
  ee:	f1 1f       	adc	r31, r17
  f0:	80 83       	st	Z, r24
	d_time[1] = hour % DIVIDER;
	d_time[2] = min / DIVIDER;
	d_time[3] = min % DIVIDER;
	
	uint8_t out_time[TM1637_DIGITS_COUNT];
	for(uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
  f2:	f3 94       	inc	r15
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	8f 15       	cp	r24, r15
  f8:	58 f7       	brcc	.-42     	; 0xd0 <print_time_on_display+0x58>
	{
		out_time[i] = select_display_digit(d_time[i]);
	}
	TM1637_setSegments(out_time, TM1637_DIGITS_COUNT, START_POS);
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	64 e0       	ldi	r22, 0x04	; 4
  fe:	ce 01       	movw	r24, r28
 100:	05 96       	adiw	r24, 0x05	; 5
 102:	5a d3       	rcall	.+1716   	; 0x7b8 <TM1637_setSegments>
 104:	28 96       	adiw	r28, 0x08	; 8
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	ff 90       	pop	r15
 11a:	08 95       	ret

0000011c <EEPROM_write>:
#include "../main.h"

void EEPROM_write(uint8_t address, uint8_t data)
{
	/* ожидаем завершение процедуры записи */
	while(EECR & (1<<EEWE));
 11c:	e1 99       	sbic	0x1c, 1	; 28
 11e:	fe cf       	rjmp	.-4      	; 0x11c <EEPROM_write>
	/* записываем адрес в регистр адреса */
	EEAR = address;
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	9f bb       	out	0x1f, r25	; 31
 124:	8e bb       	out	0x1e, r24	; 30
	/* записываем данные в регистр данных */
	EEDR = data;
 126:	6d bb       	out	0x1d, r22	; 29
	/* разрешаем запись в EEPROM */
	EECR |= (1<<EEMWE);
 128:	8c b3       	in	r24, 0x1c	; 28
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	8c bb       	out	0x1c, r24	; 28
	/* производим запись в EEPROM */
	EECR |= (1<<EEWE);
 12e:	8c b3       	in	r24, 0x1c	; 28
 130:	82 60       	ori	r24, 0x02	; 2
 132:	8c bb       	out	0x1c, r24	; 28
 134:	08 95       	ret

00000136 <EEPROM_read>:
}

uint8_t EEPROM_read(uint8_t address)
{
	/* ожидаем завершение процедуры записи */
	while(EECR & (1<<EEWE));
 136:	e1 99       	sbic	0x1c, 1	; 28
 138:	fe cf       	rjmp	.-4      	; 0x136 <EEPROM_read>
	/* указываем адрес где лежат нужные данные */
	EEAR = address;
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	9f bb       	out	0x1f, r25	; 31
 13e:	8e bb       	out	0x1e, r24	; 30
	/* получаем данные из EEPROM */
	EECR |= (1<<EERE);
 140:	8c b3       	in	r24, 0x1c	; 28
 142:	81 60       	ori	r24, 0x01	; 1
 144:	8c bb       	out	0x1c, r24	; 28
	/* */
	return EEDR;
 146:	8d b3       	in	r24, 0x1d	; 29
 148:	08 95       	ret

0000014a <activate_sleep_mode>:
uint8_t interval = 0;

/* реализация спящего режима */
void activate_sleep_mode()
{
	if (interval >= MAX_INTERVAL)
 14a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 14e:	8a 30       	cpi	r24, 0x0A	; 10
 150:	50 f0       	brcs	.+20     	; 0x166 <activate_sleep_mode+0x1c>
	{	
		TM1637_turnOff();
 152:	63 d2       	rcall	.+1222   	; 0x61a <TM1637_turnOff>
		OCR2 = 1;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	83 bd       	out	0x23, r24	; 35
		/* жду сброс флагов */
		while (ASSR != ASSR_REG_REDY);
 158:	82 b5       	in	r24, 0x22	; 34
 15a:	88 30       	cpi	r24, 0x08	; 8
 15c:	e9 f7       	brne	.-6      	; 0x158 <activate_sleep_mode+0xe>
		sleep_enable();
 15e:	85 b7       	in	r24, 0x35	; 53
 160:	80 68       	ori	r24, 0x80	; 128
 162:	85 bf       	out	0x35, r24	; 53
		sleep_cpu();
 164:	88 95       	sleep
 166:	08 95       	ret

00000168 <__vector_4>:
	}
}

/* отсчет времени */
ISR(TIMER2_OVF_vect)
{
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	4f 93       	push	r20
 178:	5f 93       	push	r21
 17a:	6f 93       	push	r22
 17c:	7f 93       	push	r23
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	af 93       	push	r26
 184:	bf 93       	push	r27
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31
	TCNT2 = 0;
 18a:	14 bc       	out	0x24, r1	; 36
	PORTB ^= (1 << PB1);
 18c:	98 b3       	in	r25, 0x18	; 24
 18e:	82 e0       	ldi	r24, 0x02	; 2
 190:	89 27       	eor	r24, r25
 192:	88 bb       	out	0x18, r24	; 24
	seconds += STEP;
 194:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <seconds>
 198:	8f 5f       	subi	r24, 0xFF	; 255
 19a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <seconds>
	interval += STEP;
 19e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	control_seconds(&seconds, &minutes);
 1a8:	6a e6       	ldi	r22, 0x6A	; 106
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	8f e6       	ldi	r24, 0x6F	; 111
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	a3 d1       	rcall	.+838    	; 0x4f8 <control_seconds>
	control_min(&minutes, &hour);
 1b2:	6b e6       	ldi	r22, 0x6B	; 107
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	8a e6       	ldi	r24, 0x6A	; 106
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	a9 d1       	rcall	.+850    	; 0x50e <control_min>
	control_hour(&seconds, &minutes, &hour);
 1bc:	4b e6       	ldi	r20, 0x6B	; 107
 1be:	50 e0       	ldi	r21, 0x00	; 0
 1c0:	6a e6       	ldi	r22, 0x6A	; 106
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	8f e6       	ldi	r24, 0x6F	; 111
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	ad d1       	rcall	.+858    	; 0x524 <control_hour>
}
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	bf 91       	pop	r27
 1d0:	af 91       	pop	r26
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	7f 91       	pop	r23
 1d8:	6f 91       	pop	r22
 1da:	5f 91       	pop	r21
 1dc:	4f 91       	pop	r20
 1de:	3f 91       	pop	r19
 1e0:	2f 91       	pop	r18
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <__vector_1>:

/* выход из сна + метка когда кот ел */
ISR(INT0_vect)
{
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	2f 93       	push	r18
 1f8:	3f 93       	push	r19
 1fa:	4f 93       	push	r20
 1fc:	5f 93       	push	r21
 1fe:	6f 93       	push	r22
 200:	7f 93       	push	r23
 202:	8f 93       	push	r24
 204:	9f 93       	push	r25
 206:	af 93       	push	r26
 208:	bf 93       	push	r27
 20a:	ef 93       	push	r30
 20c:	ff 93       	push	r31
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	00 d0       	rcall	.+0      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 214:	00 d0       	rcall	.+0      	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
	sleep_disable();
 21a:	85 b7       	in	r24, 0x35	; 53
 21c:	8f 77       	andi	r24, 0x7F	; 127
 21e:	85 bf       	out	0x35, r24	; 53
	cat_hour = hour;
 220:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <hour>
 224:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <cat_hour>
	cat_minutes = minutes;
 228:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <minutes>
 22c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <cat_minutes>
	EEPROM_write(HOUR_ADDRESS, cat_hour);
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	74 df       	rcall	.-280    	; 0x11c <EEPROM_write>
	EEPROM_write(MIN_ADDRESS, cat_minutes);
 234:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <cat_minutes>
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	70 df       	rcall	.-288    	; 0x11c <EEPROM_write>
	wakeup_display();
 23c:	1a df       	rcall	.-460    	; 0x72 <wakeup_display>
	TM1637_setSegments(EAT_WORD, DISP_LEN, START_POS);
 23e:	89 e7       	ldi	r24, 0x79	; 121
 240:	89 83       	std	Y+1, r24	; 0x01
 242:	87 e7       	ldi	r24, 0x77	; 119
 244:	8a 83       	std	Y+2, r24	; 0x02
 246:	88 e7       	ldi	r24, 0x78	; 120
 248:	8b 83       	std	Y+3, r24	; 0x03
 24a:	8f e0       	ldi	r24, 0x0F	; 15
 24c:	8c 83       	std	Y+4, r24	; 0x04
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	64 e0       	ldi	r22, 0x04	; 4
 252:	ce 01       	movw	r24, r28
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	b0 d2       	rcall	.+1376   	; 0x7b8 <TM1637_setSegments>
	interval = 0;
 258:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
}
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	ff 91       	pop	r31
 26a:	ef 91       	pop	r30
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	7f 91       	pop	r23
 276:	6f 91       	pop	r22
 278:	5f 91       	pop	r21
 27a:	4f 91       	pop	r20
 27c:	3f 91       	pop	r19
 27e:	2f 91       	pop	r18
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <__vector_2>:

ISR(INT1_vect)
{
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	2f 93       	push	r18
 296:	3f 93       	push	r19
 298:	4f 93       	push	r20
 29a:	5f 93       	push	r21
 29c:	6f 93       	push	r22
 29e:	7f 93       	push	r23
 2a0:	8f 93       	push	r24
 2a2:	9f 93       	push	r25
 2a4:	af 93       	push	r26
 2a6:	bf 93       	push	r27
 2a8:	ef 93       	push	r30
 2aa:	ff 93       	push	r31
	sleep_disable();
 2ac:	85 b7       	in	r24, 0x35	; 53
 2ae:	8f 77       	andi	r24, 0x7F	; 127
 2b0:	85 bf       	out	0x35, r24	; 53

	if (VIEW_BTN_CLICK)
 2b2:	87 99       	sbic	0x10, 7	; 16
 2b4:	06 c0       	rjmp	.+12     	; 0x2c2 <__vector_2+0x38>
	{
		wakeup_display();
 2b6:	dd de       	rcall	.-582    	; 0x72 <wakeup_display>
		print_time_on_display(cat_hour, cat_minutes);
 2b8:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <cat_minutes>
 2bc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <cat_hour>
 2c0:	db de       	rcall	.-586    	; 0x78 <print_time_on_display>
	}
	
	if(MENU_BTN_CLICK)
 2c2:	84 99       	sbic	0x10, 4	; 16
 2c4:	0e c0       	rjmp	.+28     	; 0x2e2 <__vector_2+0x58>
	{
		wakeup_display();
 2c6:	d5 de       	rcall	.-598    	; 0x72 <wakeup_display>
		event_listener();
 2c8:	bb d0       	rcall	.+374    	; 0x440 <event_listener>
		setup_time(&seconds, &minutes, &hour);
 2ca:	4b e6       	ldi	r20, 0x6B	; 107
 2cc:	50 e0       	ldi	r21, 0x00	; 0
 2ce:	6a e6       	ldi	r22, 0x6A	; 106
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	8f e6       	ldi	r24, 0x6F	; 111
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	05 d1       	rcall	.+522    	; 0x4e2 <setup_time>
		print_time_on_display(hour, minutes);
 2d8:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <minutes>
 2dc:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hour>
 2e0:	cb de       	rcall	.-618    	; 0x78 <print_time_on_display>
	}
	interval = 0;
 2e2:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
}
 2e6:	ff 91       	pop	r31
 2e8:	ef 91       	pop	r30
 2ea:	bf 91       	pop	r27
 2ec:	af 91       	pop	r26
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	7f 91       	pop	r23
 2f4:	6f 91       	pop	r22
 2f6:	5f 91       	pop	r21
 2f8:	4f 91       	pop	r20
 2fa:	3f 91       	pop	r19
 2fc:	2f 91       	pop	r18
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <start_timer2_async>:

/* настройка Timer/Counter2 */
void start_timer2_async()
{
	ASSR |= (1 << AS2); // вклю асинхронный режим
 308:	82 b5       	in	r24, 0x22	; 34
 30a:	88 60       	ori	r24, 0x08	; 8
 30c:	82 bd       	out	0x22, r24	; 34
	/* чищу регистры таймера от мусора */
	TCCR2 = 0;
 30e:	15 bc       	out	0x25, r1	; 37
	OCR2 = 0;
 310:	13 bc       	out	0x23, r1	; 35
	TCNT2 = 0;
 312:	14 bc       	out	0x24, r1	; 36
	/* делитель частоты = 128 */
	TCCR2 |= (1 << CS22) | (1 << CS20);
 314:	85 b5       	in	r24, 0x25	; 37
 316:	85 60       	ori	r24, 0x05	; 5
 318:	85 bd       	out	0x25, r24	; 37
	/* жду сброс флагов для старта в асинхронном режиме */
	while (ASSR != ASSR_REG_REDY);
 31a:	82 b5       	in	r24, 0x22	; 34
 31c:	88 30       	cpi	r24, 0x08	; 8
 31e:	e9 f7       	brne	.-6      	; 0x31a <start_timer2_async+0x12>
	/* чистим флаги прерываний */
	TIFR |= (1 << OCF2) | (1 << TOV2);
 320:	88 b7       	in	r24, 0x38	; 56
 322:	80 6c       	ori	r24, 0xC0	; 192
 324:	88 bf       	out	0x38, r24	; 56
	/* включаю прерывание по переполнению таймера */
	TIMSK |= (1 << TOIE2);
 326:	89 b7       	in	r24, 0x39	; 57
 328:	80 64       	ori	r24, 0x40	; 64
 32a:	89 bf       	out	0x39, r24	; 57
 32c:	08 95       	ret

0000032e <setup_ext_interrapt>:
}

/* настройка внешних прерываний */
void setup_ext_interrapt()
{
	GICR |= (1 << INT0) | (1 << INT1);
 32e:	8b b7       	in	r24, 0x3b	; 59
 330:	80 6c       	ori	r24, 0xC0	; 192
 332:	8b bf       	out	0x3b, r24	; 59
	DDRD = 0;
 334:	11 ba       	out	0x11, r1	; 17
	PORTD |= (1 << INT0_PIN) | (1 << INT1_PIN) | (1 << MENU_BTN) | (1 << UP_BTN) | (1 << DOWN_BTN) | (1 << VIEW_BTN);
 336:	82 b3       	in	r24, 0x12	; 18
 338:	8c 6f       	ori	r24, 0xFC	; 252
 33a:	82 bb       	out	0x12, r24	; 18
 33c:	08 95       	ret

0000033e <main>:
}

int main(void)
{
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	00 d0       	rcall	.+0      	; 0x344 <main+0x6>
 344:	00 d0       	rcall	.+0      	; 0x346 <main+0x8>
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
	ACSR |= (1 << ACD); // ОТКЛЮЧЕНИЕ АЦП
 34a:	88 b1       	in	r24, 0x08	; 8
 34c:	80 68       	ori	r24, 0x80	; 128
 34e:	88 b9       	out	0x08, r24	; 8
	start_timer2_async();
 350:	db df       	rcall	.-74     	; 0x308 <start_timer2_async>
	setup_ext_interrapt();
 352:	ed df       	rcall	.-38     	; 0x32e <setup_ext_interrapt>
	sei();
 354:	78 94       	sei
	
	cat_hour = EEPROM_read(HOUR_ADDRESS);
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	ee de       	rcall	.-548    	; 0x136 <EEPROM_read>
 35a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <cat_hour>
	cat_minutes = EEPROM_read(MIN_ADDRESS);
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	ea de       	rcall	.-556    	; 0x136 <EEPROM_read>
 362:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <cat_minutes>
	
	TM1637_init();
 366:	f0 d0       	rcall	.+480    	; 0x548 <TM1637_init>
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	bf d1       	rcall	.+894    	; 0x6ea <TM1637_turnOnAndSetBrightness>
	TM1637_setSegments(HI_WORD, DISP_LEN, START_POS);
 36c:	86 e7       	ldi	r24, 0x76	; 118
 36e:	89 83       	std	Y+1, r24	; 0x01
 370:	8c e5       	ldi	r24, 0x5C	; 92
 372:	8a 83       	std	Y+2, r24	; 0x02
 374:	88 e3       	ldi	r24, 0x38	; 56
 376:	8b 83       	std	Y+3, r24	; 0x03
 378:	87 e7       	ldi	r24, 0x77	; 119
 37a:	8c 83       	std	Y+4, r24	; 0x04
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	64 e0       	ldi	r22, 0x04	; 4
 380:	ce 01       	movw	r24, r28
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	19 d2       	rcall	.+1074   	; 0x7b8 <TM1637_setSegments>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 386:	2f e3       	ldi	r18, 0x3F	; 63
 388:	8d e0       	ldi	r24, 0x0D	; 13
 38a:	93 e0       	ldi	r25, 0x03	; 3
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	80 40       	sbci	r24, 0x00	; 0
 390:	90 40       	sbci	r25, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <main+0x4e>
 394:	00 c0       	rjmp	.+0      	; 0x396 <main+0x58>
 396:	00 00       	nop
	_delay_ms(WAIT1S);
	print_time_on_display(hour, minutes);
 398:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <minutes>
 39c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hour>
 3a0:	6b de       	rcall	.-810    	; 0x78 <print_time_on_display>
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 3a2:	85 b7       	in	r24, 0x35	; 53
 3a4:	8f 78       	andi	r24, 0x8F	; 143
 3a6:	80 63       	ori	r24, 0x30	; 48
 3a8:	85 bf       	out	0x35, r24	; 53
	
	DDRB |= (1 << PB1);
 3aa:	87 b3       	in	r24, 0x17	; 23
 3ac:	82 60       	ori	r24, 0x02	; 2
 3ae:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1 << PB1);
 3b0:	88 b3       	in	r24, 0x18	; 24
 3b2:	8d 7f       	andi	r24, 0xFD	; 253
 3b4:	88 bb       	out	0x18, r24	; 24
	
	while(1)
	{
		activate_sleep_mode();
 3b6:	c9 de       	rcall	.-622    	; 0x14a <activate_sleep_mode>
 3b8:	fe cf       	rjmp	.-4      	; 0x3b6 <main+0x78>

000003ba <update_menu>:
 3ba:	2f e3       	ldi	r18, 0x3F	; 63
 3bc:	8d e0       	ldi	r24, 0x0D	; 13
 3be:	93 e0       	ldi	r25, 0x03	; 3
 3c0:	21 50       	subi	r18, 0x01	; 1
 3c2:	80 40       	sbci	r24, 0x00	; 0
 3c4:	90 40       	sbci	r25, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <update_menu+0x6>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <update_menu+0x10>
 3ca:	00 00       	nop
uint8_t wait_time = 0;

void update_menu()
{
	_delay_ms(WAIT1S);
	TM1637_clear();
 3cc:	9c d2       	rcall	.+1336   	; 0x906 <TM1637_clear>
 3ce:	08 95       	ret

000003d0 <set_time_up>:
}

uint8_t set_time_up(uint8_t val, uint8_t max_val)
{
	uint8_t result;
	if (val < max_val)
 3d0:	86 17       	cp	r24, r22
 3d2:	10 f4       	brcc	.+4      	; 0x3d8 <set_time_up+0x8>
	{
		result = val + 1;
 3d4:	8f 5f       	subi	r24, 0xFF	; 255
 3d6:	08 95       	ret
	}
	else
	{
		result = 0;
 3d8:	80 e0       	ldi	r24, 0x00	; 0
	}
	return result;
}
 3da:	08 95       	ret

000003dc <set_time_down>:

uint8_t set_time_down(uint8_t val, uint8_t max_val)
{
	uint8_t result;
	if (val > 0)
 3dc:	88 23       	and	r24, r24
 3de:	11 f0       	breq	.+4      	; 0x3e4 <set_time_down+0x8>
	{
		result = val - 1;
 3e0:	6f ef       	ldi	r22, 0xFF	; 255
 3e2:	68 0f       	add	r22, r24
	else
	{
		result = max_val;
	}	
	return result;
}
 3e4:	86 2f       	mov	r24, r22
 3e6:	08 95       	ret

000003e8 <tune_hour>:

void tune_hour()
{
	if (UP_BTN_CLICK)
 3e8:	85 99       	sbic	0x10, 5	; 16
 3ea:	08 c0       	rjmp	.+16     	; 0x3fc <tune_hour+0x14>
	{
		wait_time = 0;
 3ec:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <wait_time>
		hr = set_time_up(hr, HOUR_OVF);
 3f0:	67 e1       	ldi	r22, 0x17	; 23
 3f2:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 3f6:	ec df       	rcall	.-40     	; 0x3d0 <set_time_up>
 3f8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <hr>
	}
			
	if (DOWN_BTN_CLICK)
 3fc:	86 99       	sbic	0x10, 6	; 16
 3fe:	08 c0       	rjmp	.+16     	; 0x410 <__DATA_REGION_LENGTH__+0x10>
	{
		wait_time = 0;
 400:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <wait_time>
		hr = set_time_down(hr, HOUR_OVF);
 404:	67 e1       	ldi	r22, 0x17	; 23
 406:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 40a:	e8 df       	rcall	.-48     	; 0x3dc <set_time_down>
 40c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <hr>
 410:	08 95       	ret

00000412 <tune_min>:
	}
}

void tune_min()
{
	if (UP_BTN_CLICK)
 412:	85 99       	sbic	0x10, 5	; 16
 414:	09 c0       	rjmp	.+18     	; 0x428 <tune_min+0x16>
	{
		wait_time = MAX_WAIT_TIME;
 416:	88 e0       	ldi	r24, 0x08	; 8
 418:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <wait_time>
		min = set_time_up(min, MIN_OVF-1);
 41c:	6b e3       	ldi	r22, 0x3B	; 59
 41e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <min>
 422:	d6 df       	rcall	.-84     	; 0x3d0 <set_time_up>
 424:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <min>
	}
			
	if (DOWN_BTN_CLICK)
 428:	86 99       	sbic	0x10, 6	; 16
 42a:	09 c0       	rjmp	.+18     	; 0x43e <tune_min+0x2c>
	{
		wait_time = MAX_WAIT_TIME;
 42c:	88 e0       	ldi	r24, 0x08	; 8
 42e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <wait_time>
		min = set_time_down(min, MIN_OVF-1);
 432:	6b e3       	ldi	r22, 0x3B	; 59
 434:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <min>
 438:	d1 df       	rcall	.-94     	; 0x3dc <set_time_down>
 43a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <min>
 43e:	08 95       	ret

00000440 <event_listener>:
	}
}

void event_listener()
{
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	cd b7       	in	r28, 0x3d	; 61
 446:	de b7       	in	r29, 0x3e	; 62
 448:	28 97       	sbiw	r28, 0x08	; 8
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	f8 94       	cli
 44e:	de bf       	out	0x3e, r29	; 62
 450:	0f be       	out	0x3f, r0	; 63
 452:	cd bf       	out	0x3d, r28	; 61
	hr = 0;
 454:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <hr>
	min = 0;
 458:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <min>
	TM1637_setSegments(SET_WORD, DISP_LEN, START_POS);
 45c:	8d e6       	ldi	r24, 0x6D	; 109
 45e:	8d 83       	std	Y+5, r24	; 0x05
 460:	8b e7       	ldi	r24, 0x7B	; 123
 462:	8e 83       	std	Y+6, r24	; 0x06
 464:	88 e7       	ldi	r24, 0x78	; 120
 466:	8f 83       	std	Y+7, r24	; 0x07
 468:	88 87       	std	Y+8, r24	; 0x08
 46a:	40 e0       	ldi	r20, 0x00	; 0
 46c:	64 e0       	ldi	r22, 0x04	; 4
 46e:	ce 01       	movw	r24, r28
 470:	05 96       	adiw	r24, 0x05	; 5
 472:	a2 d1       	rcall	.+836    	; 0x7b8 <TM1637_setSegments>
	update_menu();
 474:	a2 df       	rcall	.-188    	; 0x3ba <update_menu>
	while(MENU_BTN_CLICK)
 476:	1a c0       	rjmp	.+52     	; 0x4ac <__stack+0x4d>
	{
		if (wait_time < MAX_WAIT_TIME)
 478:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <wait_time>
 47c:	88 30       	cpi	r24, 0x08	; 8
 47e:	10 f4       	brcc	.+4      	; 0x484 <__stack+0x25>
		{
			tune_hour();
 480:	b3 df       	rcall	.-154    	; 0x3e8 <tune_hour>
 482:	01 c0       	rjmp	.+2      	; 0x486 <__stack+0x27>
		}
		else
		{
			tune_min();
 484:	c6 df       	rcall	.-116    	; 0x412 <tune_min>
		}
		wait_time++;
 486:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <wait_time>
 48a:	8f 5f       	subi	r24, 0xFF	; 255
 48c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <wait_time>
 490:	2f e9       	ldi	r18, 0x9F	; 159
 492:	86 e8       	ldi	r24, 0x86	; 134
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	21 50       	subi	r18, 0x01	; 1
 498:	80 40       	sbci	r24, 0x00	; 0
 49a:	90 40       	sbci	r25, 0x00	; 0
 49c:	e1 f7       	brne	.-8      	; 0x496 <__stack+0x37>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <__stack+0x41>
 4a0:	00 00       	nop
		_delay_ms(WAIT500MS);
		print_time_on_display(hr,min);
 4a2:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <min>
 4a6:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 4aa:	e6 dd       	rcall	.-1076   	; 0x78 <print_time_on_display>
{
	hr = 0;
	min = 0;
	TM1637_setSegments(SET_WORD, DISP_LEN, START_POS);
	update_menu();
	while(MENU_BTN_CLICK)
 4ac:	84 9b       	sbis	0x10, 4	; 16
 4ae:	e4 cf       	rjmp	.-56     	; 0x478 <__stack+0x19>
		}
		wait_time++;
		_delay_ms(WAIT500MS);
		print_time_on_display(hr,min);
	}
	wait_time = 0;
 4b0:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <wait_time>
	TM1637_setSegments(DONE_WORD, DISP_LEN, START_POS);
 4b4:	8e e5       	ldi	r24, 0x5E	; 94
 4b6:	89 83       	std	Y+1, r24	; 0x01
 4b8:	8c e5       	ldi	r24, 0x5C	; 92
 4ba:	8a 83       	std	Y+2, r24	; 0x02
 4bc:	84 e5       	ldi	r24, 0x54	; 84
 4be:	8b 83       	std	Y+3, r24	; 0x03
 4c0:	89 e7       	ldi	r24, 0x79	; 121
 4c2:	8c 83       	std	Y+4, r24	; 0x04
 4c4:	40 e0       	ldi	r20, 0x00	; 0
 4c6:	64 e0       	ldi	r22, 0x04	; 4
 4c8:	ce 01       	movw	r24, r28
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	75 d1       	rcall	.+746    	; 0x7b8 <TM1637_setSegments>
	update_menu();
 4ce:	75 df       	rcall	.-278    	; 0x3ba <update_menu>
}
 4d0:	28 96       	adiw	r28, 0x08	; 8
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	f8 94       	cli
 4d6:	de bf       	out	0x3e, r29	; 62
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	cd bf       	out	0x3d, r28	; 61
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	08 95       	ret

000004e2 <setup_time>:

void setup_time(uint8_t* seconds, uint8_t* minutes, uint8_t* hour)
{
	*seconds = 0;
 4e2:	fc 01       	movw	r30, r24
 4e4:	10 82       	st	Z, r1
	*minutes = min;
 4e6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <min>
 4ea:	fb 01       	movw	r30, r22
 4ec:	80 83       	st	Z, r24
	*hour = hr;
 4ee:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 4f2:	fa 01       	movw	r30, r20
 4f4:	80 83       	st	Z, r24
 4f6:	08 95       	ret

000004f8 <control_seconds>:
#include "../main.h"

void control_seconds(uint8_t* seconds, uint8_t* minutes)
{
	if (*seconds >= SEC_OVF)
 4f8:	fc 01       	movw	r30, r24
 4fa:	20 81       	ld	r18, Z
 4fc:	2c 33       	cpi	r18, 0x3C	; 60
 4fe:	30 f0       	brcs	.+12     	; 0x50c <control_seconds+0x14>
	{
		*minutes = *minutes + 1;
 500:	fb 01       	movw	r30, r22
 502:	20 81       	ld	r18, Z
 504:	2f 5f       	subi	r18, 0xFF	; 255
 506:	20 83       	st	Z, r18
		*seconds = 0;
 508:	fc 01       	movw	r30, r24
 50a:	10 82       	st	Z, r1
 50c:	08 95       	ret

0000050e <control_min>:
	}
}

void control_min(uint8_t* minutes, uint8_t* hour)
{
	if (*minutes >= MIN_OVF)
 50e:	fc 01       	movw	r30, r24
 510:	20 81       	ld	r18, Z
 512:	2c 33       	cpi	r18, 0x3C	; 60
 514:	30 f0       	brcs	.+12     	; 0x522 <control_min+0x14>
	{
		*hour = *hour + 1;
 516:	fb 01       	movw	r30, r22
 518:	20 81       	ld	r18, Z
 51a:	2f 5f       	subi	r18, 0xFF	; 255
 51c:	20 83       	st	Z, r18
		*minutes = 0;
 51e:	fc 01       	movw	r30, r24
 520:	10 82       	st	Z, r1
 522:	08 95       	ret

00000524 <control_hour>:
	}
}

void control_hour(uint8_t* seconds, uint8_t* minutes, uint8_t* hour)
{
 524:	fc 01       	movw	r30, r24
	if (*hour == HOUR_OVF && *minutes >= 59 && *seconds >= 59)
 526:	da 01       	movw	r26, r20
 528:	9c 91       	ld	r25, X
 52a:	97 31       	cpi	r25, 0x17	; 23
 52c:	61 f4       	brne	.+24     	; 0x546 <control_hour+0x22>
 52e:	db 01       	movw	r26, r22
 530:	8c 91       	ld	r24, X
 532:	8b 33       	cpi	r24, 0x3B	; 59
 534:	40 f0       	brcs	.+16     	; 0x546 <control_hour+0x22>
 536:	80 81       	ld	r24, Z
 538:	8b 33       	cpi	r24, 0x3B	; 59
 53a:	28 f0       	brcs	.+10     	; 0x546 <control_hour+0x22>
	{
		*hour = 0;
 53c:	da 01       	movw	r26, r20
 53e:	1c 92       	st	X, r1
		*minutes = 0;
 540:	db 01       	movw	r26, r22
 542:	1c 92       	st	X, r1
		*seconds = 0;
 544:	10 82       	st	Z, r1
 546:	08 95       	ret

00000548 <TM1637_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 548:	84 b3       	in	r24, 0x14	; 20
 54a:	8f 7e       	andi	r24, 0xEF	; 239
 54c:	84 bb       	out	0x14, r24	; 20
 54e:	84 b3       	in	r24, 0x14	; 20
 550:	8f 7d       	andi	r24, 0xDF	; 223
 552:	84 bb       	out	0x14, r24	; 20
 554:	85 b3       	in	r24, 0x15	; 21
 556:	8f 7c       	andi	r24, 0xCF	; 207
 558:	85 bb       	out	0x15, r24	; 21
 55a:	84 b3       	in	r24, 0x14	; 20
 55c:	80 61       	ori	r24, 0x10	; 16
 55e:	84 bb       	out	0x14, r24	; 20
 560:	82 e4       	ldi	r24, 0x42	; 66
 562:	8a 95       	dec	r24
 564:	f1 f7       	brne	.-4      	; 0x562 <TM1637_init+0x1a>
 566:	00 c0       	rjmp	.+0      	; 0x568 <TM1637_init+0x20>
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	20 e4       	ldi	r18, 0x40	; 64
 56c:	1d c0       	rjmp	.+58     	; 0x5a8 <TM1637_init+0x60>
 56e:	84 b3       	in	r24, 0x14	; 20
 570:	80 62       	ori	r24, 0x20	; 32
 572:	84 bb       	out	0x14, r24	; 20
 574:	81 e2       	ldi	r24, 0x21	; 33
 576:	8a 95       	dec	r24
 578:	f1 f7       	brne	.-4      	; 0x576 <TM1637_init+0x2e>
 57a:	00 00       	nop
 57c:	20 ff       	sbrs	r18, 0
 57e:	04 c0       	rjmp	.+8      	; 0x588 <TM1637_init+0x40>
 580:	84 b3       	in	r24, 0x14	; 20
 582:	8f 7e       	andi	r24, 0xEF	; 239
 584:	84 bb       	out	0x14, r24	; 20
 586:	03 c0       	rjmp	.+6      	; 0x58e <TM1637_init+0x46>
 588:	84 b3       	in	r24, 0x14	; 20
 58a:	80 61       	ori	r24, 0x10	; 16
 58c:	84 bb       	out	0x14, r24	; 20
 58e:	81 e2       	ldi	r24, 0x21	; 33
 590:	8a 95       	dec	r24
 592:	f1 f7       	brne	.-4      	; 0x590 <TM1637_init+0x48>
 594:	00 00       	nop
 596:	84 b3       	in	r24, 0x14	; 20
 598:	8f 7d       	andi	r24, 0xDF	; 223
 59a:	84 bb       	out	0x14, r24	; 20
 59c:	82 e4       	ldi	r24, 0x42	; 66
 59e:	8a 95       	dec	r24
 5a0:	f1 f7       	brne	.-4      	; 0x59e <TM1637_init+0x56>
 5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <TM1637_init+0x5c>
 5a4:	26 95       	lsr	r18
 5a6:	9f 5f       	subi	r25, 0xFF	; 255
 5a8:	98 30       	cpi	r25, 0x08	; 8
 5aa:	08 f3       	brcs	.-62     	; 0x56e <TM1637_init+0x26>
 5ac:	84 b3       	in	r24, 0x14	; 20
 5ae:	80 62       	ori	r24, 0x20	; 32
 5b0:	84 bb       	out	0x14, r24	; 20
 5b2:	84 b3       	in	r24, 0x14	; 20
 5b4:	8f 7e       	andi	r24, 0xEF	; 239
 5b6:	84 bb       	out	0x14, r24	; 20
 5b8:	82 e4       	ldi	r24, 0x42	; 66
 5ba:	8a 95       	dec	r24
 5bc:	f1 f7       	brne	.-4      	; 0x5ba <TM1637_init+0x72>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <TM1637_init+0x78>
 5c0:	84 b3       	in	r24, 0x14	; 20
 5c2:	8f 7d       	andi	r24, 0xDF	; 223
 5c4:	84 bb       	out	0x14, r24	; 20
 5c6:	81 e2       	ldi	r24, 0x21	; 33
 5c8:	8a 95       	dec	r24
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <TM1637_init+0x80>
 5cc:	00 00       	nop
 5ce:	9c 99       	sbic	0x13, 4	; 19
 5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <TM1637_init+0x90>
 5d2:	84 b3       	in	r24, 0x14	; 20
 5d4:	80 61       	ori	r24, 0x10	; 16
 5d6:	84 bb       	out	0x14, r24	; 20
 5d8:	81 e2       	ldi	r24, 0x21	; 33
 5da:	8a 95       	dec	r24
 5dc:	f1 f7       	brne	.-4      	; 0x5da <TM1637_init+0x92>
 5de:	00 00       	nop
 5e0:	84 b3       	in	r24, 0x14	; 20
 5e2:	80 62       	ori	r24, 0x20	; 32
 5e4:	84 bb       	out	0x14, r24	; 20
 5e6:	81 e2       	ldi	r24, 0x21	; 33
 5e8:	8a 95       	dec	r24
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <TM1637_init+0xa0>
 5ec:	00 00       	nop
 5ee:	84 b3       	in	r24, 0x14	; 20
 5f0:	80 61       	ori	r24, 0x10	; 16
 5f2:	84 bb       	out	0x14, r24	; 20
 5f4:	81 e2       	ldi	r24, 0x21	; 33
 5f6:	8a 95       	dec	r24
 5f8:	f1 f7       	brne	.-4      	; 0x5f6 <TM1637_init+0xae>
 5fa:	00 00       	nop
 5fc:	84 b3       	in	r24, 0x14	; 20
 5fe:	8f 7d       	andi	r24, 0xDF	; 223
 600:	84 bb       	out	0x14, r24	; 20
 602:	82 e4       	ldi	r24, 0x42	; 66
 604:	8a 95       	dec	r24
 606:	f1 f7       	brne	.-4      	; 0x604 <TM1637_init+0xbc>
 608:	00 c0       	rjmp	.+0      	; 0x60a <TM1637_init+0xc2>
 60a:	84 b3       	in	r24, 0x14	; 20
 60c:	8f 7e       	andi	r24, 0xEF	; 239
 60e:	84 bb       	out	0x14, r24	; 20
 610:	82 e4       	ldi	r24, 0x42	; 66
 612:	8a 95       	dec	r24
 614:	f1 f7       	brne	.-4      	; 0x612 <TM1637_init+0xca>
 616:	00 c0       	rjmp	.+0      	; 0x618 <TM1637_init+0xd0>
 618:	08 95       	ret

0000061a <TM1637_turnOff>:
 61a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <TM1637_brightness_reg>
 61e:	87 70       	andi	r24, 0x07	; 7
 620:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <TM1637_brightness_reg>
 624:	84 b3       	in	r24, 0x14	; 20
 626:	80 61       	ori	r24, 0x10	; 16
 628:	84 bb       	out	0x14, r24	; 20
 62a:	82 e4       	ldi	r24, 0x42	; 66
 62c:	8a 95       	dec	r24
 62e:	f1 f7       	brne	.-4      	; 0x62c <TM1637_turnOff+0x12>
 630:	00 c0       	rjmp	.+0      	; 0x632 <TM1637_turnOff+0x18>
 632:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <TM1637_brightness_reg>
 636:	9f 70       	andi	r25, 0x0F	; 15
 638:	90 68       	ori	r25, 0x80	; 128
 63a:	20 e0       	ldi	r18, 0x00	; 0
 63c:	1d c0       	rjmp	.+58     	; 0x678 <TM1637_turnOff+0x5e>
 63e:	84 b3       	in	r24, 0x14	; 20
 640:	80 62       	ori	r24, 0x20	; 32
 642:	84 bb       	out	0x14, r24	; 20
 644:	81 e2       	ldi	r24, 0x21	; 33
 646:	8a 95       	dec	r24
 648:	f1 f7       	brne	.-4      	; 0x646 <TM1637_turnOff+0x2c>
 64a:	00 00       	nop
 64c:	90 ff       	sbrs	r25, 0
 64e:	04 c0       	rjmp	.+8      	; 0x658 <TM1637_turnOff+0x3e>
 650:	84 b3       	in	r24, 0x14	; 20
 652:	8f 7e       	andi	r24, 0xEF	; 239
 654:	84 bb       	out	0x14, r24	; 20
 656:	03 c0       	rjmp	.+6      	; 0x65e <TM1637_turnOff+0x44>
 658:	84 b3       	in	r24, 0x14	; 20
 65a:	80 61       	ori	r24, 0x10	; 16
 65c:	84 bb       	out	0x14, r24	; 20
 65e:	81 e2       	ldi	r24, 0x21	; 33
 660:	8a 95       	dec	r24
 662:	f1 f7       	brne	.-4      	; 0x660 <TM1637_turnOff+0x46>
 664:	00 00       	nop
 666:	84 b3       	in	r24, 0x14	; 20
 668:	8f 7d       	andi	r24, 0xDF	; 223
 66a:	84 bb       	out	0x14, r24	; 20
 66c:	82 e4       	ldi	r24, 0x42	; 66
 66e:	8a 95       	dec	r24
 670:	f1 f7       	brne	.-4      	; 0x66e <TM1637_turnOff+0x54>
 672:	00 c0       	rjmp	.+0      	; 0x674 <TM1637_turnOff+0x5a>
 674:	96 95       	lsr	r25
 676:	2f 5f       	subi	r18, 0xFF	; 255
 678:	28 30       	cpi	r18, 0x08	; 8
 67a:	08 f3       	brcs	.-62     	; 0x63e <TM1637_turnOff+0x24>
 67c:	84 b3       	in	r24, 0x14	; 20
 67e:	80 62       	ori	r24, 0x20	; 32
 680:	84 bb       	out	0x14, r24	; 20
 682:	84 b3       	in	r24, 0x14	; 20
 684:	8f 7e       	andi	r24, 0xEF	; 239
 686:	84 bb       	out	0x14, r24	; 20
 688:	82 e4       	ldi	r24, 0x42	; 66
 68a:	8a 95       	dec	r24
 68c:	f1 f7       	brne	.-4      	; 0x68a <TM1637_turnOff+0x70>
 68e:	00 c0       	rjmp	.+0      	; 0x690 <TM1637_turnOff+0x76>
 690:	84 b3       	in	r24, 0x14	; 20
 692:	8f 7d       	andi	r24, 0xDF	; 223
 694:	84 bb       	out	0x14, r24	; 20
 696:	81 e2       	ldi	r24, 0x21	; 33
 698:	8a 95       	dec	r24
 69a:	f1 f7       	brne	.-4      	; 0x698 <TM1637_turnOff+0x7e>
 69c:	00 00       	nop
 69e:	9c 99       	sbic	0x13, 4	; 19
 6a0:	03 c0       	rjmp	.+6      	; 0x6a8 <TM1637_turnOff+0x8e>
 6a2:	84 b3       	in	r24, 0x14	; 20
 6a4:	80 61       	ori	r24, 0x10	; 16
 6a6:	84 bb       	out	0x14, r24	; 20
 6a8:	81 e2       	ldi	r24, 0x21	; 33
 6aa:	8a 95       	dec	r24
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <TM1637_turnOff+0x90>
 6ae:	00 00       	nop
 6b0:	84 b3       	in	r24, 0x14	; 20
 6b2:	80 62       	ori	r24, 0x20	; 32
 6b4:	84 bb       	out	0x14, r24	; 20
 6b6:	81 e2       	ldi	r24, 0x21	; 33
 6b8:	8a 95       	dec	r24
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <TM1637_turnOff+0x9e>
 6bc:	00 00       	nop
 6be:	84 b3       	in	r24, 0x14	; 20
 6c0:	80 61       	ori	r24, 0x10	; 16
 6c2:	84 bb       	out	0x14, r24	; 20
 6c4:	81 e2       	ldi	r24, 0x21	; 33
 6c6:	8a 95       	dec	r24
 6c8:	f1 f7       	brne	.-4      	; 0x6c6 <TM1637_turnOff+0xac>
 6ca:	00 00       	nop
 6cc:	84 b3       	in	r24, 0x14	; 20
 6ce:	8f 7d       	andi	r24, 0xDF	; 223
 6d0:	84 bb       	out	0x14, r24	; 20
 6d2:	82 e4       	ldi	r24, 0x42	; 66
 6d4:	8a 95       	dec	r24
 6d6:	f1 f7       	brne	.-4      	; 0x6d4 <TM1637_turnOff+0xba>
 6d8:	00 c0       	rjmp	.+0      	; 0x6da <TM1637_turnOff+0xc0>
 6da:	84 b3       	in	r24, 0x14	; 20
 6dc:	8f 7e       	andi	r24, 0xEF	; 239
 6de:	84 bb       	out	0x14, r24	; 20
 6e0:	82 e4       	ldi	r24, 0x42	; 66
 6e2:	8a 95       	dec	r24
 6e4:	f1 f7       	brne	.-4      	; 0x6e2 <TM1637_turnOff+0xc8>
 6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <TM1637_turnOff+0xce>
 6e8:	08 95       	ret

000006ea <TM1637_turnOnAndSetBrightness>:
  TM1637_brightness_reg = (TM1637_brightness_reg & TM1637_MASK_ON_OFF) | (brightness & TM1637_MASK_BRIGHTNESS);
  TM1637_writeBrightnessReg();
}

void TM1637_turnOnAndSetBrightness(uint8_t brightness) {
  TM1637_brightness_reg = TM1637_MASK_ON_OFF | (brightness & TM1637_MASK_BRIGHTNESS);
 6ea:	87 70       	andi	r24, 0x07	; 7
 6ec:	88 60       	ori	r24, 0x08	; 8
 6ee:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <TM1637_brightness_reg>
  TM1637_COMM_STOP;
}

static inline void TM1637_writeBrightnessReg(void) {
  // Write TM1637_CMD_SET_BRIGHTNESS + TM1637_brightness_reg
  TM1637_COMM_START;
 6f2:	84 b3       	in	r24, 0x14	; 20
 6f4:	80 61       	ori	r24, 0x10	; 16
 6f6:	84 bb       	out	0x14, r24	; 20
 6f8:	82 e4       	ldi	r24, 0x42	; 66
 6fa:	8a 95       	dec	r24
 6fc:	f1 f7       	brne	.-4      	; 0x6fa <TM1637_turnOnAndSetBrightness+0x10>
 6fe:	00 c0       	rjmp	.+0      	; 0x700 <TM1637_turnOnAndSetBrightness+0x16>
  TM1637_writeByte(TM1637_CMD_SET_BRIGHTNESS | (TM1637_brightness_reg & TM1637_MASK_BRIGHTNESS_REG));
 700:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <TM1637_brightness_reg>
 704:	9f 70       	andi	r25, 0x0F	; 15
 706:	90 68       	ori	r25, 0x80	; 128
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 708:	20 e0       	ldi	r18, 0x00	; 0
 70a:	1d c0       	rjmp	.+58     	; 0x746 <TM1637_turnOnAndSetBrightness+0x5c>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 70c:	84 b3       	in	r24, 0x14	; 20
 70e:	80 62       	ori	r24, 0x20	; 32
 710:	84 bb       	out	0x14, r24	; 20
 712:	81 e2       	ldi	r24, 0x21	; 33
 714:	8a 95       	dec	r24
 716:	f1 f7       	brne	.-4      	; 0x714 <TM1637_turnOnAndSetBrightness+0x2a>
 718:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 71a:	90 ff       	sbrs	r25, 0
 71c:	04 c0       	rjmp	.+8      	; 0x726 <TM1637_turnOnAndSetBrightness+0x3c>
 71e:	84 b3       	in	r24, 0x14	; 20
 720:	8f 7e       	andi	r24, 0xEF	; 239
 722:	84 bb       	out	0x14, r24	; 20
 724:	03 c0       	rjmp	.+6      	; 0x72c <TM1637_turnOnAndSetBrightness+0x42>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 726:	84 b3       	in	r24, 0x14	; 20
 728:	80 61       	ori	r24, 0x10	; 16
 72a:	84 bb       	out	0x14, r24	; 20
 72c:	81 e2       	ldi	r24, 0x21	; 33
 72e:	8a 95       	dec	r24
 730:	f1 f7       	brne	.-4      	; 0x72e <TM1637_turnOnAndSetBrightness+0x44>
 732:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 734:	84 b3       	in	r24, 0x14	; 20
 736:	8f 7d       	andi	r24, 0xDF	; 223
 738:	84 bb       	out	0x14, r24	; 20
 73a:	82 e4       	ldi	r24, 0x42	; 66
 73c:	8a 95       	dec	r24
 73e:	f1 f7       	brne	.-4      	; 0x73c <TM1637_turnOnAndSetBrightness+0x52>
 740:	00 c0       	rjmp	.+0      	; 0x742 <TM1637_turnOnAndSetBrightness+0x58>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 742:	96 95       	lsr	r25
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 744:	2f 5f       	subi	r18, 0xFF	; 255
 746:	28 30       	cpi	r18, 0x08	; 8
 748:	08 f3       	brcs	.-62     	; 0x70c <TM1637_turnOnAndSetBrightness+0x22>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 74a:	84 b3       	in	r24, 0x14	; 20
 74c:	80 62       	ori	r24, 0x20	; 32
 74e:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 750:	84 b3       	in	r24, 0x14	; 20
 752:	8f 7e       	andi	r24, 0xEF	; 239
 754:	84 bb       	out	0x14, r24	; 20
 756:	82 e4       	ldi	r24, 0x42	; 66
 758:	8a 95       	dec	r24
 75a:	f1 f7       	brne	.-4      	; 0x758 <TM1637_turnOnAndSetBrightness+0x6e>
 75c:	00 c0       	rjmp	.+0      	; 0x75e <TM1637_turnOnAndSetBrightness+0x74>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 75e:	84 b3       	in	r24, 0x14	; 20
 760:	8f 7d       	andi	r24, 0xDF	; 223
 762:	84 bb       	out	0x14, r24	; 20
 764:	81 e2       	ldi	r24, 0x21	; 33
 766:	8a 95       	dec	r24
 768:	f1 f7       	brne	.-4      	; 0x766 <TM1637_turnOnAndSetBrightness+0x7c>
 76a:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 76c:	9c 99       	sbic	0x13, 4	; 19
 76e:	03 c0       	rjmp	.+6      	; 0x776 <TM1637_turnOnAndSetBrightness+0x8c>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 770:	84 b3       	in	r24, 0x14	; 20
 772:	80 61       	ori	r24, 0x10	; 16
 774:	84 bb       	out	0x14, r24	; 20
 776:	81 e2       	ldi	r24, 0x21	; 33
 778:	8a 95       	dec	r24
 77a:	f1 f7       	brne	.-4      	; 0x778 <TM1637_turnOnAndSetBrightness+0x8e>
 77c:	00 00       	nop

static inline void TM1637_writeBrightnessReg(void) {
  // Write TM1637_CMD_SET_BRIGHTNESS + TM1637_brightness_reg
  TM1637_COMM_START;
  TM1637_writeByte(TM1637_CMD_SET_BRIGHTNESS | (TM1637_brightness_reg & TM1637_MASK_BRIGHTNESS_REG));
  TM1637_COMM_STOP;
 77e:	84 b3       	in	r24, 0x14	; 20
 780:	80 62       	ori	r24, 0x20	; 32
 782:	84 bb       	out	0x14, r24	; 20
 784:	81 e2       	ldi	r24, 0x21	; 33
 786:	8a 95       	dec	r24
 788:	f1 f7       	brne	.-4      	; 0x786 <TM1637_turnOnAndSetBrightness+0x9c>
 78a:	00 00       	nop
 78c:	84 b3       	in	r24, 0x14	; 20
 78e:	80 61       	ori	r24, 0x10	; 16
 790:	84 bb       	out	0x14, r24	; 20
 792:	81 e2       	ldi	r24, 0x21	; 33
 794:	8a 95       	dec	r24
 796:	f1 f7       	brne	.-4      	; 0x794 <TM1637_turnOnAndSetBrightness+0xaa>
 798:	00 00       	nop
 79a:	84 b3       	in	r24, 0x14	; 20
 79c:	8f 7d       	andi	r24, 0xDF	; 223
 79e:	84 bb       	out	0x14, r24	; 20
 7a0:	82 e4       	ldi	r24, 0x42	; 66
 7a2:	8a 95       	dec	r24
 7a4:	f1 f7       	brne	.-4      	; 0x7a2 <TM1637_turnOnAndSetBrightness+0xb8>
 7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <TM1637_turnOnAndSetBrightness+0xbe>
 7a8:	84 b3       	in	r24, 0x14	; 20
 7aa:	8f 7e       	andi	r24, 0xEF	; 239
 7ac:	84 bb       	out	0x14, r24	; 20
 7ae:	82 e4       	ldi	r24, 0x42	; 66
 7b0:	8a 95       	dec	r24
 7b2:	f1 f7       	brne	.-4      	; 0x7b0 <TM1637_turnOnAndSetBrightness+0xc6>
 7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <TM1637_turnOnAndSetBrightness+0xcc>
 7b6:	08 95       	ret

000007b8 <TM1637_setSegments>:
void TM1637_turnOnAndSetBrightness(uint8_t brightness) {
  TM1637_brightness_reg = TM1637_MASK_ON_OFF | (brightness & TM1637_MASK_BRIGHTNESS);
  TM1637_writeBrightnessReg();
}

void TM1637_setSegments(const uint8_t segments[], uint8_t length, uint8_t pos) {
 7b8:	fc 01       	movw	r30, r24
  TM1637_COMM_START;
 7ba:	84 b3       	in	r24, 0x14	; 20
 7bc:	80 61       	ori	r24, 0x10	; 16
 7be:	84 bb       	out	0x14, r24	; 20
 7c0:	82 e4       	ldi	r24, 0x42	; 66
 7c2:	8a 95       	dec	r24
 7c4:	f1 f7       	brne	.-4      	; 0x7c2 <TM1637_setSegments+0xa>
 7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <TM1637_setSegments+0x10>
  // Write TM1637_CMD_SET_DATA + first digit address
  TM1637_writeByte(TM1637_CMD_SET_DATA | (pos & TM1637_MASK_POS));
 7c8:	43 70       	andi	r20, 0x03	; 3
 7ca:	40 6c       	ori	r20, 0xC0	; 192
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	1d c0       	rjmp	.+58     	; 0x80a <TM1637_setSegments+0x52>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 7d0:	84 b3       	in	r24, 0x14	; 20
 7d2:	80 62       	ori	r24, 0x20	; 32
 7d4:	84 bb       	out	0x14, r24	; 20
 7d6:	81 e2       	ldi	r24, 0x21	; 33
 7d8:	8a 95       	dec	r24
 7da:	f1 f7       	brne	.-4      	; 0x7d8 <TM1637_setSegments+0x20>
 7dc:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 7de:	40 ff       	sbrs	r20, 0
 7e0:	04 c0       	rjmp	.+8      	; 0x7ea <TM1637_setSegments+0x32>
 7e2:	84 b3       	in	r24, 0x14	; 20
 7e4:	8f 7e       	andi	r24, 0xEF	; 239
 7e6:	84 bb       	out	0x14, r24	; 20
 7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <TM1637_setSegments+0x38>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 7ea:	84 b3       	in	r24, 0x14	; 20
 7ec:	80 61       	ori	r24, 0x10	; 16
 7ee:	84 bb       	out	0x14, r24	; 20
 7f0:	81 e2       	ldi	r24, 0x21	; 33
 7f2:	8a 95       	dec	r24
 7f4:	f1 f7       	brne	.-4      	; 0x7f2 <TM1637_setSegments+0x3a>
 7f6:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 7f8:	84 b3       	in	r24, 0x14	; 20
 7fa:	8f 7d       	andi	r24, 0xDF	; 223
 7fc:	84 bb       	out	0x14, r24	; 20
 7fe:	82 e4       	ldi	r24, 0x42	; 66
 800:	8a 95       	dec	r24
 802:	f1 f7       	brne	.-4      	; 0x800 <TM1637_setSegments+0x48>
 804:	00 c0       	rjmp	.+0      	; 0x806 <TM1637_setSegments+0x4e>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 806:	46 95       	lsr	r20
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 808:	9f 5f       	subi	r25, 0xFF	; 255
 80a:	98 30       	cpi	r25, 0x08	; 8
 80c:	08 f3       	brcs	.-62     	; 0x7d0 <TM1637_setSegments+0x18>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 80e:	84 b3       	in	r24, 0x14	; 20
 810:	80 62       	ori	r24, 0x20	; 32
 812:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 814:	84 b3       	in	r24, 0x14	; 20
 816:	8f 7e       	andi	r24, 0xEF	; 239
 818:	84 bb       	out	0x14, r24	; 20
 81a:	82 e4       	ldi	r24, 0x42	; 66
 81c:	8a 95       	dec	r24
 81e:	f1 f7       	brne	.-4      	; 0x81c <TM1637_setSegments+0x64>
 820:	00 c0       	rjmp	.+0      	; 0x822 <TM1637_setSegments+0x6a>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 822:	84 b3       	in	r24, 0x14	; 20
 824:	8f 7d       	andi	r24, 0xDF	; 223
 826:	84 bb       	out	0x14, r24	; 20
 828:	81 e2       	ldi	r24, 0x21	; 33
 82a:	8a 95       	dec	r24
 82c:	f1 f7       	brne	.-4      	; 0x82a <TM1637_setSegments+0x72>
 82e:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 830:	9c 99       	sbic	0x13, 4	; 19
 832:	03 c0       	rjmp	.+6      	; 0x83a <TM1637_setSegments+0x82>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 834:	84 b3       	in	r24, 0x14	; 20
 836:	80 61       	ori	r24, 0x10	; 16
 838:	84 bb       	out	0x14, r24	; 20
 83a:	81 e2       	ldi	r24, 0x21	; 33
 83c:	8a 95       	dec	r24
 83e:	f1 f7       	brne	.-4      	; 0x83c <TM1637_setSegments+0x84>
 840:	00 00       	nop
void TM1637_setSegments(const uint8_t segments[], uint8_t length, uint8_t pos) {
  TM1637_COMM_START;
  // Write TM1637_CMD_SET_DATA + first digit address
  TM1637_writeByte(TM1637_CMD_SET_DATA | (pos & TM1637_MASK_POS));
  // Write data bytes
  for (uint8_t i = 0; i < length; i++)
 842:	40 e0       	ldi	r20, 0x00	; 0
 844:	40 c0       	rjmp	.+128    	; 0x8c6 <TM1637_setSegments+0x10e>
    TM1637_writeByte(segments[i]);
 846:	df 01       	movw	r26, r30
 848:	a4 0f       	add	r26, r20
 84a:	b1 1d       	adc	r27, r1
 84c:	3c 91       	ld	r19, X
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 84e:	20 e0       	ldi	r18, 0x00	; 0
 850:	1d c0       	rjmp	.+58     	; 0x88c <TM1637_setSegments+0xd4>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 852:	94 b3       	in	r25, 0x14	; 20
 854:	90 62       	ori	r25, 0x20	; 32
 856:	94 bb       	out	0x14, r25	; 20
 858:	81 e2       	ldi	r24, 0x21	; 33
 85a:	8a 95       	dec	r24
 85c:	f1 f7       	brne	.-4      	; 0x85a <TM1637_setSegments+0xa2>
 85e:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 860:	30 ff       	sbrs	r19, 0
 862:	04 c0       	rjmp	.+8      	; 0x86c <TM1637_setSegments+0xb4>
 864:	94 b3       	in	r25, 0x14	; 20
 866:	9f 7e       	andi	r25, 0xEF	; 239
 868:	94 bb       	out	0x14, r25	; 20
 86a:	03 c0       	rjmp	.+6      	; 0x872 <TM1637_setSegments+0xba>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 86c:	94 b3       	in	r25, 0x14	; 20
 86e:	90 61       	ori	r25, 0x10	; 16
 870:	94 bb       	out	0x14, r25	; 20
 872:	81 e2       	ldi	r24, 0x21	; 33
 874:	8a 95       	dec	r24
 876:	f1 f7       	brne	.-4      	; 0x874 <TM1637_setSegments+0xbc>
 878:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 87a:	94 b3       	in	r25, 0x14	; 20
 87c:	9f 7d       	andi	r25, 0xDF	; 223
 87e:	94 bb       	out	0x14, r25	; 20
 880:	82 e4       	ldi	r24, 0x42	; 66
 882:	8a 95       	dec	r24
 884:	f1 f7       	brne	.-4      	; 0x882 <TM1637_setSegments+0xca>
 886:	00 c0       	rjmp	.+0      	; 0x888 <TM1637_setSegments+0xd0>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 888:	36 95       	lsr	r19
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 88a:	2f 5f       	subi	r18, 0xFF	; 255
 88c:	28 30       	cpi	r18, 0x08	; 8
 88e:	08 f3       	brcs	.-62     	; 0x852 <TM1637_setSegments+0x9a>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 890:	84 b3       	in	r24, 0x14	; 20
 892:	80 62       	ori	r24, 0x20	; 32
 894:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 896:	84 b3       	in	r24, 0x14	; 20
 898:	8f 7e       	andi	r24, 0xEF	; 239
 89a:	84 bb       	out	0x14, r24	; 20
 89c:	82 e4       	ldi	r24, 0x42	; 66
 89e:	8a 95       	dec	r24
 8a0:	f1 f7       	brne	.-4      	; 0x89e <TM1637_setSegments+0xe6>
 8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <TM1637_setSegments+0xec>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 8a4:	94 b3       	in	r25, 0x14	; 20
 8a6:	9f 7d       	andi	r25, 0xDF	; 223
 8a8:	94 bb       	out	0x14, r25	; 20
 8aa:	81 e2       	ldi	r24, 0x21	; 33
 8ac:	8a 95       	dec	r24
 8ae:	f1 f7       	brne	.-4      	; 0x8ac <TM1637_setSegments+0xf4>
 8b0:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 8b2:	9c 99       	sbic	0x13, 4	; 19
 8b4:	03 c0       	rjmp	.+6      	; 0x8bc <TM1637_setSegments+0x104>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 8b6:	84 b3       	in	r24, 0x14	; 20
 8b8:	80 61       	ori	r24, 0x10	; 16
 8ba:	84 bb       	out	0x14, r24	; 20
 8bc:	81 e2       	ldi	r24, 0x21	; 33
 8be:	8a 95       	dec	r24
 8c0:	f1 f7       	brne	.-4      	; 0x8be <TM1637_setSegments+0x106>
 8c2:	00 00       	nop
void TM1637_setSegments(const uint8_t segments[], uint8_t length, uint8_t pos) {
  TM1637_COMM_START;
  // Write TM1637_CMD_SET_DATA + first digit address
  TM1637_writeByte(TM1637_CMD_SET_DATA | (pos & TM1637_MASK_POS));
  // Write data bytes
  for (uint8_t i = 0; i < length; i++)
 8c4:	4f 5f       	subi	r20, 0xFF	; 255
 8c6:	46 17       	cp	r20, r22
 8c8:	08 f4       	brcc	.+2      	; 0x8cc <TM1637_setSegments+0x114>
 8ca:	bd cf       	rjmp	.-134    	; 0x846 <TM1637_setSegments+0x8e>
    TM1637_writeByte(segments[i]);
  TM1637_COMM_STOP;
 8cc:	84 b3       	in	r24, 0x14	; 20
 8ce:	80 62       	ori	r24, 0x20	; 32
 8d0:	84 bb       	out	0x14, r24	; 20
 8d2:	81 e2       	ldi	r24, 0x21	; 33
 8d4:	8a 95       	dec	r24
 8d6:	f1 f7       	brne	.-4      	; 0x8d4 <TM1637_setSegments+0x11c>
 8d8:	00 00       	nop
 8da:	84 b3       	in	r24, 0x14	; 20
 8dc:	80 61       	ori	r24, 0x10	; 16
 8de:	84 bb       	out	0x14, r24	; 20
 8e0:	81 e2       	ldi	r24, 0x21	; 33
 8e2:	8a 95       	dec	r24
 8e4:	f1 f7       	brne	.-4      	; 0x8e2 <TM1637_setSegments+0x12a>
 8e6:	00 00       	nop
 8e8:	84 b3       	in	r24, 0x14	; 20
 8ea:	8f 7d       	andi	r24, 0xDF	; 223
 8ec:	84 bb       	out	0x14, r24	; 20
 8ee:	82 e4       	ldi	r24, 0x42	; 66
 8f0:	8a 95       	dec	r24
 8f2:	f1 f7       	brne	.-4      	; 0x8f0 <TM1637_setSegments+0x138>
 8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <TM1637_setSegments+0x13e>
 8f6:	84 b3       	in	r24, 0x14	; 20
 8f8:	8f 7e       	andi	r24, 0xEF	; 239
 8fa:	84 bb       	out	0x14, r24	; 20
 8fc:	82 e4       	ldi	r24, 0x42	; 66
 8fe:	8a 95       	dec	r24
 900:	f1 f7       	brne	.-4      	; 0x8fe <TM1637_setSegments+0x146>
 902:	00 c0       	rjmp	.+0      	; 0x904 <TM1637_setSegments+0x14c>
 904:	08 95       	ret

00000906 <TM1637_clear>:
}

void TM1637_clear(void) {
  TM1637_COMM_START;
 906:	84 b3       	in	r24, 0x14	; 20
 908:	80 61       	ori	r24, 0x10	; 16
 90a:	84 bb       	out	0x14, r24	; 20
 90c:	82 e4       	ldi	r24, 0x42	; 66
 90e:	8a 95       	dec	r24
 910:	f1 f7       	brne	.-4      	; 0x90e <TM1637_clear+0x8>
 912:	00 c0       	rjmp	.+0      	; 0x914 <TM1637_clear+0xe>
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	20 ec       	ldi	r18, 0xC0	; 192
 918:	1d c0       	rjmp	.+58     	; 0x954 <TM1637_clear+0x4e>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 91a:	84 b3       	in	r24, 0x14	; 20
 91c:	80 62       	ori	r24, 0x20	; 32
 91e:	84 bb       	out	0x14, r24	; 20
 920:	81 e2       	ldi	r24, 0x21	; 33
 922:	8a 95       	dec	r24
 924:	f1 f7       	brne	.-4      	; 0x922 <TM1637_clear+0x1c>
 926:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 928:	20 ff       	sbrs	r18, 0
 92a:	04 c0       	rjmp	.+8      	; 0x934 <TM1637_clear+0x2e>
 92c:	84 b3       	in	r24, 0x14	; 20
 92e:	8f 7e       	andi	r24, 0xEF	; 239
 930:	84 bb       	out	0x14, r24	; 20
 932:	03 c0       	rjmp	.+6      	; 0x93a <TM1637_clear+0x34>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 934:	84 b3       	in	r24, 0x14	; 20
 936:	80 61       	ori	r24, 0x10	; 16
 938:	84 bb       	out	0x14, r24	; 20
 93a:	81 e2       	ldi	r24, 0x21	; 33
 93c:	8a 95       	dec	r24
 93e:	f1 f7       	brne	.-4      	; 0x93c <TM1637_clear+0x36>
 940:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 942:	84 b3       	in	r24, 0x14	; 20
 944:	8f 7d       	andi	r24, 0xDF	; 223
 946:	84 bb       	out	0x14, r24	; 20
 948:	82 e4       	ldi	r24, 0x42	; 66
 94a:	8a 95       	dec	r24
 94c:	f1 f7       	brne	.-4      	; 0x94a <TM1637_clear+0x44>
 94e:	00 c0       	rjmp	.+0      	; 0x950 <TM1637_clear+0x4a>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 950:	26 95       	lsr	r18
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 952:	9f 5f       	subi	r25, 0xFF	; 255
 954:	98 30       	cpi	r25, 0x08	; 8
 956:	08 f3       	brcs	.-62     	; 0x91a <TM1637_clear+0x14>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 958:	84 b3       	in	r24, 0x14	; 20
 95a:	80 62       	ori	r24, 0x20	; 32
 95c:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 95e:	84 b3       	in	r24, 0x14	; 20
 960:	8f 7e       	andi	r24, 0xEF	; 239
 962:	84 bb       	out	0x14, r24	; 20
 964:	82 e4       	ldi	r24, 0x42	; 66
 966:	8a 95       	dec	r24
 968:	f1 f7       	brne	.-4      	; 0x966 <TM1637_clear+0x60>
 96a:	00 c0       	rjmp	.+0      	; 0x96c <TM1637_clear+0x66>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 96c:	84 b3       	in	r24, 0x14	; 20
 96e:	8f 7d       	andi	r24, 0xDF	; 223
 970:	84 bb       	out	0x14, r24	; 20
 972:	81 e2       	ldi	r24, 0x21	; 33
 974:	8a 95       	dec	r24
 976:	f1 f7       	brne	.-4      	; 0x974 <TM1637_clear+0x6e>
 978:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 97a:	9c 99       	sbic	0x13, 4	; 19
 97c:	03 c0       	rjmp	.+6      	; 0x984 <TM1637_clear+0x7e>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 97e:	84 b3       	in	r24, 0x14	; 20
 980:	80 61       	ori	r24, 0x10	; 16
 982:	84 bb       	out	0x14, r24	; 20
 984:	81 e2       	ldi	r24, 0x21	; 33
 986:	8a 95       	dec	r24
 988:	f1 f7       	brne	.-4      	; 0x986 <TM1637_clear+0x80>
 98a:	00 00       	nop

void TM1637_clear(void) {
  TM1637_COMM_START;
  TM1637_writeByte(TM1637_CMD_SET_DATA);
  // Write blank segment data bytes
  for (uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
 98c:	20 e0       	ldi	r18, 0x00	; 0
 98e:	35 c0       	rjmp	.+106    	; 0x9fa <TM1637_clear+0xf4>


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 990:	84 b3       	in	r24, 0x14	; 20
 992:	80 62       	ori	r24, 0x20	; 32
 994:	84 bb       	out	0x14, r24	; 20
 996:	81 e2       	ldi	r24, 0x21	; 33
 998:	8a 95       	dec	r24
 99a:	f1 f7       	brne	.-4      	; 0x998 <TM1637_clear+0x92>
 99c:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 99e:	84 b3       	in	r24, 0x14	; 20
 9a0:	80 61       	ori	r24, 0x10	; 16
 9a2:	84 bb       	out	0x14, r24	; 20
 9a4:	81 e2       	ldi	r24, 0x21	; 33
 9a6:	8a 95       	dec	r24
 9a8:	f1 f7       	brne	.-4      	; 0x9a6 <TM1637_clear+0xa0>
 9aa:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 9ac:	84 b3       	in	r24, 0x14	; 20
 9ae:	8f 7d       	andi	r24, 0xDF	; 223
 9b0:	84 bb       	out	0x14, r24	; 20
 9b2:	82 e4       	ldi	r24, 0x42	; 66
 9b4:	8a 95       	dec	r24
 9b6:	f1 f7       	brne	.-4      	; 0x9b4 <TM1637_clear+0xae>
 9b8:	00 c0       	rjmp	.+0      	; 0x9ba <TM1637_clear+0xb4>
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 9ba:	9f 5f       	subi	r25, 0xFF	; 255
 9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <TM1637_clear+0xba>
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	98 30       	cpi	r25, 0x08	; 8
 9c2:	30 f3       	brcs	.-52     	; 0x990 <TM1637_clear+0x8a>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 9c4:	84 b3       	in	r24, 0x14	; 20
 9c6:	80 62       	ori	r24, 0x20	; 32
 9c8:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 9ca:	84 b3       	in	r24, 0x14	; 20
 9cc:	8f 7e       	andi	r24, 0xEF	; 239
 9ce:	84 bb       	out	0x14, r24	; 20
 9d0:	82 e4       	ldi	r24, 0x42	; 66
 9d2:	8a 95       	dec	r24
 9d4:	f1 f7       	brne	.-4      	; 0x9d2 <TM1637_clear+0xcc>
 9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <TM1637_clear+0xd2>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 9d8:	84 b3       	in	r24, 0x14	; 20
 9da:	8f 7d       	andi	r24, 0xDF	; 223
 9dc:	84 bb       	out	0x14, r24	; 20
 9de:	81 e2       	ldi	r24, 0x21	; 33
 9e0:	8a 95       	dec	r24
 9e2:	f1 f7       	brne	.-4      	; 0x9e0 <TM1637_clear+0xda>
 9e4:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 9e6:	9c 99       	sbic	0x13, 4	; 19
 9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <TM1637_clear+0xea>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 9ea:	84 b3       	in	r24, 0x14	; 20
 9ec:	80 61       	ori	r24, 0x10	; 16
 9ee:	84 bb       	out	0x14, r24	; 20
 9f0:	81 e2       	ldi	r24, 0x21	; 33
 9f2:	8a 95       	dec	r24
 9f4:	f1 f7       	brne	.-4      	; 0x9f2 <TM1637_clear+0xec>
 9f6:	00 00       	nop

void TM1637_clear(void) {
  TM1637_COMM_START;
  TM1637_writeByte(TM1637_CMD_SET_DATA);
  // Write blank segment data bytes
  for (uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
 9f8:	2f 5f       	subi	r18, 0xFF	; 255
 9fa:	24 30       	cpi	r18, 0x04	; 4
 9fc:	00 f3       	brcs	.-64     	; 0x9be <TM1637_clear+0xb8>
    TM1637_writeByte(TM1637_SPAT_BLANK);
  TM1637_COMM_STOP;
 9fe:	84 b3       	in	r24, 0x14	; 20
 a00:	80 62       	ori	r24, 0x20	; 32
 a02:	84 bb       	out	0x14, r24	; 20
 a04:	81 e2       	ldi	r24, 0x21	; 33
 a06:	8a 95       	dec	r24
 a08:	f1 f7       	brne	.-4      	; 0xa06 <TM1637_clear+0x100>
 a0a:	00 00       	nop
 a0c:	84 b3       	in	r24, 0x14	; 20
 a0e:	80 61       	ori	r24, 0x10	; 16
 a10:	84 bb       	out	0x14, r24	; 20
 a12:	81 e2       	ldi	r24, 0x21	; 33
 a14:	8a 95       	dec	r24
 a16:	f1 f7       	brne	.-4      	; 0xa14 <TM1637_clear+0x10e>
 a18:	00 00       	nop
 a1a:	84 b3       	in	r24, 0x14	; 20
 a1c:	8f 7d       	andi	r24, 0xDF	; 223
 a1e:	84 bb       	out	0x14, r24	; 20
 a20:	82 e4       	ldi	r24, 0x42	; 66
 a22:	8a 95       	dec	r24
 a24:	f1 f7       	brne	.-4      	; 0xa22 <TM1637_clear+0x11c>
 a26:	00 c0       	rjmp	.+0      	; 0xa28 <TM1637_clear+0x122>
 a28:	84 b3       	in	r24, 0x14	; 20
 a2a:	8f 7e       	andi	r24, 0xEF	; 239
 a2c:	84 bb       	out	0x14, r24	; 20
 a2e:	82 e4       	ldi	r24, 0x42	; 66
 a30:	8a 95       	dec	r24
 a32:	f1 f7       	brne	.-4      	; 0xa30 <TM1637_clear+0x12a>
 a34:	00 c0       	rjmp	.+0      	; 0xa36 <TM1637_clear+0x130>
 a36:	08 95       	ret

00000a38 <_exit>:
 a38:	f8 94       	cli

00000a3a <__stop_program>:
 a3a:	ff cf       	rjmp	.-2      	; 0xa3a <__stop_program>
