
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000b6a  00000bfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080006c  0080006c  00000c0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034f8  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000df2  00000000  00000000  00004310  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001862  00000000  00000000  00005102  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f4  00000000  00000000  00006964  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000076c  00000000  00000000  00006d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023b0  00000000  00000000  000074c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00009874  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	a9 c1       	rjmp	.+850    	; 0x356 <__vector_1>
   4:	f8 c1       	rjmp	.+1008   	; 0x3f6 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e6       	ldi	r30, 0x6A	; 106
  3a:	fb e0       	ldi	r31, 0x0B	; 11
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ad 37       	cpi	r26, 0x7D	; 125
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	15 d2       	rcall	.+1066   	; 0x484 <main>
  5a:	85 c5       	rjmp	.+2826   	; 0xb66 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <select_display_digit>:
	0b11101111
};

uint8_t select_display_digit(uint8_t digit)
{
	if (digit >= 0 && digit < 10)
  5e:	8a 30       	cpi	r24, 0x0A	; 10
  60:	30 f4       	brcc	.+12     	; 0x6e <select_display_digit+0x10>
	{
		return display_digit[digit];
  62:	e8 2f       	mov	r30, r24
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	e0 5a       	subi	r30, 0xA0	; 160
  68:	ff 4f       	sbci	r31, 0xFF	; 255
  6a:	80 81       	ld	r24, Z
  6c:	08 95       	ret
	}
	else
	{
		return TM1637_SPAT_BLANK;
  6e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
  70:	08 95       	ret

00000072 <wakeup_display>:

void wakeup_display()
{
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	d1 d3       	rcall	.+1954   	; 0x818 <TM1637_turnOnAndSetBrightness>
  76:	08 95       	ret

00000078 <print_time_on_display>:
}

void print_time_on_display(uint8_t hour, uint8_t min)
{
  78:	ff 92       	push	r15
  7a:	0f 93       	push	r16
  7c:	1f 93       	push	r17
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	28 97       	sbiw	r28, 0x08	; 8
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	f8 94       	cli
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	0f be       	out	0x3f, r0	; 63
  90:	cd bf       	out	0x3d, r28	; 61
	uint8_t d_time[DISP_LEN];
	d_time[0] = hour / DIVIDER;
  92:	9d ec       	ldi	r25, 0xCD	; 205
  94:	89 9f       	mul	r24, r25
  96:	21 2d       	mov	r18, r1
  98:	11 24       	eor	r1, r1
  9a:	26 95       	lsr	r18
  9c:	26 95       	lsr	r18
  9e:	26 95       	lsr	r18
  a0:	29 83       	std	Y+1, r18	; 0x01
	d_time[1] = hour % DIVIDER;
  a2:	22 0f       	add	r18, r18
  a4:	32 2f       	mov	r19, r18
  a6:	33 0f       	add	r19, r19
  a8:	33 0f       	add	r19, r19
  aa:	23 0f       	add	r18, r19
  ac:	82 1b       	sub	r24, r18
  ae:	8a 83       	std	Y+2, r24	; 0x02
	d_time[2] = min / DIVIDER;
  b0:	69 9f       	mul	r22, r25
  b2:	81 2d       	mov	r24, r1
  b4:	11 24       	eor	r1, r1
  b6:	86 95       	lsr	r24
  b8:	86 95       	lsr	r24
  ba:	86 95       	lsr	r24
  bc:	8b 83       	std	Y+3, r24	; 0x03
	d_time[3] = min % DIVIDER;
  be:	88 0f       	add	r24, r24
  c0:	98 2f       	mov	r25, r24
  c2:	99 0f       	add	r25, r25
  c4:	99 0f       	add	r25, r25
  c6:	89 0f       	add	r24, r25
  c8:	68 1b       	sub	r22, r24
  ca:	6c 83       	std	Y+4, r22	; 0x04
	
	uint8_t out_time[TM1637_DIGITS_COUNT];
	for(uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
  cc:	f1 2c       	mov	r15, r1
  ce:	12 c0       	rjmp	.+36     	; 0xf4 <print_time_on_display+0x7c>
	{
		out_time[i] = select_display_digit(d_time[i]);
  d0:	0f 2d       	mov	r16, r15
  d2:	10 e0       	ldi	r17, 0x00	; 0
  d4:	e1 e0       	ldi	r30, 0x01	; 1
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	ec 0f       	add	r30, r28
  da:	fd 1f       	adc	r31, r29
  dc:	e0 0f       	add	r30, r16
  de:	f1 1f       	adc	r31, r17
  e0:	80 81       	ld	r24, Z
  e2:	bd df       	rcall	.-134    	; 0x5e <select_display_digit>
  e4:	e5 e0       	ldi	r30, 0x05	; 5
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	ec 0f       	add	r30, r28
  ea:	fd 1f       	adc	r31, r29
  ec:	e0 0f       	add	r30, r16
  ee:	f1 1f       	adc	r31, r17
  f0:	80 83       	st	Z, r24
	d_time[1] = hour % DIVIDER;
	d_time[2] = min / DIVIDER;
	d_time[3] = min % DIVIDER;
	
	uint8_t out_time[TM1637_DIGITS_COUNT];
	for(uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
  f2:	f3 94       	inc	r15
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	8f 15       	cp	r24, r15
  f8:	58 f7       	brcc	.-42     	; 0xd0 <print_time_on_display+0x58>
	{
		out_time[i] = select_display_digit(d_time[i]);
	}
	TM1637_setSegments(out_time, TM1637_DIGITS_COUNT, START_POS);
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	64 e0       	ldi	r22, 0x04	; 4
  fe:	ce 01       	movw	r24, r28
 100:	05 96       	adiw	r24, 0x05	; 5
 102:	f1 d3       	rcall	.+2018   	; 0x8e6 <TM1637_setSegments>
 104:	28 96       	adiw	r28, 0x08	; 8
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	ff 90       	pop	r15
 11a:	08 95       	ret

0000011c <DS1302_Bin8_To_BCD>:
uint8_t DS1302_Bin8_To_BCD(uint8_t data)
{
   uint8_t nibh;
   uint8_t nibl;

   nibh=data/10;
 11c:	2d ec       	ldi	r18, 0xCD	; 205
 11e:	82 9f       	mul	r24, r18
 120:	21 2d       	mov	r18, r1
 122:	11 24       	eor	r1, r1
 124:	26 95       	lsr	r18
 126:	26 95       	lsr	r18
 128:	26 95       	lsr	r18
   nibl=data-(nibh*10);
 12a:	32 2f       	mov	r19, r18
 12c:	33 0f       	add	r19, r19
 12e:	93 2f       	mov	r25, r19
 130:	99 0f       	add	r25, r25
 132:	99 0f       	add	r25, r25
 134:	93 0f       	add	r25, r19
 136:	89 1b       	sub	r24, r25

   return((nibh<<4)|nibl);
 138:	90 e1       	ldi	r25, 0x10	; 16
 13a:	29 9f       	mul	r18, r25
 13c:	90 01       	movw	r18, r0
 13e:	11 24       	eor	r1, r1
}
 140:	82 2b       	or	r24, r18
 142:	08 95       	ret

00000144 <DS1302_BCD_To_Bin8>:

uint8_t DS1302_BCD_To_Bin8(uint8_t data)
{
unsigned char result;		
	result = ((data>>4) & 0b00000111);
 144:	98 2f       	mov	r25, r24
 146:	92 95       	swap	r25
 148:	9f 70       	andi	r25, 0x0F	; 15
 14a:	97 70       	andi	r25, 0x07	; 7
	data &= 0x0F;
 14c:	8f 70       	andi	r24, 0x0F	; 15
	data = data + result*10;
 14e:	99 0f       	add	r25, r25
 150:	29 2f       	mov	r18, r25
 152:	22 0f       	add	r18, r18
 154:	22 0f       	add	r18, r18
 156:	92 0f       	add	r25, r18
	return data;
}
 158:	89 0f       	add	r24, r25
 15a:	08 95       	ret

0000015c <ds1302_write>:

//посылаем команду или байт данных в часы
void ds1302_write(unsigned char cmd)
{
unsigned char i;
	DS1302_DDR_RTC |= (1<<DS1302_E) | (1<<DS1302_SCLK);
 15c:	94 b3       	in	r25, 0x14	; 20
 15e:	93 60       	ori	r25, 0x03	; 3
 160:	94 bb       	out	0x14, r25	; 20
	DS1302_PORT_RTC |= (1<<DS1302_E);//E=1
 162:	95 b3       	in	r25, 0x15	; 21
 164:	91 60       	ori	r25, 0x01	; 1
 166:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	00 00       	nop
	_delay_us(1);
	DS1302_DDR_RTC |= (1<<DS1302_IO);//выход
 16a:	94 b3       	in	r25, 0x14	; 20
 16c:	94 60       	ori	r25, 0x04	; 4
 16e:	94 bb       	out	0x14, r25	; 20
	for(i=0; i<8; i++)
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	21 c0       	rjmp	.+66     	; 0x1b6 <ds1302_write+0x5a>
	{
		if((cmd&(1<<i)) == 1<<i)
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	09 2e       	mov	r0, r25
 17a:	02 c0       	rjmp	.+4      	; 0x180 <ds1302_write+0x24>
 17c:	22 0f       	add	r18, r18
 17e:	33 1f       	adc	r19, r19
 180:	0a 94       	dec	r0
 182:	e2 f7       	brpl	.-8      	; 0x17c <ds1302_write+0x20>
 184:	48 2f       	mov	r20, r24
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	42 23       	and	r20, r18
 18a:	53 23       	and	r21, r19
 18c:	24 17       	cp	r18, r20
 18e:	35 07       	cpc	r19, r21
 190:	21 f4       	brne	.+8      	; 0x19a <ds1302_write+0x3e>
		{
			DS1302_PORT_RTC |= (1<<DS1302_IO);
 192:	25 b3       	in	r18, 0x15	; 21
 194:	24 60       	ori	r18, 0x04	; 4
 196:	25 bb       	out	0x15, r18	; 21
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <ds1302_write+0x44>
		}
		else
		{
			DS1302_PORT_RTC &= ~(1<<DS1302_IO);
 19a:	25 b3       	in	r18, 0x15	; 21
 19c:	2b 7f       	andi	r18, 0xFB	; 251
 19e:	25 bb       	out	0x15, r18	; 21
		}
		DS1302_PORT_RTC |= (1<<DS1302_SCLK);
 1a0:	25 b3       	in	r18, 0x15	; 21
 1a2:	22 60       	ori	r18, 0x02	; 2
 1a4:	25 bb       	out	0x15, r18	; 21
 1a6:	00 00       	nop
		_delay_us(1);
		DS1302_PORT_RTC &= ~(1<<DS1302_IO);
 1a8:	25 b3       	in	r18, 0x15	; 21
 1aa:	2b 7f       	andi	r18, 0xFB	; 251
 1ac:	25 bb       	out	0x15, r18	; 21
		DS1302_PORT_RTC &= ~(1<<DS1302_SCLK);
 1ae:	25 b3       	in	r18, 0x15	; 21
 1b0:	2d 7f       	andi	r18, 0xFD	; 253
 1b2:	25 bb       	out	0x15, r18	; 21
unsigned char i;
	DS1302_DDR_RTC |= (1<<DS1302_E) | (1<<DS1302_SCLK);
	DS1302_PORT_RTC |= (1<<DS1302_E);//E=1
	_delay_us(1);
	DS1302_DDR_RTC |= (1<<DS1302_IO);//выход
	for(i=0; i<8; i++)
 1b4:	9f 5f       	subi	r25, 0xFF	; 255
 1b6:	98 30       	cpi	r25, 0x08	; 8
 1b8:	e8 f2       	brcs	.-70     	; 0x174 <ds1302_write+0x18>
		DS1302_PORT_RTC |= (1<<DS1302_SCLK);
		_delay_us(1);
		DS1302_PORT_RTC &= ~(1<<DS1302_IO);
		DS1302_PORT_RTC &= ~(1<<DS1302_SCLK);
	} 
}
 1ba:	08 95       	ret

000001bc <ds1302_end_write_data>:
//вызываем после записи байта данных в часы
void ds1302_end_write_data()
{
	DS1302_PORT_RTC &= ~(1<<DS1302_E);
 1bc:	85 b3       	in	r24, 0x15	; 21
 1be:	8e 7f       	andi	r24, 0xFE	; 254
 1c0:	85 bb       	out	0x15, r24	; 21
 1c2:	08 95       	ret

000001c4 <ds1302_read>:
unsigned char ds1302_read()
{
unsigned char readbyte;
unsigned char i;
	readbyte=0;
	DS1302_DDR_RTC &= ~(1<<DS1302_IO);
 1c4:	84 b3       	in	r24, 0x14	; 20
 1c6:	8b 7f       	andi	r24, 0xFB	; 251
 1c8:	84 bb       	out	0x14, r24	; 20
	for(i=0;i<8;i++)
 1ca:	90 e0       	ldi	r25, 0x00	; 0

unsigned char ds1302_read()
{
unsigned char readbyte;
unsigned char i;
	readbyte=0;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
	DS1302_DDR_RTC &= ~(1<<DS1302_IO);
	for(i=0;i<8;i++)
 1ce:	1f c0       	rjmp	.+62     	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
	{
		DS1302_PORT_RTC |= 1<<DS1302_SCLK;
 1d0:	25 b3       	in	r18, 0x15	; 21
 1d2:	22 60       	ori	r18, 0x02	; 2
 1d4:	25 bb       	out	0x15, r18	; 21
		if((DS1302_PIN_RTC & (1<<DS1302_IO))==0)
 1d6:	9a 99       	sbic	0x13, 2	; 19
 1d8:	0b c0       	rjmp	.+22     	; 0x1f0 <ds1302_read+0x2c>
		{
			readbyte &= ~(1<<i);
 1da:	21 e0       	ldi	r18, 0x01	; 1
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	09 2e       	mov	r0, r25
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <ds1302_read+0x22>
 1e2:	22 0f       	add	r18, r18
 1e4:	33 1f       	adc	r19, r19
 1e6:	0a 94       	dec	r0
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <ds1302_read+0x1e>
 1ea:	20 95       	com	r18
 1ec:	82 23       	and	r24, r18
 1ee:	09 c0       	rjmp	.+18     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
		}
		else
		{
			readbyte |= 1<<i;
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	09 2e       	mov	r0, r25
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <ds1302_read+0x38>
 1f8:	22 0f       	add	r18, r18
 1fa:	33 1f       	adc	r19, r19
 1fc:	0a 94       	dec	r0
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <ds1302_read+0x34>
 200:	82 2b       	or	r24, r18
 202:	00 00       	nop
		}
		_delay_us(1);
		DS1302_PORT_RTC &= ~(1<<DS1302_SCLK);
 204:	25 b3       	in	r18, 0x15	; 21
 206:	2d 7f       	andi	r18, 0xFD	; 253
 208:	25 bb       	out	0x15, r18	; 21
 20a:	00 00       	nop
{
unsigned char readbyte;
unsigned char i;
	readbyte=0;
	DS1302_DDR_RTC &= ~(1<<DS1302_IO);
	for(i=0;i<8;i++)
 20c:	9f 5f       	subi	r25, 0xFF	; 255
 20e:	98 30       	cpi	r25, 0x08	; 8
 210:	f8 f2       	brcs	.-66     	; 0x1d0 <ds1302_read+0xc>
		}
		_delay_us(1);
		DS1302_PORT_RTC &= ~(1<<DS1302_SCLK);
		_delay_us(1);
	}
	DS1302_PORT_RTC &= ~(1<<DS1302_E);
 212:	95 b3       	in	r25, 0x15	; 21
 214:	9e 7f       	andi	r25, 0xFE	; 254
 216:	95 bb       	out	0x15, r25	; 21
 218:	00 00       	nop
	_delay_us(1);
	return readbyte;
}
 21a:	08 95       	ret

0000021c <DS1302_ReadDateTime>:

void DS1302_ReadDateTime() {
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
	//read seconds
	ds1302_write(0x81);
 220:	81 e8       	ldi	r24, 0x81	; 129
 222:	9c df       	rcall	.-200    	; 0x15c <ds1302_write>
	DateTime.Sec = DS1302_BCD_To_Bin8(ds1302_read());
 224:	cf df       	rcall	.-98     	; 0x1c4 <ds1302_read>
 226:	8e df       	rcall	.-228    	; 0x144 <DS1302_BCD_To_Bin8>
 228:	c4 e7       	ldi	r28, 0x74	; 116
 22a:	d0 e0       	ldi	r29, 0x00	; 0
 22c:	88 83       	st	Y, r24
	//read minutes
	ds1302_write(0x83);
 22e:	83 e8       	ldi	r24, 0x83	; 131
 230:	95 df       	rcall	.-214    	; 0x15c <ds1302_write>
	DateTime.Min = DS1302_BCD_To_Bin8(ds1302_read());
 232:	c8 df       	rcall	.-112    	; 0x1c4 <ds1302_read>
 234:	87 df       	rcall	.-242    	; 0x144 <DS1302_BCD_To_Bin8>
 236:	89 83       	std	Y+1, r24	; 0x01
	//read hour
	ds1302_write(0x85);
 238:	85 e8       	ldi	r24, 0x85	; 133
 23a:	90 df       	rcall	.-224    	; 0x15c <ds1302_write>
	DateTime.Hour = ds1302_read();
 23c:	c3 df       	rcall	.-122    	; 0x1c4 <ds1302_read>
	DateTime.AMPM = (DateTime.Hour & 0b00100000);
 23e:	98 2f       	mov	r25, r24
 240:	90 72       	andi	r25, 0x20	; 32
 242:	9f 83       	std	Y+7, r25	; 0x07
	DateTime.H12_24 = (DateTime.Hour & 0b10000000);
 244:	98 2f       	mov	r25, r24
 246:	90 78       	andi	r25, 0x80	; 128
 248:	98 87       	std	Y+8, r25	; 0x08
	if (DateTime.H12_24 == H12) {
 24a:	90 38       	cpi	r25, 0x80	; 128
 24c:	21 f4       	brne	.+8      	; 0x256 <DS1302_ReadDateTime+0x3a>
		DateTime.Hour = DateTime.Hour & 0b00011111;
 24e:	8f 71       	andi	r24, 0x1F	; 31
 250:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <DateTime+0x2>
 254:	03 c0       	rjmp	.+6      	; 0x25c <DS1302_ReadDateTime+0x40>
	}
	else {
		DateTime.Hour = DateTime.Hour & 0b00111111;
 256:	8f 73       	andi	r24, 0x3F	; 63
 258:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <DateTime+0x2>
	}
	DateTime.Hour = DS1302_BCD_To_Bin8(DateTime.Hour);
 25c:	c4 e7       	ldi	r28, 0x74	; 116
 25e:	d0 e0       	ldi	r29, 0x00	; 0
 260:	8a 81       	ldd	r24, Y+2	; 0x02
 262:	70 df       	rcall	.-288    	; 0x144 <DS1302_BCD_To_Bin8>
 264:	8a 83       	std	Y+2, r24	; 0x02
	//read day
	ds1302_write(0x87);
 266:	87 e8       	ldi	r24, 0x87	; 135
 268:	79 df       	rcall	.-270    	; 0x15c <ds1302_write>
	DateTime.Day = DS1302_BCD_To_Bin8(ds1302_read());
 26a:	ac df       	rcall	.-168    	; 0x1c4 <ds1302_read>
 26c:	6b df       	rcall	.-298    	; 0x144 <DS1302_BCD_To_Bin8>
 26e:	8c 83       	std	Y+4, r24	; 0x04
	//read month
	ds1302_write(0x89);
 270:	89 e8       	ldi	r24, 0x89	; 137
 272:	74 df       	rcall	.-280    	; 0x15c <ds1302_write>
	DateTime.Month = DS1302_BCD_To_Bin8(ds1302_read());
 274:	a7 df       	rcall	.-178    	; 0x1c4 <ds1302_read>
 276:	66 df       	rcall	.-308    	; 0x144 <DS1302_BCD_To_Bin8>
 278:	8b 83       	std	Y+3, r24	; 0x03
	//read weekday
	ds1302_write(0x8B);
 27a:	8b e8       	ldi	r24, 0x8B	; 139
 27c:	6f df       	rcall	.-290    	; 0x15c <ds1302_write>
	DateTime.WeekDay=ds1302_read();
 27e:	a2 df       	rcall	.-188    	; 0x1c4 <ds1302_read>
 280:	8e 83       	std	Y+6, r24	; 0x06
	//read year
	ds1302_write(0x8D);
 282:	8d e8       	ldi	r24, 0x8D	; 141
 284:	6b df       	rcall	.-298    	; 0x15c <ds1302_write>
	DateTime.Year = DS1302_BCD_To_Bin8(ds1302_read());
 286:	9e df       	rcall	.-196    	; 0x1c4 <ds1302_read>
 288:	5d df       	rcall	.-326    	; 0x144 <DS1302_BCD_To_Bin8>
 28a:	8d 83       	std	Y+5, r24	; 0x05
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <DS1302_WriteDateTime>:

void DS1302_WriteDateTime() {
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
uint8_t tmp;
	//set seconds
	ds1302_write(0x80);
 298:	80 e8       	ldi	r24, 0x80	; 128
 29a:	60 df       	rcall	.-320    	; 0x15c <ds1302_write>
	ds1302_write(DS1302_Bin8_To_BCD(DateTime.Sec));
 29c:	c4 e7       	ldi	r28, 0x74	; 116
 29e:	d0 e0       	ldi	r29, 0x00	; 0
 2a0:	88 81       	ld	r24, Y
 2a2:	3c df       	rcall	.-392    	; 0x11c <DS1302_Bin8_To_BCD>
 2a4:	5b df       	rcall	.-330    	; 0x15c <ds1302_write>
	ds1302_end_write_data();
 2a6:	8a df       	rcall	.-236    	; 0x1bc <ds1302_end_write_data>
	//set minutes
	ds1302_write(0x82);
 2a8:	82 e8       	ldi	r24, 0x82	; 130
 2aa:	58 df       	rcall	.-336    	; 0x15c <ds1302_write>
	ds1302_write(DS1302_Bin8_To_BCD(DateTime.Min));
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	36 df       	rcall	.-404    	; 0x11c <DS1302_Bin8_To_BCD>
 2b0:	55 df       	rcall	.-342    	; 0x15c <ds1302_write>
	ds1302_end_write_data();
 2b2:	84 df       	rcall	.-248    	; 0x1bc <ds1302_end_write_data>
	//set hour	
	tmp = (DS1302_Bin8_To_BCD(DateTime.Hour) | DateTime.AMPM | DateTime.H12_24);
 2b4:	8a 81       	ldd	r24, Y+2	; 0x02
 2b6:	32 df       	rcall	.-412    	; 0x11c <DS1302_Bin8_To_BCD>
 2b8:	1f 81       	ldd	r17, Y+7	; 0x07
 2ba:	98 85       	ldd	r25, Y+8	; 0x08
 2bc:	81 2b       	or	r24, r17
 2be:	18 2f       	mov	r17, r24
 2c0:	19 2b       	or	r17, r25
	ds1302_write(0x84);
 2c2:	84 e8       	ldi	r24, 0x84	; 132
 2c4:	4b df       	rcall	.-362    	; 0x15c <ds1302_write>
	ds1302_write(tmp);
 2c6:	81 2f       	mov	r24, r17
 2c8:	49 df       	rcall	.-366    	; 0x15c <ds1302_write>
	ds1302_end_write_data();
 2ca:	78 df       	rcall	.-272    	; 0x1bc <ds1302_end_write_data>
	//set dade
	ds1302_write(0x86);
 2cc:	86 e8       	ldi	r24, 0x86	; 134
 2ce:	46 df       	rcall	.-372    	; 0x15c <ds1302_write>
	ds1302_write(DS1302_Bin8_To_BCD(DateTime.Day));
 2d0:	8c 81       	ldd	r24, Y+4	; 0x04
 2d2:	24 df       	rcall	.-440    	; 0x11c <DS1302_Bin8_To_BCD>
 2d4:	43 df       	rcall	.-378    	; 0x15c <ds1302_write>
	ds1302_end_write_data();
 2d6:	72 df       	rcall	.-284    	; 0x1bc <ds1302_end_write_data>
	//set month
	ds1302_write(0x88);
 2d8:	88 e8       	ldi	r24, 0x88	; 136
 2da:	40 df       	rcall	.-384    	; 0x15c <ds1302_write>
	ds1302_write(DS1302_Bin8_To_BCD(DateTime.Month));
 2dc:	8b 81       	ldd	r24, Y+3	; 0x03
 2de:	1e df       	rcall	.-452    	; 0x11c <DS1302_Bin8_To_BCD>
 2e0:	3d df       	rcall	.-390    	; 0x15c <ds1302_write>
	ds1302_end_write_data();
 2e2:	6c df       	rcall	.-296    	; 0x1bc <ds1302_end_write_data>
	//set day (of week)
	ds1302_write(0x8A);
 2e4:	8a e8       	ldi	r24, 0x8A	; 138
 2e6:	3a df       	rcall	.-396    	; 0x15c <ds1302_write>
	ds1302_write(DateTime.WeekDay);
 2e8:	8e 81       	ldd	r24, Y+6	; 0x06
 2ea:	38 df       	rcall	.-400    	; 0x15c <ds1302_write>
	ds1302_end_write_data();
 2ec:	67 df       	rcall	.-306    	; 0x1bc <ds1302_end_write_data>
	//set year
	ds1302_write(0x8C);
 2ee:	8c e8       	ldi	r24, 0x8C	; 140
 2f0:	35 df       	rcall	.-406    	; 0x15c <ds1302_write>
	ds1302_write(DS1302_Bin8_To_BCD(DateTime.Year));
 2f2:	8d 81       	ldd	r24, Y+5	; 0x05
 2f4:	13 df       	rcall	.-474    	; 0x11c <DS1302_Bin8_To_BCD>
 2f6:	32 df       	rcall	.-412    	; 0x15c <ds1302_write>
	ds1302_end_write_data();
 2f8:	61 df       	rcall	.-318    	; 0x1bc <ds1302_end_write_data>
}
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	1f 91       	pop	r17
 300:	08 95       	ret

00000302 <EEPROM_write>:
#include "../main.h"

void EEPROM_write(uint8_t address, uint8_t data)
{
	/* ожидаем завершение процедуры записи */
	while(EECR & (1<<EEWE));
 302:	e1 99       	sbic	0x1c, 1	; 28
 304:	fe cf       	rjmp	.-4      	; 0x302 <EEPROM_write>
	/* записываем адрес в регистр адреса */
	EEAR = address;
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	9f bb       	out	0x1f, r25	; 31
 30a:	8e bb       	out	0x1e, r24	; 30
	/* записываем данные в регистр данных */
	EEDR = data;
 30c:	6d bb       	out	0x1d, r22	; 29
	/* разрешаем запись в EEPROM */
	EECR |= (1<<EEMWE);
 30e:	8c b3       	in	r24, 0x1c	; 28
 310:	84 60       	ori	r24, 0x04	; 4
 312:	8c bb       	out	0x1c, r24	; 28
	/* производим запись в EEPROM */
	EECR |= (1<<EEWE);
 314:	8c b3       	in	r24, 0x1c	; 28
 316:	82 60       	ori	r24, 0x02	; 2
 318:	8c bb       	out	0x1c, r24	; 28
 31a:	08 95       	ret

0000031c <EEPROM_read>:
}

uint8_t EEPROM_read(uint8_t address)
{
	/* ожидаем завершение процедуры записи */
	while(EECR & (1<<EEWE));
 31c:	e1 99       	sbic	0x1c, 1	; 28
 31e:	fe cf       	rjmp	.-4      	; 0x31c <EEPROM_read>
	/* указываем адрес где лежат нужные данные */
	EEAR = address;
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	9f bb       	out	0x1f, r25	; 31
 324:	8e bb       	out	0x1e, r24	; 30
	/* получаем данные из EEPROM */
	EECR |= (1<<EERE);
 326:	8c b3       	in	r24, 0x1c	; 28
 328:	81 60       	ori	r24, 0x01	; 1
 32a:	8c bb       	out	0x1c, r24	; 28
	/* */
	return EEDR;
 32c:	8d b3       	in	r24, 0x1d	; 29
 32e:	08 95       	ret

00000330 <activate_sleep_mode>:
uint8_t interval = 0;

/* реализация спящего режима */
void activate_sleep_mode()
{
	DS1302_ReadDateTime();
 330:	75 df       	rcall	.-278    	; 0x21c <DS1302_ReadDateTime>
	if ((DateTime.Sec - interval) >= MAX_INTERVAL)
 332:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <DateTime>
 336:	82 2f       	mov	r24, r18
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <__data_end>
 33e:	83 1b       	sub	r24, r19
 340:	91 09       	sbc	r25, r1
 342:	0a 97       	sbiw	r24, 0x0a	; 10
 344:	3c f0       	brlt	.+14     	; 0x354 <activate_sleep_mode+0x24>
	{	
		interval = DateTime.Sec;
 346:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__data_end>
		TM1637_turnOff();
 34a:	fe d1       	rcall	.+1020   	; 0x748 <TM1637_turnOff>
		sleep_enable();
 34c:	85 b7       	in	r24, 0x35	; 53
 34e:	80 68       	ori	r24, 0x80	; 128
 350:	85 bf       	out	0x35, r24	; 53
		sleep_cpu();
 352:	88 95       	sleep
 354:	08 95       	ret

00000356 <__vector_1>:
	}
}

/* выход из сна + метка когда кот ел */
ISR(INT0_vect)
{
 356:	1f 92       	push	r1
 358:	0f 92       	push	r0
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	0f 92       	push	r0
 35e:	11 24       	eor	r1, r1
 360:	2f 93       	push	r18
 362:	3f 93       	push	r19
 364:	4f 93       	push	r20
 366:	5f 93       	push	r21
 368:	6f 93       	push	r22
 36a:	7f 93       	push	r23
 36c:	8f 93       	push	r24
 36e:	9f 93       	push	r25
 370:	af 93       	push	r26
 372:	bf 93       	push	r27
 374:	ef 93       	push	r30
 376:	ff 93       	push	r31
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	00 d0       	rcall	.+0      	; 0x37e <__vector_1+0x28>
 37e:	00 d0       	rcall	.+0      	; 0x380 <__vector_1+0x2a>
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
	sleep_disable();
 384:	85 b7       	in	r24, 0x35	; 53
 386:	8f 77       	andi	r24, 0x7F	; 127
 388:	85 bf       	out	0x35, r24	; 53
	DS1302_ReadDateTime();
 38a:	48 df       	rcall	.-368    	; 0x21c <DS1302_ReadDateTime>
	cat_hour = DateTime.Hour;
 38c:	e4 e7       	ldi	r30, 0x74	; 116
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	62 81       	ldd	r22, Z+2	; 0x02
 392:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <cat_hour>
	cat_minutes = DateTime.Min;
 396:	81 81       	ldd	r24, Z+1	; 0x01
 398:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <cat_minutes>
	EEPROM_write(HOUR_ADDRESS, cat_hour);
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	b1 df       	rcall	.-158    	; 0x302 <EEPROM_write>
	EEPROM_write(MIN_ADDRESS, cat_minutes);
 3a0:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <cat_minutes>
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	ad df       	rcall	.-166    	; 0x302 <EEPROM_write>
	wakeup_display();
 3a8:	64 de       	rcall	.-824    	; 0x72 <wakeup_display>
	TM1637_setSegments(EAT_WORD, DISP_LEN, START_POS);
 3aa:	89 e7       	ldi	r24, 0x79	; 121
 3ac:	89 83       	std	Y+1, r24	; 0x01
 3ae:	87 e7       	ldi	r24, 0x77	; 119
 3b0:	8a 83       	std	Y+2, r24	; 0x02
 3b2:	88 e7       	ldi	r24, 0x78	; 120
 3b4:	8b 83       	std	Y+3, r24	; 0x03
 3b6:	8f e0       	ldi	r24, 0x0F	; 15
 3b8:	8c 83       	std	Y+4, r24	; 0x04
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	64 e0       	ldi	r22, 0x04	; 4
 3be:	ce 01       	movw	r24, r28
 3c0:	01 96       	adiw	r24, 0x01	; 1
 3c2:	91 d2       	rcall	.+1314   	; 0x8e6 <TM1637_setSegments>
	interval = 0;
 3c4:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
}
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	ff 91       	pop	r31
 3d6:	ef 91       	pop	r30
 3d8:	bf 91       	pop	r27
 3da:	af 91       	pop	r26
 3dc:	9f 91       	pop	r25
 3de:	8f 91       	pop	r24
 3e0:	7f 91       	pop	r23
 3e2:	6f 91       	pop	r22
 3e4:	5f 91       	pop	r21
 3e6:	4f 91       	pop	r20
 3e8:	3f 91       	pop	r19
 3ea:	2f 91       	pop	r18
 3ec:	0f 90       	pop	r0
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	0f 90       	pop	r0
 3f2:	1f 90       	pop	r1
 3f4:	18 95       	reti

000003f6 <__vector_2>:

ISR(INT1_vect)
{
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	2f 93       	push	r18
 402:	3f 93       	push	r19
 404:	4f 93       	push	r20
 406:	5f 93       	push	r21
 408:	6f 93       	push	r22
 40a:	7f 93       	push	r23
 40c:	8f 93       	push	r24
 40e:	9f 93       	push	r25
 410:	af 93       	push	r26
 412:	bf 93       	push	r27
 414:	ef 93       	push	r30
 416:	ff 93       	push	r31
	sleep_disable();
 418:	85 b7       	in	r24, 0x35	; 53
 41a:	8f 77       	andi	r24, 0x7F	; 127
 41c:	85 bf       	out	0x35, r24	; 53

	if (VIEW_BTN_CLICK)
 41e:	87 99       	sbic	0x10, 7	; 16
 420:	06 c0       	rjmp	.+12     	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
	{
		wakeup_display();
 422:	27 de       	rcall	.-946    	; 0x72 <wakeup_display>
		print_time_on_display(cat_hour, cat_minutes);
 424:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <cat_minutes>
 428:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <cat_hour>
 42c:	25 de       	rcall	.-950    	; 0x78 <print_time_on_display>
	}
	
	if(MENU_BTN_CLICK)
 42e:	84 99       	sbic	0x10, 4	; 16
 430:	0e c0       	rjmp	.+28     	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
	{
		wakeup_display();
 432:	1f de       	rcall	.-962    	; 0x72 <wakeup_display>
		event_listener();
 434:	a3 d0       	rcall	.+326    	; 0x57c <event_listener>
		setup_time(&seconds, &minutes, &hour);
 436:	4b e6       	ldi	r20, 0x6B	; 107
 438:	50 e0       	ldi	r21, 0x00	; 0
 43a:	6a e6       	ldi	r22, 0x6A	; 106
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	8f e6       	ldi	r24, 0x6F	; 111
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	ed d0       	rcall	.+474    	; 0x61e <setup_time>
		print_time_on_display(hour, minutes);
 444:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <minutes>
 448:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hour>
 44c:	15 de       	rcall	.-982    	; 0x78 <print_time_on_display>
	}
	interval = 0;
 44e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
}
 452:	ff 91       	pop	r31
 454:	ef 91       	pop	r30
 456:	bf 91       	pop	r27
 458:	af 91       	pop	r26
 45a:	9f 91       	pop	r25
 45c:	8f 91       	pop	r24
 45e:	7f 91       	pop	r23
 460:	6f 91       	pop	r22
 462:	5f 91       	pop	r21
 464:	4f 91       	pop	r20
 466:	3f 91       	pop	r19
 468:	2f 91       	pop	r18
 46a:	0f 90       	pop	r0
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	0f 90       	pop	r0
 470:	1f 90       	pop	r1
 472:	18 95       	reti

00000474 <setup_ext_interrapt>:

/* настройка внешних прерываний */
void setup_ext_interrapt()
{
	GICR |= (1 << INT0) | (1 << INT1);
 474:	8b b7       	in	r24, 0x3b	; 59
 476:	80 6c       	ori	r24, 0xC0	; 192
 478:	8b bf       	out	0x3b, r24	; 59
	DDRD = 0;
 47a:	11 ba       	out	0x11, r1	; 17
	PORTD |= (1 << INT0_PIN) | (1 << INT1_PIN) | (1 << MENU_BTN) | (1 << UP_BTN) | (1 << DOWN_BTN) | (1 << VIEW_BTN);
 47c:	82 b3       	in	r24, 0x12	; 18
 47e:	8c 6f       	ori	r24, 0xFC	; 252
 480:	82 bb       	out	0x12, r24	; 18
 482:	08 95       	ret

00000484 <main>:
}

int main(void)
{
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	00 d0       	rcall	.+0      	; 0x48a <main+0x6>
 48a:	00 d0       	rcall	.+0      	; 0x48c <main+0x8>
 48c:	cd b7       	in	r28, 0x3d	; 61
 48e:	de b7       	in	r29, 0x3e	; 62
	cli();
 490:	f8 94       	cli
	ACSR |= (1 << ACD); // ОТКЛЮЧЕНИЕ АЦП
 492:	88 b1       	in	r24, 0x08	; 8
 494:	80 68       	ori	r24, 0x80	; 128
 496:	88 b9       	out	0x08, r24	; 8
	setup_ext_interrapt();
 498:	ed df       	rcall	.-38     	; 0x474 <setup_ext_interrapt>
	sei();
 49a:	78 94       	sei
	
	DDRB |= (1 << PB0);
 49c:	87 b3       	in	r24, 0x17	; 23
 49e:	81 60       	ori	r24, 0x01	; 1
 4a0:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << PB0);
 4a2:	88 b3       	in	r24, 0x18	; 24
 4a4:	81 60       	ori	r24, 0x01	; 1
 4a6:	88 bb       	out	0x18, r24	; 24
	
	cat_hour = EEPROM_read(HOUR_ADDRESS);
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	38 df       	rcall	.-400    	; 0x31c <EEPROM_read>
 4ac:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <cat_hour>
	cat_minutes = EEPROM_read(MIN_ADDRESS);
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	34 df       	rcall	.-408    	; 0x31c <EEPROM_read>
 4b4:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <cat_minutes>
	
	TM1637_init();
 4b8:	de d0       	rcall	.+444    	; 0x676 <TM1637_init>
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	ad d1       	rcall	.+858    	; 0x818 <TM1637_turnOnAndSetBrightness>
	TM1637_setSegments(HI_WORD, DISP_LEN, START_POS);
 4be:	86 e7       	ldi	r24, 0x76	; 118
 4c0:	89 83       	std	Y+1, r24	; 0x01
 4c2:	8c e5       	ldi	r24, 0x5C	; 92
 4c4:	8a 83       	std	Y+2, r24	; 0x02
 4c6:	88 e3       	ldi	r24, 0x38	; 56
 4c8:	8b 83       	std	Y+3, r24	; 0x03
 4ca:	87 e7       	ldi	r24, 0x77	; 119
 4cc:	8c 83       	std	Y+4, r24	; 0x04
 4ce:	40 e0       	ldi	r20, 0x00	; 0
 4d0:	64 e0       	ldi	r22, 0x04	; 4
 4d2:	ce 01       	movw	r24, r28
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	07 d2       	rcall	.+1038   	; 0x8e6 <TM1637_setSegments>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d8:	2f e3       	ldi	r18, 0x3F	; 63
 4da:	8d e0       	ldi	r24, 0x0D	; 13
 4dc:	93 e0       	ldi	r25, 0x03	; 3
 4de:	21 50       	subi	r18, 0x01	; 1
 4e0:	80 40       	sbci	r24, 0x00	; 0
 4e2:	90 40       	sbci	r25, 0x00	; 0
 4e4:	e1 f7       	brne	.-8      	; 0x4de <main+0x5a>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <main+0x64>
 4e8:	00 00       	nop
	_delay_ms(WAIT1S);
	
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 4ea:	85 b7       	in	r24, 0x35	; 53
 4ec:	8f 78       	andi	r24, 0x8F	; 143
 4ee:	80 63       	ori	r24, 0x30	; 48
 4f0:	85 bf       	out	0x35, r24	; 53
	
	while(1)
	{
		activate_sleep_mode();
 4f2:	1e df       	rcall	.-452    	; 0x330 <activate_sleep_mode>
 4f4:	fe cf       	rjmp	.-4      	; 0x4f2 <main+0x6e>

000004f6 <update_menu>:
 4f6:	2f e3       	ldi	r18, 0x3F	; 63
 4f8:	8d e0       	ldi	r24, 0x0D	; 13
 4fa:	93 e0       	ldi	r25, 0x03	; 3
 4fc:	21 50       	subi	r18, 0x01	; 1
 4fe:	80 40       	sbci	r24, 0x00	; 0
 500:	90 40       	sbci	r25, 0x00	; 0
 502:	e1 f7       	brne	.-8      	; 0x4fc <update_menu+0x6>
 504:	00 c0       	rjmp	.+0      	; 0x506 <update_menu+0x10>
 506:	00 00       	nop
uint8_t wait_time = 0;

void update_menu()
{
	_delay_ms(WAIT1S);
	TM1637_clear();
 508:	95 d2       	rcall	.+1322   	; 0xa34 <TM1637_clear>
 50a:	08 95       	ret

0000050c <set_time_up>:
}

uint8_t set_time_up(uint8_t val, uint8_t max_val)
{
	uint8_t result;
	if (val < max_val)
 50c:	86 17       	cp	r24, r22
 50e:	10 f4       	brcc	.+4      	; 0x514 <set_time_up+0x8>
	{
		result = val + 1;
 510:	8f 5f       	subi	r24, 0xFF	; 255
 512:	08 95       	ret
	}
	else
	{
		result = 0;
 514:	80 e0       	ldi	r24, 0x00	; 0
	}
	return result;
}
 516:	08 95       	ret

00000518 <set_time_down>:

uint8_t set_time_down(uint8_t val, uint8_t max_val)
{
	uint8_t result;
	if (val > 0)
 518:	88 23       	and	r24, r24
 51a:	11 f0       	breq	.+4      	; 0x520 <set_time_down+0x8>
	{
		result = val - 1;
 51c:	6f ef       	ldi	r22, 0xFF	; 255
 51e:	68 0f       	add	r22, r24
	else
	{
		result = max_val;
	}	
	return result;
}
 520:	86 2f       	mov	r24, r22
 522:	08 95       	ret

00000524 <tune_hour>:

void tune_hour()
{
	if (UP_BTN_CLICK)
 524:	85 99       	sbic	0x10, 5	; 16
 526:	08 c0       	rjmp	.+16     	; 0x538 <tune_hour+0x14>
	{
		wait_time = 0;
 528:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <wait_time>
		hr = set_time_up(hr, HOUR_OVF);
 52c:	67 e1       	ldi	r22, 0x17	; 23
 52e:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 532:	ec df       	rcall	.-40     	; 0x50c <set_time_up>
 534:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <hr>
	}
			
	if (DOWN_BTN_CLICK)
 538:	86 99       	sbic	0x10, 6	; 16
 53a:	08 c0       	rjmp	.+16     	; 0x54c <tune_hour+0x28>
	{
		wait_time = 0;
 53c:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <wait_time>
		hr = set_time_down(hr, HOUR_OVF);
 540:	67 e1       	ldi	r22, 0x17	; 23
 542:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 546:	e8 df       	rcall	.-48     	; 0x518 <set_time_down>
 548:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <hr>
 54c:	08 95       	ret

0000054e <tune_min>:
	}
}

void tune_min()
{
	if (UP_BTN_CLICK)
 54e:	85 99       	sbic	0x10, 5	; 16
 550:	09 c0       	rjmp	.+18     	; 0x564 <tune_min+0x16>
	{
		wait_time = MAX_WAIT_TIME;
 552:	88 e0       	ldi	r24, 0x08	; 8
 554:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <wait_time>
		min = set_time_up(min, MIN_OVF-1);
 558:	6b e3       	ldi	r22, 0x3B	; 59
 55a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <min>
 55e:	d6 df       	rcall	.-84     	; 0x50c <set_time_up>
 560:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <min>
	}
			
	if (DOWN_BTN_CLICK)
 564:	86 99       	sbic	0x10, 6	; 16
 566:	09 c0       	rjmp	.+18     	; 0x57a <tune_min+0x2c>
	{
		wait_time = MAX_WAIT_TIME;
 568:	88 e0       	ldi	r24, 0x08	; 8
 56a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <wait_time>
		min = set_time_down(min, MIN_OVF-1);
 56e:	6b e3       	ldi	r22, 0x3B	; 59
 570:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <min>
 574:	d1 df       	rcall	.-94     	; 0x518 <set_time_down>
 576:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <min>
 57a:	08 95       	ret

0000057c <event_listener>:
	}
}

void event_listener()
{
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
 580:	cd b7       	in	r28, 0x3d	; 61
 582:	de b7       	in	r29, 0x3e	; 62
 584:	28 97       	sbiw	r28, 0x08	; 8
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	de bf       	out	0x3e, r29	; 62
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	cd bf       	out	0x3d, r28	; 61
	hr = 0;
 590:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <hr>
	min = 0;
 594:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <min>
	TM1637_setSegments(SET_WORD, DISP_LEN, START_POS);
 598:	8d e6       	ldi	r24, 0x6D	; 109
 59a:	8d 83       	std	Y+5, r24	; 0x05
 59c:	8b e7       	ldi	r24, 0x7B	; 123
 59e:	8e 83       	std	Y+6, r24	; 0x06
 5a0:	88 e7       	ldi	r24, 0x78	; 120
 5a2:	8f 83       	std	Y+7, r24	; 0x07
 5a4:	88 87       	std	Y+8, r24	; 0x08
 5a6:	40 e0       	ldi	r20, 0x00	; 0
 5a8:	64 e0       	ldi	r22, 0x04	; 4
 5aa:	ce 01       	movw	r24, r28
 5ac:	05 96       	adiw	r24, 0x05	; 5
 5ae:	9b d1       	rcall	.+822    	; 0x8e6 <TM1637_setSegments>
	update_menu();
 5b0:	a2 df       	rcall	.-188    	; 0x4f6 <update_menu>
	while(MENU_BTN_CLICK)
 5b2:	1a c0       	rjmp	.+52     	; 0x5e8 <event_listener+0x6c>
	{
		if (wait_time < MAX_WAIT_TIME)
 5b4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <wait_time>
 5b8:	88 30       	cpi	r24, 0x08	; 8
 5ba:	10 f4       	brcc	.+4      	; 0x5c0 <event_listener+0x44>
		{
			tune_hour();
 5bc:	b3 df       	rcall	.-154    	; 0x524 <tune_hour>
 5be:	01 c0       	rjmp	.+2      	; 0x5c2 <event_listener+0x46>
		}
		else
		{
			tune_min();
 5c0:	c6 df       	rcall	.-116    	; 0x54e <tune_min>
		}
		wait_time++;
 5c2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <wait_time>
 5c6:	8f 5f       	subi	r24, 0xFF	; 255
 5c8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <wait_time>
 5cc:	2f e9       	ldi	r18, 0x9F	; 159
 5ce:	86 e8       	ldi	r24, 0x86	; 134
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	21 50       	subi	r18, 0x01	; 1
 5d4:	80 40       	sbci	r24, 0x00	; 0
 5d6:	90 40       	sbci	r25, 0x00	; 0
 5d8:	e1 f7       	brne	.-8      	; 0x5d2 <event_listener+0x56>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <event_listener+0x60>
 5dc:	00 00       	nop
		_delay_ms(WAIT500MS);
		print_time_on_display(hr,min);
 5de:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <min>
 5e2:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 5e6:	48 dd       	rcall	.-1392   	; 0x78 <print_time_on_display>
{
	hr = 0;
	min = 0;
	TM1637_setSegments(SET_WORD, DISP_LEN, START_POS);
	update_menu();
	while(MENU_BTN_CLICK)
 5e8:	84 9b       	sbis	0x10, 4	; 16
 5ea:	e4 cf       	rjmp	.-56     	; 0x5b4 <event_listener+0x38>
		}
		wait_time++;
		_delay_ms(WAIT500MS);
		print_time_on_display(hr,min);
	}
	wait_time = 0;
 5ec:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <wait_time>
	TM1637_setSegments(DONE_WORD, DISP_LEN, START_POS);
 5f0:	8e e5       	ldi	r24, 0x5E	; 94
 5f2:	89 83       	std	Y+1, r24	; 0x01
 5f4:	8c e5       	ldi	r24, 0x5C	; 92
 5f6:	8a 83       	std	Y+2, r24	; 0x02
 5f8:	84 e5       	ldi	r24, 0x54	; 84
 5fa:	8b 83       	std	Y+3, r24	; 0x03
 5fc:	89 e7       	ldi	r24, 0x79	; 121
 5fe:	8c 83       	std	Y+4, r24	; 0x04
 600:	40 e0       	ldi	r20, 0x00	; 0
 602:	64 e0       	ldi	r22, 0x04	; 4
 604:	ce 01       	movw	r24, r28
 606:	01 96       	adiw	r24, 0x01	; 1
 608:	6e d1       	rcall	.+732    	; 0x8e6 <TM1637_setSegments>
	update_menu();
 60a:	75 df       	rcall	.-278    	; 0x4f6 <update_menu>
}
 60c:	28 96       	adiw	r28, 0x08	; 8
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	f8 94       	cli
 612:	de bf       	out	0x3e, r29	; 62
 614:	0f be       	out	0x3f, r0	; 63
 616:	cd bf       	out	0x3d, r28	; 61
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	08 95       	ret

0000061e <setup_time>:

void setup_time(uint8_t* seconds, uint8_t* minutes, uint8_t* hour)
{
 61e:	ef 92       	push	r14
 620:	ff 92       	push	r15
 622:	0f 93       	push	r16
 624:	1f 93       	push	r17
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	7c 01       	movw	r14, r24
 62c:	8b 01       	movw	r16, r22
 62e:	ea 01       	movw	r28, r20
	DateTime.Sec = 0;
 630:	e4 e7       	ldi	r30, 0x74	; 116
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	10 82       	st	Z, r1
	DateTime.Min = min;
 636:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <min>
 63a:	81 83       	std	Z+1, r24	; 0x01
	DateTime.Hour = hr;
 63c:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 640:	82 83       	std	Z+2, r24	; 0x02
	DateTime.Month = 8;
 642:	88 e0       	ldi	r24, 0x08	; 8
 644:	83 83       	std	Z+3, r24	; 0x03
	DateTime.Day = 16;
 646:	80 e1       	ldi	r24, 0x10	; 16
 648:	84 83       	std	Z+4, r24	; 0x04
	DateTime.Year = 11;
 64a:	8b e0       	ldi	r24, 0x0B	; 11
 64c:	85 83       	std	Z+5, r24	; 0x05
	DateTime.WeekDay = 2;
 64e:	82 e0       	ldi	r24, 0x02	; 2
 650:	86 83       	std	Z+6, r24	; 0x06
	DateTime.H12_24 = H24;  
 652:	10 86       	std	Z+8, r1	; 0x08
	DS1302_WriteDateTime();
 654:	1e de       	rcall	.-964    	; 0x292 <DS1302_WriteDateTime>
	
	*seconds = 0;
 656:	f7 01       	movw	r30, r14
 658:	10 82       	st	Z, r1
	*minutes = min;
 65a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <min>
 65e:	f8 01       	movw	r30, r16
 660:	80 83       	st	Z, r24
	*hour = hr;
 662:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 666:	88 83       	st	Y, r24
}
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	1f 91       	pop	r17
 66e:	0f 91       	pop	r16
 670:	ff 90       	pop	r15
 672:	ef 90       	pop	r14
 674:	08 95       	ret

00000676 <TM1637_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 676:	84 b3       	in	r24, 0x14	; 20
 678:	8f 7e       	andi	r24, 0xEF	; 239
 67a:	84 bb       	out	0x14, r24	; 20
 67c:	84 b3       	in	r24, 0x14	; 20
 67e:	8f 7d       	andi	r24, 0xDF	; 223
 680:	84 bb       	out	0x14, r24	; 20
 682:	85 b3       	in	r24, 0x15	; 21
 684:	8f 7c       	andi	r24, 0xCF	; 207
 686:	85 bb       	out	0x15, r24	; 21
 688:	84 b3       	in	r24, 0x14	; 20
 68a:	80 61       	ori	r24, 0x10	; 16
 68c:	84 bb       	out	0x14, r24	; 20
 68e:	82 e4       	ldi	r24, 0x42	; 66
 690:	8a 95       	dec	r24
 692:	f1 f7       	brne	.-4      	; 0x690 <TM1637_init+0x1a>
 694:	00 c0       	rjmp	.+0      	; 0x696 <TM1637_init+0x20>
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	20 e4       	ldi	r18, 0x40	; 64
 69a:	1d c0       	rjmp	.+58     	; 0x6d6 <TM1637_init+0x60>
 69c:	84 b3       	in	r24, 0x14	; 20
 69e:	80 62       	ori	r24, 0x20	; 32
 6a0:	84 bb       	out	0x14, r24	; 20
 6a2:	81 e2       	ldi	r24, 0x21	; 33
 6a4:	8a 95       	dec	r24
 6a6:	f1 f7       	brne	.-4      	; 0x6a4 <TM1637_init+0x2e>
 6a8:	00 00       	nop
 6aa:	20 ff       	sbrs	r18, 0
 6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <TM1637_init+0x40>
 6ae:	84 b3       	in	r24, 0x14	; 20
 6b0:	8f 7e       	andi	r24, 0xEF	; 239
 6b2:	84 bb       	out	0x14, r24	; 20
 6b4:	03 c0       	rjmp	.+6      	; 0x6bc <TM1637_init+0x46>
 6b6:	84 b3       	in	r24, 0x14	; 20
 6b8:	80 61       	ori	r24, 0x10	; 16
 6ba:	84 bb       	out	0x14, r24	; 20
 6bc:	81 e2       	ldi	r24, 0x21	; 33
 6be:	8a 95       	dec	r24
 6c0:	f1 f7       	brne	.-4      	; 0x6be <TM1637_init+0x48>
 6c2:	00 00       	nop
 6c4:	84 b3       	in	r24, 0x14	; 20
 6c6:	8f 7d       	andi	r24, 0xDF	; 223
 6c8:	84 bb       	out	0x14, r24	; 20
 6ca:	82 e4       	ldi	r24, 0x42	; 66
 6cc:	8a 95       	dec	r24
 6ce:	f1 f7       	brne	.-4      	; 0x6cc <TM1637_init+0x56>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <TM1637_init+0x5c>
 6d2:	26 95       	lsr	r18
 6d4:	9f 5f       	subi	r25, 0xFF	; 255
 6d6:	98 30       	cpi	r25, 0x08	; 8
 6d8:	08 f3       	brcs	.-62     	; 0x69c <TM1637_init+0x26>
 6da:	84 b3       	in	r24, 0x14	; 20
 6dc:	80 62       	ori	r24, 0x20	; 32
 6de:	84 bb       	out	0x14, r24	; 20
 6e0:	84 b3       	in	r24, 0x14	; 20
 6e2:	8f 7e       	andi	r24, 0xEF	; 239
 6e4:	84 bb       	out	0x14, r24	; 20
 6e6:	82 e4       	ldi	r24, 0x42	; 66
 6e8:	8a 95       	dec	r24
 6ea:	f1 f7       	brne	.-4      	; 0x6e8 <TM1637_init+0x72>
 6ec:	00 c0       	rjmp	.+0      	; 0x6ee <TM1637_init+0x78>
 6ee:	84 b3       	in	r24, 0x14	; 20
 6f0:	8f 7d       	andi	r24, 0xDF	; 223
 6f2:	84 bb       	out	0x14, r24	; 20
 6f4:	81 e2       	ldi	r24, 0x21	; 33
 6f6:	8a 95       	dec	r24
 6f8:	f1 f7       	brne	.-4      	; 0x6f6 <TM1637_init+0x80>
 6fa:	00 00       	nop
 6fc:	9c 99       	sbic	0x13, 4	; 19
 6fe:	03 c0       	rjmp	.+6      	; 0x706 <TM1637_init+0x90>
 700:	84 b3       	in	r24, 0x14	; 20
 702:	80 61       	ori	r24, 0x10	; 16
 704:	84 bb       	out	0x14, r24	; 20
 706:	81 e2       	ldi	r24, 0x21	; 33
 708:	8a 95       	dec	r24
 70a:	f1 f7       	brne	.-4      	; 0x708 <TM1637_init+0x92>
 70c:	00 00       	nop
 70e:	84 b3       	in	r24, 0x14	; 20
 710:	80 62       	ori	r24, 0x20	; 32
 712:	84 bb       	out	0x14, r24	; 20
 714:	81 e2       	ldi	r24, 0x21	; 33
 716:	8a 95       	dec	r24
 718:	f1 f7       	brne	.-4      	; 0x716 <TM1637_init+0xa0>
 71a:	00 00       	nop
 71c:	84 b3       	in	r24, 0x14	; 20
 71e:	80 61       	ori	r24, 0x10	; 16
 720:	84 bb       	out	0x14, r24	; 20
 722:	81 e2       	ldi	r24, 0x21	; 33
 724:	8a 95       	dec	r24
 726:	f1 f7       	brne	.-4      	; 0x724 <TM1637_init+0xae>
 728:	00 00       	nop
 72a:	84 b3       	in	r24, 0x14	; 20
 72c:	8f 7d       	andi	r24, 0xDF	; 223
 72e:	84 bb       	out	0x14, r24	; 20
 730:	82 e4       	ldi	r24, 0x42	; 66
 732:	8a 95       	dec	r24
 734:	f1 f7       	brne	.-4      	; 0x732 <TM1637_init+0xbc>
 736:	00 c0       	rjmp	.+0      	; 0x738 <TM1637_init+0xc2>
 738:	84 b3       	in	r24, 0x14	; 20
 73a:	8f 7e       	andi	r24, 0xEF	; 239
 73c:	84 bb       	out	0x14, r24	; 20
 73e:	82 e4       	ldi	r24, 0x42	; 66
 740:	8a 95       	dec	r24
 742:	f1 f7       	brne	.-4      	; 0x740 <TM1637_init+0xca>
 744:	00 c0       	rjmp	.+0      	; 0x746 <TM1637_init+0xd0>
 746:	08 95       	ret

00000748 <TM1637_turnOff>:
 748:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <TM1637_brightness_reg>
 74c:	87 70       	andi	r24, 0x07	; 7
 74e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <TM1637_brightness_reg>
 752:	84 b3       	in	r24, 0x14	; 20
 754:	80 61       	ori	r24, 0x10	; 16
 756:	84 bb       	out	0x14, r24	; 20
 758:	82 e4       	ldi	r24, 0x42	; 66
 75a:	8a 95       	dec	r24
 75c:	f1 f7       	brne	.-4      	; 0x75a <TM1637_turnOff+0x12>
 75e:	00 c0       	rjmp	.+0      	; 0x760 <TM1637_turnOff+0x18>
 760:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <TM1637_brightness_reg>
 764:	9f 70       	andi	r25, 0x0F	; 15
 766:	90 68       	ori	r25, 0x80	; 128
 768:	20 e0       	ldi	r18, 0x00	; 0
 76a:	1d c0       	rjmp	.+58     	; 0x7a6 <TM1637_turnOff+0x5e>
 76c:	84 b3       	in	r24, 0x14	; 20
 76e:	80 62       	ori	r24, 0x20	; 32
 770:	84 bb       	out	0x14, r24	; 20
 772:	81 e2       	ldi	r24, 0x21	; 33
 774:	8a 95       	dec	r24
 776:	f1 f7       	brne	.-4      	; 0x774 <TM1637_turnOff+0x2c>
 778:	00 00       	nop
 77a:	90 ff       	sbrs	r25, 0
 77c:	04 c0       	rjmp	.+8      	; 0x786 <TM1637_turnOff+0x3e>
 77e:	84 b3       	in	r24, 0x14	; 20
 780:	8f 7e       	andi	r24, 0xEF	; 239
 782:	84 bb       	out	0x14, r24	; 20
 784:	03 c0       	rjmp	.+6      	; 0x78c <TM1637_turnOff+0x44>
 786:	84 b3       	in	r24, 0x14	; 20
 788:	80 61       	ori	r24, 0x10	; 16
 78a:	84 bb       	out	0x14, r24	; 20
 78c:	81 e2       	ldi	r24, 0x21	; 33
 78e:	8a 95       	dec	r24
 790:	f1 f7       	brne	.-4      	; 0x78e <TM1637_turnOff+0x46>
 792:	00 00       	nop
 794:	84 b3       	in	r24, 0x14	; 20
 796:	8f 7d       	andi	r24, 0xDF	; 223
 798:	84 bb       	out	0x14, r24	; 20
 79a:	82 e4       	ldi	r24, 0x42	; 66
 79c:	8a 95       	dec	r24
 79e:	f1 f7       	brne	.-4      	; 0x79c <TM1637_turnOff+0x54>
 7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <TM1637_turnOff+0x5a>
 7a2:	96 95       	lsr	r25
 7a4:	2f 5f       	subi	r18, 0xFF	; 255
 7a6:	28 30       	cpi	r18, 0x08	; 8
 7a8:	08 f3       	brcs	.-62     	; 0x76c <TM1637_turnOff+0x24>
 7aa:	84 b3       	in	r24, 0x14	; 20
 7ac:	80 62       	ori	r24, 0x20	; 32
 7ae:	84 bb       	out	0x14, r24	; 20
 7b0:	84 b3       	in	r24, 0x14	; 20
 7b2:	8f 7e       	andi	r24, 0xEF	; 239
 7b4:	84 bb       	out	0x14, r24	; 20
 7b6:	82 e4       	ldi	r24, 0x42	; 66
 7b8:	8a 95       	dec	r24
 7ba:	f1 f7       	brne	.-4      	; 0x7b8 <TM1637_turnOff+0x70>
 7bc:	00 c0       	rjmp	.+0      	; 0x7be <TM1637_turnOff+0x76>
 7be:	84 b3       	in	r24, 0x14	; 20
 7c0:	8f 7d       	andi	r24, 0xDF	; 223
 7c2:	84 bb       	out	0x14, r24	; 20
 7c4:	81 e2       	ldi	r24, 0x21	; 33
 7c6:	8a 95       	dec	r24
 7c8:	f1 f7       	brne	.-4      	; 0x7c6 <TM1637_turnOff+0x7e>
 7ca:	00 00       	nop
 7cc:	9c 99       	sbic	0x13, 4	; 19
 7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <TM1637_turnOff+0x8e>
 7d0:	84 b3       	in	r24, 0x14	; 20
 7d2:	80 61       	ori	r24, 0x10	; 16
 7d4:	84 bb       	out	0x14, r24	; 20
 7d6:	81 e2       	ldi	r24, 0x21	; 33
 7d8:	8a 95       	dec	r24
 7da:	f1 f7       	brne	.-4      	; 0x7d8 <TM1637_turnOff+0x90>
 7dc:	00 00       	nop
 7de:	84 b3       	in	r24, 0x14	; 20
 7e0:	80 62       	ori	r24, 0x20	; 32
 7e2:	84 bb       	out	0x14, r24	; 20
 7e4:	81 e2       	ldi	r24, 0x21	; 33
 7e6:	8a 95       	dec	r24
 7e8:	f1 f7       	brne	.-4      	; 0x7e6 <TM1637_turnOff+0x9e>
 7ea:	00 00       	nop
 7ec:	84 b3       	in	r24, 0x14	; 20
 7ee:	80 61       	ori	r24, 0x10	; 16
 7f0:	84 bb       	out	0x14, r24	; 20
 7f2:	81 e2       	ldi	r24, 0x21	; 33
 7f4:	8a 95       	dec	r24
 7f6:	f1 f7       	brne	.-4      	; 0x7f4 <TM1637_turnOff+0xac>
 7f8:	00 00       	nop
 7fa:	84 b3       	in	r24, 0x14	; 20
 7fc:	8f 7d       	andi	r24, 0xDF	; 223
 7fe:	84 bb       	out	0x14, r24	; 20
 800:	82 e4       	ldi	r24, 0x42	; 66
 802:	8a 95       	dec	r24
 804:	f1 f7       	brne	.-4      	; 0x802 <TM1637_turnOff+0xba>
 806:	00 c0       	rjmp	.+0      	; 0x808 <TM1637_turnOff+0xc0>
 808:	84 b3       	in	r24, 0x14	; 20
 80a:	8f 7e       	andi	r24, 0xEF	; 239
 80c:	84 bb       	out	0x14, r24	; 20
 80e:	82 e4       	ldi	r24, 0x42	; 66
 810:	8a 95       	dec	r24
 812:	f1 f7       	brne	.-4      	; 0x810 <TM1637_turnOff+0xc8>
 814:	00 c0       	rjmp	.+0      	; 0x816 <TM1637_turnOff+0xce>
 816:	08 95       	ret

00000818 <TM1637_turnOnAndSetBrightness>:
 818:	87 70       	andi	r24, 0x07	; 7
 81a:	88 60       	ori	r24, 0x08	; 8
 81c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <TM1637_brightness_reg>
 820:	84 b3       	in	r24, 0x14	; 20
 822:	80 61       	ori	r24, 0x10	; 16
 824:	84 bb       	out	0x14, r24	; 20
 826:	82 e4       	ldi	r24, 0x42	; 66
 828:	8a 95       	dec	r24
 82a:	f1 f7       	brne	.-4      	; 0x828 <TM1637_turnOnAndSetBrightness+0x10>
 82c:	00 c0       	rjmp	.+0      	; 0x82e <TM1637_turnOnAndSetBrightness+0x16>
 82e:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <TM1637_brightness_reg>
 832:	9f 70       	andi	r25, 0x0F	; 15
 834:	90 68       	ori	r25, 0x80	; 128
 836:	20 e0       	ldi	r18, 0x00	; 0
 838:	1d c0       	rjmp	.+58     	; 0x874 <TM1637_turnOnAndSetBrightness+0x5c>
 83a:	84 b3       	in	r24, 0x14	; 20
 83c:	80 62       	ori	r24, 0x20	; 32
 83e:	84 bb       	out	0x14, r24	; 20
 840:	81 e2       	ldi	r24, 0x21	; 33
 842:	8a 95       	dec	r24
 844:	f1 f7       	brne	.-4      	; 0x842 <TM1637_turnOnAndSetBrightness+0x2a>
 846:	00 00       	nop
 848:	90 ff       	sbrs	r25, 0
 84a:	04 c0       	rjmp	.+8      	; 0x854 <TM1637_turnOnAndSetBrightness+0x3c>
 84c:	84 b3       	in	r24, 0x14	; 20
 84e:	8f 7e       	andi	r24, 0xEF	; 239
 850:	84 bb       	out	0x14, r24	; 20
 852:	03 c0       	rjmp	.+6      	; 0x85a <TM1637_turnOnAndSetBrightness+0x42>
 854:	84 b3       	in	r24, 0x14	; 20
 856:	80 61       	ori	r24, 0x10	; 16
 858:	84 bb       	out	0x14, r24	; 20
 85a:	81 e2       	ldi	r24, 0x21	; 33
 85c:	8a 95       	dec	r24
 85e:	f1 f7       	brne	.-4      	; 0x85c <TM1637_turnOnAndSetBrightness+0x44>
 860:	00 00       	nop
 862:	84 b3       	in	r24, 0x14	; 20
 864:	8f 7d       	andi	r24, 0xDF	; 223
 866:	84 bb       	out	0x14, r24	; 20
 868:	82 e4       	ldi	r24, 0x42	; 66
 86a:	8a 95       	dec	r24
 86c:	f1 f7       	brne	.-4      	; 0x86a <TM1637_turnOnAndSetBrightness+0x52>
 86e:	00 c0       	rjmp	.+0      	; 0x870 <TM1637_turnOnAndSetBrightness+0x58>
 870:	96 95       	lsr	r25
 872:	2f 5f       	subi	r18, 0xFF	; 255
 874:	28 30       	cpi	r18, 0x08	; 8
 876:	08 f3       	brcs	.-62     	; 0x83a <TM1637_turnOnAndSetBrightness+0x22>
 878:	84 b3       	in	r24, 0x14	; 20
 87a:	80 62       	ori	r24, 0x20	; 32
 87c:	84 bb       	out	0x14, r24	; 20
 87e:	84 b3       	in	r24, 0x14	; 20
 880:	8f 7e       	andi	r24, 0xEF	; 239
 882:	84 bb       	out	0x14, r24	; 20
 884:	82 e4       	ldi	r24, 0x42	; 66
 886:	8a 95       	dec	r24
 888:	f1 f7       	brne	.-4      	; 0x886 <TM1637_turnOnAndSetBrightness+0x6e>
 88a:	00 c0       	rjmp	.+0      	; 0x88c <TM1637_turnOnAndSetBrightness+0x74>
 88c:	84 b3       	in	r24, 0x14	; 20
 88e:	8f 7d       	andi	r24, 0xDF	; 223
 890:	84 bb       	out	0x14, r24	; 20
 892:	81 e2       	ldi	r24, 0x21	; 33
 894:	8a 95       	dec	r24
 896:	f1 f7       	brne	.-4      	; 0x894 <TM1637_turnOnAndSetBrightness+0x7c>
 898:	00 00       	nop
 89a:	9c 99       	sbic	0x13, 4	; 19
 89c:	03 c0       	rjmp	.+6      	; 0x8a4 <TM1637_turnOnAndSetBrightness+0x8c>
 89e:	84 b3       	in	r24, 0x14	; 20
 8a0:	80 61       	ori	r24, 0x10	; 16
 8a2:	84 bb       	out	0x14, r24	; 20
 8a4:	81 e2       	ldi	r24, 0x21	; 33
 8a6:	8a 95       	dec	r24
 8a8:	f1 f7       	brne	.-4      	; 0x8a6 <TM1637_turnOnAndSetBrightness+0x8e>
 8aa:	00 00       	nop
 8ac:	84 b3       	in	r24, 0x14	; 20
 8ae:	80 62       	ori	r24, 0x20	; 32
 8b0:	84 bb       	out	0x14, r24	; 20
 8b2:	81 e2       	ldi	r24, 0x21	; 33
 8b4:	8a 95       	dec	r24
 8b6:	f1 f7       	brne	.-4      	; 0x8b4 <TM1637_turnOnAndSetBrightness+0x9c>
 8b8:	00 00       	nop
 8ba:	84 b3       	in	r24, 0x14	; 20
 8bc:	80 61       	ori	r24, 0x10	; 16
 8be:	84 bb       	out	0x14, r24	; 20
 8c0:	81 e2       	ldi	r24, 0x21	; 33
 8c2:	8a 95       	dec	r24
 8c4:	f1 f7       	brne	.-4      	; 0x8c2 <TM1637_turnOnAndSetBrightness+0xaa>
 8c6:	00 00       	nop
 8c8:	84 b3       	in	r24, 0x14	; 20
 8ca:	8f 7d       	andi	r24, 0xDF	; 223
 8cc:	84 bb       	out	0x14, r24	; 20
 8ce:	82 e4       	ldi	r24, 0x42	; 66
 8d0:	8a 95       	dec	r24
 8d2:	f1 f7       	brne	.-4      	; 0x8d0 <TM1637_turnOnAndSetBrightness+0xb8>
 8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <TM1637_turnOnAndSetBrightness+0xbe>
 8d6:	84 b3       	in	r24, 0x14	; 20
 8d8:	8f 7e       	andi	r24, 0xEF	; 239
 8da:	84 bb       	out	0x14, r24	; 20
 8dc:	82 e4       	ldi	r24, 0x42	; 66
 8de:	8a 95       	dec	r24
 8e0:	f1 f7       	brne	.-4      	; 0x8de <TM1637_turnOnAndSetBrightness+0xc6>
 8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <TM1637_turnOnAndSetBrightness+0xcc>
 8e4:	08 95       	ret

000008e6 <TM1637_setSegments>:
 8e6:	fc 01       	movw	r30, r24
 8e8:	84 b3       	in	r24, 0x14	; 20
 8ea:	80 61       	ori	r24, 0x10	; 16
 8ec:	84 bb       	out	0x14, r24	; 20
 8ee:	82 e4       	ldi	r24, 0x42	; 66
 8f0:	8a 95       	dec	r24
 8f2:	f1 f7       	brne	.-4      	; 0x8f0 <TM1637_setSegments+0xa>
 8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <TM1637_setSegments+0x10>
 8f6:	43 70       	andi	r20, 0x03	; 3
 8f8:	40 6c       	ori	r20, 0xC0	; 192
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	1d c0       	rjmp	.+58     	; 0x938 <TM1637_setSegments+0x52>
 8fe:	84 b3       	in	r24, 0x14	; 20
 900:	80 62       	ori	r24, 0x20	; 32
 902:	84 bb       	out	0x14, r24	; 20
 904:	81 e2       	ldi	r24, 0x21	; 33
 906:	8a 95       	dec	r24
 908:	f1 f7       	brne	.-4      	; 0x906 <TM1637_setSegments+0x20>
 90a:	00 00       	nop
 90c:	40 ff       	sbrs	r20, 0
 90e:	04 c0       	rjmp	.+8      	; 0x918 <TM1637_setSegments+0x32>
 910:	84 b3       	in	r24, 0x14	; 20
 912:	8f 7e       	andi	r24, 0xEF	; 239
 914:	84 bb       	out	0x14, r24	; 20
 916:	03 c0       	rjmp	.+6      	; 0x91e <TM1637_setSegments+0x38>
 918:	84 b3       	in	r24, 0x14	; 20
 91a:	80 61       	ori	r24, 0x10	; 16
 91c:	84 bb       	out	0x14, r24	; 20
 91e:	81 e2       	ldi	r24, 0x21	; 33
 920:	8a 95       	dec	r24
 922:	f1 f7       	brne	.-4      	; 0x920 <TM1637_setSegments+0x3a>
 924:	00 00       	nop
 926:	84 b3       	in	r24, 0x14	; 20
 928:	8f 7d       	andi	r24, 0xDF	; 223
 92a:	84 bb       	out	0x14, r24	; 20
 92c:	82 e4       	ldi	r24, 0x42	; 66
 92e:	8a 95       	dec	r24
 930:	f1 f7       	brne	.-4      	; 0x92e <TM1637_setSegments+0x48>
 932:	00 c0       	rjmp	.+0      	; 0x934 <TM1637_setSegments+0x4e>
 934:	46 95       	lsr	r20
 936:	9f 5f       	subi	r25, 0xFF	; 255
 938:	98 30       	cpi	r25, 0x08	; 8
 93a:	08 f3       	brcs	.-62     	; 0x8fe <TM1637_setSegments+0x18>
 93c:	84 b3       	in	r24, 0x14	; 20
 93e:	80 62       	ori	r24, 0x20	; 32
 940:	84 bb       	out	0x14, r24	; 20
 942:	84 b3       	in	r24, 0x14	; 20
 944:	8f 7e       	andi	r24, 0xEF	; 239
 946:	84 bb       	out	0x14, r24	; 20
 948:	82 e4       	ldi	r24, 0x42	; 66
 94a:	8a 95       	dec	r24
 94c:	f1 f7       	brne	.-4      	; 0x94a <TM1637_setSegments+0x64>
 94e:	00 c0       	rjmp	.+0      	; 0x950 <TM1637_setSegments+0x6a>
 950:	84 b3       	in	r24, 0x14	; 20
 952:	8f 7d       	andi	r24, 0xDF	; 223
 954:	84 bb       	out	0x14, r24	; 20
 956:	81 e2       	ldi	r24, 0x21	; 33
 958:	8a 95       	dec	r24
 95a:	f1 f7       	brne	.-4      	; 0x958 <TM1637_setSegments+0x72>
 95c:	00 00       	nop
 95e:	9c 99       	sbic	0x13, 4	; 19
 960:	03 c0       	rjmp	.+6      	; 0x968 <TM1637_setSegments+0x82>
 962:	84 b3       	in	r24, 0x14	; 20
 964:	80 61       	ori	r24, 0x10	; 16
 966:	84 bb       	out	0x14, r24	; 20
 968:	81 e2       	ldi	r24, 0x21	; 33
 96a:	8a 95       	dec	r24
 96c:	f1 f7       	brne	.-4      	; 0x96a <TM1637_setSegments+0x84>
 96e:	00 00       	nop
 970:	40 e0       	ldi	r20, 0x00	; 0
 972:	40 c0       	rjmp	.+128    	; 0x9f4 <TM1637_setSegments+0x10e>
 974:	df 01       	movw	r26, r30
 976:	a4 0f       	add	r26, r20
 978:	b1 1d       	adc	r27, r1
 97a:	3c 91       	ld	r19, X
 97c:	20 e0       	ldi	r18, 0x00	; 0
 97e:	1d c0       	rjmp	.+58     	; 0x9ba <TM1637_setSegments+0xd4>
 980:	94 b3       	in	r25, 0x14	; 20
 982:	90 62       	ori	r25, 0x20	; 32
 984:	94 bb       	out	0x14, r25	; 20
 986:	81 e2       	ldi	r24, 0x21	; 33
 988:	8a 95       	dec	r24
 98a:	f1 f7       	brne	.-4      	; 0x988 <TM1637_setSegments+0xa2>
 98c:	00 00       	nop
 98e:	30 ff       	sbrs	r19, 0
 990:	04 c0       	rjmp	.+8      	; 0x99a <TM1637_setSegments+0xb4>
 992:	94 b3       	in	r25, 0x14	; 20
 994:	9f 7e       	andi	r25, 0xEF	; 239
 996:	94 bb       	out	0x14, r25	; 20
 998:	03 c0       	rjmp	.+6      	; 0x9a0 <TM1637_setSegments+0xba>
 99a:	94 b3       	in	r25, 0x14	; 20
 99c:	90 61       	ori	r25, 0x10	; 16
 99e:	94 bb       	out	0x14, r25	; 20
 9a0:	81 e2       	ldi	r24, 0x21	; 33
 9a2:	8a 95       	dec	r24
 9a4:	f1 f7       	brne	.-4      	; 0x9a2 <TM1637_setSegments+0xbc>
 9a6:	00 00       	nop
 9a8:	94 b3       	in	r25, 0x14	; 20
 9aa:	9f 7d       	andi	r25, 0xDF	; 223
 9ac:	94 bb       	out	0x14, r25	; 20
 9ae:	82 e4       	ldi	r24, 0x42	; 66
 9b0:	8a 95       	dec	r24
 9b2:	f1 f7       	brne	.-4      	; 0x9b0 <TM1637_setSegments+0xca>
 9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <TM1637_setSegments+0xd0>
 9b6:	36 95       	lsr	r19
 9b8:	2f 5f       	subi	r18, 0xFF	; 255
 9ba:	28 30       	cpi	r18, 0x08	; 8
 9bc:	08 f3       	brcs	.-62     	; 0x980 <TM1637_setSegments+0x9a>
 9be:	84 b3       	in	r24, 0x14	; 20
 9c0:	80 62       	ori	r24, 0x20	; 32
 9c2:	84 bb       	out	0x14, r24	; 20
 9c4:	84 b3       	in	r24, 0x14	; 20
 9c6:	8f 7e       	andi	r24, 0xEF	; 239
 9c8:	84 bb       	out	0x14, r24	; 20
 9ca:	82 e4       	ldi	r24, 0x42	; 66
 9cc:	8a 95       	dec	r24
 9ce:	f1 f7       	brne	.-4      	; 0x9cc <TM1637_setSegments+0xe6>
 9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <TM1637_setSegments+0xec>
 9d2:	94 b3       	in	r25, 0x14	; 20
 9d4:	9f 7d       	andi	r25, 0xDF	; 223
 9d6:	94 bb       	out	0x14, r25	; 20
 9d8:	81 e2       	ldi	r24, 0x21	; 33
 9da:	8a 95       	dec	r24
 9dc:	f1 f7       	brne	.-4      	; 0x9da <TM1637_setSegments+0xf4>
 9de:	00 00       	nop
 9e0:	9c 99       	sbic	0x13, 4	; 19
 9e2:	03 c0       	rjmp	.+6      	; 0x9ea <TM1637_setSegments+0x104>
 9e4:	84 b3       	in	r24, 0x14	; 20
 9e6:	80 61       	ori	r24, 0x10	; 16
 9e8:	84 bb       	out	0x14, r24	; 20
 9ea:	81 e2       	ldi	r24, 0x21	; 33
 9ec:	8a 95       	dec	r24
 9ee:	f1 f7       	brne	.-4      	; 0x9ec <TM1637_setSegments+0x106>
 9f0:	00 00       	nop
 9f2:	4f 5f       	subi	r20, 0xFF	; 255
 9f4:	46 17       	cp	r20, r22
 9f6:	08 f4       	brcc	.+2      	; 0x9fa <TM1637_setSegments+0x114>
 9f8:	bd cf       	rjmp	.-134    	; 0x974 <TM1637_setSegments+0x8e>
 9fa:	84 b3       	in	r24, 0x14	; 20
 9fc:	80 62       	ori	r24, 0x20	; 32
 9fe:	84 bb       	out	0x14, r24	; 20
 a00:	81 e2       	ldi	r24, 0x21	; 33
 a02:	8a 95       	dec	r24
 a04:	f1 f7       	brne	.-4      	; 0xa02 <TM1637_setSegments+0x11c>
 a06:	00 00       	nop
 a08:	84 b3       	in	r24, 0x14	; 20
 a0a:	80 61       	ori	r24, 0x10	; 16
 a0c:	84 bb       	out	0x14, r24	; 20
 a0e:	81 e2       	ldi	r24, 0x21	; 33
 a10:	8a 95       	dec	r24
 a12:	f1 f7       	brne	.-4      	; 0xa10 <TM1637_setSegments+0x12a>
 a14:	00 00       	nop
 a16:	84 b3       	in	r24, 0x14	; 20
 a18:	8f 7d       	andi	r24, 0xDF	; 223
 a1a:	84 bb       	out	0x14, r24	; 20
 a1c:	82 e4       	ldi	r24, 0x42	; 66
 a1e:	8a 95       	dec	r24
 a20:	f1 f7       	brne	.-4      	; 0xa1e <TM1637_setSegments+0x138>
 a22:	00 c0       	rjmp	.+0      	; 0xa24 <TM1637_setSegments+0x13e>
 a24:	84 b3       	in	r24, 0x14	; 20
 a26:	8f 7e       	andi	r24, 0xEF	; 239
 a28:	84 bb       	out	0x14, r24	; 20
 a2a:	82 e4       	ldi	r24, 0x42	; 66
 a2c:	8a 95       	dec	r24
 a2e:	f1 f7       	brne	.-4      	; 0xa2c <TM1637_setSegments+0x146>
 a30:	00 c0       	rjmp	.+0      	; 0xa32 <TM1637_setSegments+0x14c>
 a32:	08 95       	ret

00000a34 <TM1637_clear>:
 a34:	84 b3       	in	r24, 0x14	; 20
 a36:	80 61       	ori	r24, 0x10	; 16
 a38:	84 bb       	out	0x14, r24	; 20
 a3a:	82 e4       	ldi	r24, 0x42	; 66
 a3c:	8a 95       	dec	r24
 a3e:	f1 f7       	brne	.-4      	; 0xa3c <TM1637_clear+0x8>
 a40:	00 c0       	rjmp	.+0      	; 0xa42 <TM1637_clear+0xe>
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	20 ec       	ldi	r18, 0xC0	; 192
 a46:	1d c0       	rjmp	.+58     	; 0xa82 <TM1637_clear+0x4e>
 a48:	84 b3       	in	r24, 0x14	; 20
 a4a:	80 62       	ori	r24, 0x20	; 32
 a4c:	84 bb       	out	0x14, r24	; 20
 a4e:	81 e2       	ldi	r24, 0x21	; 33
 a50:	8a 95       	dec	r24
 a52:	f1 f7       	brne	.-4      	; 0xa50 <TM1637_clear+0x1c>
 a54:	00 00       	nop
 a56:	20 ff       	sbrs	r18, 0
 a58:	04 c0       	rjmp	.+8      	; 0xa62 <TM1637_clear+0x2e>
 a5a:	84 b3       	in	r24, 0x14	; 20
 a5c:	8f 7e       	andi	r24, 0xEF	; 239
 a5e:	84 bb       	out	0x14, r24	; 20
 a60:	03 c0       	rjmp	.+6      	; 0xa68 <TM1637_clear+0x34>
 a62:	84 b3       	in	r24, 0x14	; 20
 a64:	80 61       	ori	r24, 0x10	; 16
 a66:	84 bb       	out	0x14, r24	; 20
 a68:	81 e2       	ldi	r24, 0x21	; 33
 a6a:	8a 95       	dec	r24
 a6c:	f1 f7       	brne	.-4      	; 0xa6a <TM1637_clear+0x36>
 a6e:	00 00       	nop
 a70:	84 b3       	in	r24, 0x14	; 20
 a72:	8f 7d       	andi	r24, 0xDF	; 223
 a74:	84 bb       	out	0x14, r24	; 20
 a76:	82 e4       	ldi	r24, 0x42	; 66
 a78:	8a 95       	dec	r24
 a7a:	f1 f7       	brne	.-4      	; 0xa78 <TM1637_clear+0x44>
 a7c:	00 c0       	rjmp	.+0      	; 0xa7e <TM1637_clear+0x4a>
 a7e:	26 95       	lsr	r18
 a80:	9f 5f       	subi	r25, 0xFF	; 255
 a82:	98 30       	cpi	r25, 0x08	; 8
 a84:	08 f3       	brcs	.-62     	; 0xa48 <TM1637_clear+0x14>
 a86:	84 b3       	in	r24, 0x14	; 20
 a88:	80 62       	ori	r24, 0x20	; 32
 a8a:	84 bb       	out	0x14, r24	; 20
 a8c:	84 b3       	in	r24, 0x14	; 20
 a8e:	8f 7e       	andi	r24, 0xEF	; 239
 a90:	84 bb       	out	0x14, r24	; 20
 a92:	82 e4       	ldi	r24, 0x42	; 66
 a94:	8a 95       	dec	r24
 a96:	f1 f7       	brne	.-4      	; 0xa94 <TM1637_clear+0x60>
 a98:	00 c0       	rjmp	.+0      	; 0xa9a <TM1637_clear+0x66>
 a9a:	84 b3       	in	r24, 0x14	; 20
 a9c:	8f 7d       	andi	r24, 0xDF	; 223
 a9e:	84 bb       	out	0x14, r24	; 20
 aa0:	81 e2       	ldi	r24, 0x21	; 33
 aa2:	8a 95       	dec	r24
 aa4:	f1 f7       	brne	.-4      	; 0xaa2 <TM1637_clear+0x6e>
 aa6:	00 00       	nop
 aa8:	9c 99       	sbic	0x13, 4	; 19
 aaa:	03 c0       	rjmp	.+6      	; 0xab2 <TM1637_clear+0x7e>
 aac:	84 b3       	in	r24, 0x14	; 20
 aae:	80 61       	ori	r24, 0x10	; 16
 ab0:	84 bb       	out	0x14, r24	; 20
 ab2:	81 e2       	ldi	r24, 0x21	; 33
 ab4:	8a 95       	dec	r24
 ab6:	f1 f7       	brne	.-4      	; 0xab4 <TM1637_clear+0x80>
 ab8:	00 00       	nop
 aba:	20 e0       	ldi	r18, 0x00	; 0
 abc:	35 c0       	rjmp	.+106    	; 0xb28 <TM1637_clear+0xf4>
 abe:	84 b3       	in	r24, 0x14	; 20
 ac0:	80 62       	ori	r24, 0x20	; 32
 ac2:	84 bb       	out	0x14, r24	; 20
 ac4:	81 e2       	ldi	r24, 0x21	; 33
 ac6:	8a 95       	dec	r24
 ac8:	f1 f7       	brne	.-4      	; 0xac6 <TM1637_clear+0x92>
 aca:	00 00       	nop
 acc:	84 b3       	in	r24, 0x14	; 20
 ace:	80 61       	ori	r24, 0x10	; 16
 ad0:	84 bb       	out	0x14, r24	; 20
 ad2:	81 e2       	ldi	r24, 0x21	; 33
 ad4:	8a 95       	dec	r24
 ad6:	f1 f7       	brne	.-4      	; 0xad4 <TM1637_clear+0xa0>
 ad8:	00 00       	nop
 ada:	84 b3       	in	r24, 0x14	; 20
 adc:	8f 7d       	andi	r24, 0xDF	; 223
 ade:	84 bb       	out	0x14, r24	; 20
 ae0:	82 e4       	ldi	r24, 0x42	; 66
 ae2:	8a 95       	dec	r24
 ae4:	f1 f7       	brne	.-4      	; 0xae2 <TM1637_clear+0xae>
 ae6:	00 c0       	rjmp	.+0      	; 0xae8 <TM1637_clear+0xb4>
 ae8:	9f 5f       	subi	r25, 0xFF	; 255
 aea:	01 c0       	rjmp	.+2      	; 0xaee <TM1637_clear+0xba>
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	98 30       	cpi	r25, 0x08	; 8
 af0:	30 f3       	brcs	.-52     	; 0xabe <TM1637_clear+0x8a>
 af2:	84 b3       	in	r24, 0x14	; 20
 af4:	80 62       	ori	r24, 0x20	; 32
 af6:	84 bb       	out	0x14, r24	; 20
 af8:	84 b3       	in	r24, 0x14	; 20
 afa:	8f 7e       	andi	r24, 0xEF	; 239
 afc:	84 bb       	out	0x14, r24	; 20
 afe:	82 e4       	ldi	r24, 0x42	; 66
 b00:	8a 95       	dec	r24
 b02:	f1 f7       	brne	.-4      	; 0xb00 <TM1637_clear+0xcc>
 b04:	00 c0       	rjmp	.+0      	; 0xb06 <TM1637_clear+0xd2>
 b06:	84 b3       	in	r24, 0x14	; 20
 b08:	8f 7d       	andi	r24, 0xDF	; 223
 b0a:	84 bb       	out	0x14, r24	; 20
 b0c:	81 e2       	ldi	r24, 0x21	; 33
 b0e:	8a 95       	dec	r24
 b10:	f1 f7       	brne	.-4      	; 0xb0e <TM1637_clear+0xda>
 b12:	00 00       	nop
 b14:	9c 99       	sbic	0x13, 4	; 19
 b16:	03 c0       	rjmp	.+6      	; 0xb1e <TM1637_clear+0xea>
 b18:	84 b3       	in	r24, 0x14	; 20
 b1a:	80 61       	ori	r24, 0x10	; 16
 b1c:	84 bb       	out	0x14, r24	; 20
 b1e:	81 e2       	ldi	r24, 0x21	; 33
 b20:	8a 95       	dec	r24
 b22:	f1 f7       	brne	.-4      	; 0xb20 <TM1637_clear+0xec>
 b24:	00 00       	nop
 b26:	2f 5f       	subi	r18, 0xFF	; 255
 b28:	24 30       	cpi	r18, 0x04	; 4
 b2a:	00 f3       	brcs	.-64     	; 0xaec <TM1637_clear+0xb8>
 b2c:	84 b3       	in	r24, 0x14	; 20
 b2e:	80 62       	ori	r24, 0x20	; 32
 b30:	84 bb       	out	0x14, r24	; 20
 b32:	81 e2       	ldi	r24, 0x21	; 33
 b34:	8a 95       	dec	r24
 b36:	f1 f7       	brne	.-4      	; 0xb34 <TM1637_clear+0x100>
 b38:	00 00       	nop
 b3a:	84 b3       	in	r24, 0x14	; 20
 b3c:	80 61       	ori	r24, 0x10	; 16
 b3e:	84 bb       	out	0x14, r24	; 20
 b40:	81 e2       	ldi	r24, 0x21	; 33
 b42:	8a 95       	dec	r24
 b44:	f1 f7       	brne	.-4      	; 0xb42 <TM1637_clear+0x10e>
 b46:	00 00       	nop
 b48:	84 b3       	in	r24, 0x14	; 20
 b4a:	8f 7d       	andi	r24, 0xDF	; 223
 b4c:	84 bb       	out	0x14, r24	; 20
 b4e:	82 e4       	ldi	r24, 0x42	; 66
 b50:	8a 95       	dec	r24
 b52:	f1 f7       	brne	.-4      	; 0xb50 <TM1637_clear+0x11c>
 b54:	00 c0       	rjmp	.+0      	; 0xb56 <TM1637_clear+0x122>
 b56:	84 b3       	in	r24, 0x14	; 20
 b58:	8f 7e       	andi	r24, 0xEF	; 239
 b5a:	84 bb       	out	0x14, r24	; 20
 b5c:	82 e4       	ldi	r24, 0x42	; 66
 b5e:	8a 95       	dec	r24
 b60:	f1 f7       	brne	.-4      	; 0xb5e <TM1637_clear+0x12a>
 b62:	00 c0       	rjmp	.+0      	; 0xb64 <TM1637_clear+0x130>
 b64:	08 95       	ret

00000b66 <_exit>:
 b66:	f8 94       	cli

00000b68 <__stop_program>:
 b68:	ff cf       	rjmp	.-2      	; 0xb68 <__stop_program>
