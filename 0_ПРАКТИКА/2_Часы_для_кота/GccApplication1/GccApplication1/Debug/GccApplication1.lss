
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000950  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000950  000009e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080006c  0080006c  000009f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031bf  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd5  00000000  00000000  00003dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001680  00000000  00000000  00004a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  00006100  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000723  00000000  00000000  000064e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020f0  00000000  00000000  00006c03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00008cf3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	e5 c0       	rjmp	.+458    	; 0x1ce <__vector_1>
   4:	33 c1       	rjmp	.+614    	; 0x26c <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	a0 c0       	rjmp	.+320    	; 0x14a <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 e5       	ldi	r30, 0x50	; 80
  3a:	f9 e0       	ldi	r31, 0x09	; 9
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ad 37       	cpi	r26, 0x7D	; 125
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	63 d1       	rcall	.+710    	; 0x320 <main>
  5a:	78 c4       	rjmp	.+2288   	; 0x94c <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <select_display_digit>:
	0b11101111
};

uint8_t select_display_digit(uint8_t digit)
{
	if (digit >= 0 && digit < 10)
  5e:	8a 30       	cpi	r24, 0x0A	; 10
  60:	30 f4       	brcc	.+12     	; 0x6e <select_display_digit+0x10>
	{
		return display_digit[digit];
  62:	e8 2f       	mov	r30, r24
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	e0 5a       	subi	r30, 0xA0	; 160
  68:	ff 4f       	sbci	r31, 0xFF	; 255
  6a:	80 81       	ld	r24, Z
  6c:	08 95       	ret
	}
	else
	{
		return TM1637_SPAT_BLANK;
  6e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
  70:	08 95       	ret

00000072 <wakeup_display>:

void wakeup_display()
{
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	c4 d2       	rcall	.+1416   	; 0x5fe <TM1637_turnOnAndSetBrightness>
  76:	08 95       	ret

00000078 <print_time_on_display>:
}

void print_time_on_display(uint8_t hour, uint8_t min)
{
  78:	ff 92       	push	r15
  7a:	0f 93       	push	r16
  7c:	1f 93       	push	r17
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	28 97       	sbiw	r28, 0x08	; 8
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	f8 94       	cli
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	0f be       	out	0x3f, r0	; 63
  90:	cd bf       	out	0x3d, r28	; 61
	uint8_t d_time[DISP_LEN];
	d_time[0] = hour / DIVIDER;
  92:	9d ec       	ldi	r25, 0xCD	; 205
  94:	89 9f       	mul	r24, r25
  96:	21 2d       	mov	r18, r1
  98:	11 24       	eor	r1, r1
  9a:	26 95       	lsr	r18
  9c:	26 95       	lsr	r18
  9e:	26 95       	lsr	r18
  a0:	29 83       	std	Y+1, r18	; 0x01
	d_time[1] = hour % DIVIDER;
  a2:	22 0f       	add	r18, r18
  a4:	32 2f       	mov	r19, r18
  a6:	33 0f       	add	r19, r19
  a8:	33 0f       	add	r19, r19
  aa:	23 0f       	add	r18, r19
  ac:	82 1b       	sub	r24, r18
  ae:	8a 83       	std	Y+2, r24	; 0x02
	d_time[2] = min / DIVIDER;
  b0:	69 9f       	mul	r22, r25
  b2:	81 2d       	mov	r24, r1
  b4:	11 24       	eor	r1, r1
  b6:	86 95       	lsr	r24
  b8:	86 95       	lsr	r24
  ba:	86 95       	lsr	r24
  bc:	8b 83       	std	Y+3, r24	; 0x03
	d_time[3] = min % DIVIDER;
  be:	88 0f       	add	r24, r24
  c0:	98 2f       	mov	r25, r24
  c2:	99 0f       	add	r25, r25
  c4:	99 0f       	add	r25, r25
  c6:	89 0f       	add	r24, r25
  c8:	68 1b       	sub	r22, r24
  ca:	6c 83       	std	Y+4, r22	; 0x04
	
	uint8_t out_time[TM1637_DIGITS_COUNT];
	for(uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
  cc:	f1 2c       	mov	r15, r1
  ce:	12 c0       	rjmp	.+36     	; 0xf4 <print_time_on_display+0x7c>
	{
		out_time[i] = select_display_digit(d_time[i]);
  d0:	0f 2d       	mov	r16, r15
  d2:	10 e0       	ldi	r17, 0x00	; 0
  d4:	e1 e0       	ldi	r30, 0x01	; 1
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	ec 0f       	add	r30, r28
  da:	fd 1f       	adc	r31, r29
  dc:	e0 0f       	add	r30, r16
  de:	f1 1f       	adc	r31, r17
  e0:	80 81       	ld	r24, Z
  e2:	bd df       	rcall	.-134    	; 0x5e <select_display_digit>
  e4:	e5 e0       	ldi	r30, 0x05	; 5
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	ec 0f       	add	r30, r28
  ea:	fd 1f       	adc	r31, r29
  ec:	e0 0f       	add	r30, r16
  ee:	f1 1f       	adc	r31, r17
  f0:	80 83       	st	Z, r24
	d_time[1] = hour % DIVIDER;
	d_time[2] = min / DIVIDER;
	d_time[3] = min % DIVIDER;
	
	uint8_t out_time[TM1637_DIGITS_COUNT];
	for(uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
  f2:	f3 94       	inc	r15
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	8f 15       	cp	r24, r15
  f8:	58 f7       	brcc	.-42     	; 0xd0 <print_time_on_display+0x58>
	{
		out_time[i] = select_display_digit(d_time[i]);
	}
	TM1637_setSegments(out_time, TM1637_DIGITS_COUNT, START_POS);
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	64 e0       	ldi	r22, 0x04	; 4
  fe:	ce 01       	movw	r24, r28
 100:	05 96       	adiw	r24, 0x05	; 5
 102:	e4 d2       	rcall	.+1480   	; 0x6cc <TM1637_setSegments>
 104:	28 96       	adiw	r28, 0x08	; 8
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	ff 90       	pop	r15
 11a:	08 95       	ret

0000011c <EEPROM_write>:
#include "../main.h"

void EEPROM_write(uint8_t address, uint8_t data)
{
	/* ожидаем завершение процедуры записи */
	while(EECR & (1<<EEWE));
 11c:	e1 99       	sbic	0x1c, 1	; 28
 11e:	fe cf       	rjmp	.-4      	; 0x11c <EEPROM_write>
	/* записываем адрес в регистр адреса */
	EEAR = address;
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	9f bb       	out	0x1f, r25	; 31
 124:	8e bb       	out	0x1e, r24	; 30
	/* записываем данные в регистр данных */
	EEDR = data;
 126:	6d bb       	out	0x1d, r22	; 29
	/* разрешаем запись в EEPROM */
	EECR |= (1<<EEMWE);
 128:	8c b3       	in	r24, 0x1c	; 28
 12a:	84 60       	ori	r24, 0x04	; 4
 12c:	8c bb       	out	0x1c, r24	; 28
	/* производим запись в EEPROM */
	EECR |= (1<<EEWE);
 12e:	8c b3       	in	r24, 0x1c	; 28
 130:	82 60       	ori	r24, 0x02	; 2
 132:	8c bb       	out	0x1c, r24	; 28
 134:	08 95       	ret

00000136 <EEPROM_read>:
}

uint8_t EEPROM_read(uint8_t address)
{
	/* ожидаем завершение процедуры записи */
	while(EECR & (1<<EEWE));
 136:	e1 99       	sbic	0x1c, 1	; 28
 138:	fe cf       	rjmp	.-4      	; 0x136 <EEPROM_read>
	/* указываем адрес где лежат нужные данные */
	EEAR = address;
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	9f bb       	out	0x1f, r25	; 31
 13e:	8e bb       	out	0x1e, r24	; 30
	/* получаем данные из EEPROM */
	EECR |= (1<<EERE);
 140:	8c b3       	in	r24, 0x1c	; 28
 142:	81 60       	ori	r24, 0x01	; 1
 144:	8c bb       	out	0x1c, r24	; 28
	/* */
	return EEDR;
 146:	8d b3       	in	r24, 0x1d	; 29
 148:	08 95       	ret

0000014a <__vector_4>:
	}
}

/* отсчет времени */
ISR(TIMER2_OVF_vect)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
	TCNT2 = 0;
 16c:	14 bc       	out	0x24, r1	; 36
	seconds += STEP;
 16e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <seconds>
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <seconds>
	interval += STEP;
 178:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	PORTB ^= (1 << PB0);
 182:	98 b3       	in	r25, 0x18	; 24
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	89 27       	eor	r24, r25
 188:	88 bb       	out	0x18, r24	; 24
	control_seconds(&seconds, &minutes);
 18a:	6a e6       	ldi	r22, 0x6A	; 106
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	8f e6       	ldi	r24, 0x6F	; 111
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	a4 d1       	rcall	.+840    	; 0x4dc <control_seconds>
	control_min(&minutes, &hour);
 194:	6b e6       	ldi	r22, 0x6B	; 107
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	8a e6       	ldi	r24, 0x6A	; 106
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	aa d1       	rcall	.+852    	; 0x4f2 <control_min>
	control_hour(&seconds, &minutes, &hour);
 19e:	4b e6       	ldi	r20, 0x6B	; 107
 1a0:	50 e0       	ldi	r21, 0x00	; 0
 1a2:	6a e6       	ldi	r22, 0x6A	; 106
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	8f e6       	ldi	r24, 0x6F	; 111
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	ae d1       	rcall	.+860    	; 0x508 <control_hour>
}
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	bf 91       	pop	r27
 1b2:	af 91       	pop	r26
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	7f 91       	pop	r23
 1ba:	6f 91       	pop	r22
 1bc:	5f 91       	pop	r21
 1be:	4f 91       	pop	r20
 1c0:	3f 91       	pop	r19
 1c2:	2f 91       	pop	r18
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <__vector_1>:

/* выход из сна + метка когда кот ел */
ISR(INT0_vect)
{
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	00 d0       	rcall	.+0      	; 0x1f6 <__vector_1+0x28>
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <__vector_1+0x2a>
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
	sleep_disable();
 1fc:	85 b7       	in	r24, 0x35	; 53
 1fe:	8f 77       	andi	r24, 0x7F	; 127
 200:	85 bf       	out	0x35, r24	; 53
	cat_hour = hour;
 202:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <hour>
 206:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <cat_hour>
	cat_minutes = minutes;
 20a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <minutes>
 20e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <cat_minutes>
	EEPROM_write(HOUR_ADDRESS, cat_hour);
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	83 df       	rcall	.-250    	; 0x11c <EEPROM_write>
	EEPROM_write(MIN_ADDRESS, cat_minutes);
 216:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <cat_minutes>
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	7f df       	rcall	.-258    	; 0x11c <EEPROM_write>
	wakeup_display();
 21e:	29 df       	rcall	.-430    	; 0x72 <wakeup_display>
	TM1637_setSegments(EAT_WORD, DISP_LEN, START_POS);
 220:	89 e7       	ldi	r24, 0x79	; 121
 222:	89 83       	std	Y+1, r24	; 0x01
 224:	87 e7       	ldi	r24, 0x77	; 119
 226:	8a 83       	std	Y+2, r24	; 0x02
 228:	88 e7       	ldi	r24, 0x78	; 120
 22a:	8b 83       	std	Y+3, r24	; 0x03
 22c:	8f e0       	ldi	r24, 0x0F	; 15
 22e:	8c 83       	std	Y+4, r24	; 0x04
 230:	40 e0       	ldi	r20, 0x00	; 0
 232:	64 e0       	ldi	r22, 0x04	; 4
 234:	ce 01       	movw	r24, r28
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	49 d2       	rcall	.+1170   	; 0x6cc <TM1637_setSegments>
	interval = 0;
 23a:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
}
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <__vector_2>:

ISR(INT1_vect)
{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	2f 93       	push	r18
 278:	3f 93       	push	r19
 27a:	4f 93       	push	r20
 27c:	5f 93       	push	r21
 27e:	6f 93       	push	r22
 280:	7f 93       	push	r23
 282:	8f 93       	push	r24
 284:	9f 93       	push	r25
 286:	af 93       	push	r26
 288:	bf 93       	push	r27
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
	sleep_disable();
 28e:	85 b7       	in	r24, 0x35	; 53
 290:	8f 77       	andi	r24, 0x7F	; 127
 292:	85 bf       	out	0x35, r24	; 53

	if (VIEW_BTN_CLICK)
 294:	87 99       	sbic	0x10, 7	; 16
 296:	06 c0       	rjmp	.+12     	; 0x2a4 <__vector_2+0x38>
	{
		wakeup_display();
 298:	ec de       	rcall	.-552    	; 0x72 <wakeup_display>
		print_time_on_display(cat_hour, cat_minutes);
 29a:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <cat_minutes>
 29e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <cat_hour>
 2a2:	ea de       	rcall	.-556    	; 0x78 <print_time_on_display>
	}
	
	if(MENU_BTN_CLICK)
 2a4:	84 99       	sbic	0x10, 4	; 16
 2a6:	0e c0       	rjmp	.+28     	; 0x2c4 <__vector_2+0x58>
	{
		wakeup_display();
 2a8:	e4 de       	rcall	.-568    	; 0x72 <wakeup_display>
		event_listener();
 2aa:	bc d0       	rcall	.+376    	; 0x424 <event_listener>
		setup_time(&seconds, &minutes, &hour);
 2ac:	4b e6       	ldi	r20, 0x6B	; 107
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	6a e6       	ldi	r22, 0x6A	; 106
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	8f e6       	ldi	r24, 0x6F	; 111
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	06 d1       	rcall	.+524    	; 0x4c6 <setup_time>
		print_time_on_display(hour, minutes);
 2ba:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <minutes>
 2be:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hour>
 2c2:	da de       	rcall	.-588    	; 0x78 <print_time_on_display>
	}
	interval = 0;
 2c4:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
}
 2c8:	ff 91       	pop	r31
 2ca:	ef 91       	pop	r30
 2cc:	bf 91       	pop	r27
 2ce:	af 91       	pop	r26
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	7f 91       	pop	r23
 2d6:	6f 91       	pop	r22
 2d8:	5f 91       	pop	r21
 2da:	4f 91       	pop	r20
 2dc:	3f 91       	pop	r19
 2de:	2f 91       	pop	r18
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <start_timer2_async>:

/* настройка Timer/Counter2 */
void start_timer2_async()
{
	ASSR |= (1 << AS2); // вклю асинхронный режим
 2ea:	82 b5       	in	r24, 0x22	; 34
 2ec:	88 60       	ori	r24, 0x08	; 8
 2ee:	82 bd       	out	0x22, r24	; 34
	/* чищу регистры таймера от мусора */
	TCCR2 = 0;
 2f0:	15 bc       	out	0x25, r1	; 37
	OCR2 = 0;
 2f2:	13 bc       	out	0x23, r1	; 35
	TCNT2 = 0;
 2f4:	14 bc       	out	0x24, r1	; 36
	/* делитель частоты = 128 */
	TCCR2 |= (1 << CS22) | (1 << CS20);
 2f6:	85 b5       	in	r24, 0x25	; 37
 2f8:	85 60       	ori	r24, 0x05	; 5
 2fa:	85 bd       	out	0x25, r24	; 37
	/* жду сброс флагов для старта в асинхронном режиме */
	while (ASSR != ASSR_REG_REDY);
 2fc:	82 b5       	in	r24, 0x22	; 34
 2fe:	88 30       	cpi	r24, 0x08	; 8
 300:	e9 f7       	brne	.-6      	; 0x2fc <start_timer2_async+0x12>
	/* чистим флаги прерываний */
	TIFR |= (1 << OCF2) | (1 << TOV2);
 302:	88 b7       	in	r24, 0x38	; 56
 304:	80 6c       	ori	r24, 0xC0	; 192
 306:	88 bf       	out	0x38, r24	; 56
	/* включаю прерывание по переполнению таймера */
	TIMSK |= (1 << TOIE2);
 308:	89 b7       	in	r24, 0x39	; 57
 30a:	80 64       	ori	r24, 0x40	; 64
 30c:	89 bf       	out	0x39, r24	; 57
 30e:	08 95       	ret

00000310 <setup_ext_interrapt>:
}

/* настройка внешних прерываний */
void setup_ext_interrapt()
{
	GICR |= (1 << INT0) | (1 << INT1);
 310:	8b b7       	in	r24, 0x3b	; 59
 312:	80 6c       	ori	r24, 0xC0	; 192
 314:	8b bf       	out	0x3b, r24	; 59
	DDRD = 0;
 316:	11 ba       	out	0x11, r1	; 17
	PORTD |= (1 << INT0_PIN) | (1 << INT1_PIN) | (1 << MENU_BTN) | (1 << UP_BTN) | (1 << DOWN_BTN) | (1 << VIEW_BTN);
 318:	82 b3       	in	r24, 0x12	; 18
 31a:	8c 6f       	ori	r24, 0xFC	; 252
 31c:	82 bb       	out	0x12, r24	; 18
 31e:	08 95       	ret

00000320 <main>:
}

int main(void)
{
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	00 d0       	rcall	.+0      	; 0x326 <main+0x6>
 326:	00 d0       	rcall	.+0      	; 0x328 <main+0x8>
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
	cli();
 32c:	f8 94       	cli
	ACSR |= (1 << ACD); // ОТКЛЮЧЕНИЕ АЦП
 32e:	88 b1       	in	r24, 0x08	; 8
 330:	80 68       	ori	r24, 0x80	; 128
 332:	88 b9       	out	0x08, r24	; 8
	start_timer2_async();
 334:	da df       	rcall	.-76     	; 0x2ea <start_timer2_async>
	setup_ext_interrapt();
 336:	ec df       	rcall	.-40     	; 0x310 <setup_ext_interrapt>
	sei();
 338:	78 94       	sei
	
	DDRB |= (1 << PB0);
 33a:	87 b3       	in	r24, 0x17	; 23
 33c:	81 60       	ori	r24, 0x01	; 1
 33e:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << PB0);
 340:	88 b3       	in	r24, 0x18	; 24
 342:	81 60       	ori	r24, 0x01	; 1
 344:	88 bb       	out	0x18, r24	; 24
	
	cat_hour = EEPROM_read(HOUR_ADDRESS);
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	f6 de       	rcall	.-532    	; 0x136 <EEPROM_read>
 34a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <cat_hour>
	cat_minutes = EEPROM_read(MIN_ADDRESS);
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	f2 de       	rcall	.-540    	; 0x136 <EEPROM_read>
 352:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <cat_minutes>
	
	TM1637_init();
 356:	ea d0       	rcall	.+468    	; 0x52c <TM1637_init>
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	51 d1       	rcall	.+674    	; 0x5fe <TM1637_turnOnAndSetBrightness>
	TM1637_setSegments(HI_WORD, DISP_LEN, START_POS);
 35c:	86 e7       	ldi	r24, 0x76	; 118
 35e:	89 83       	std	Y+1, r24	; 0x01
 360:	8c e5       	ldi	r24, 0x5C	; 92
 362:	8a 83       	std	Y+2, r24	; 0x02
 364:	88 e3       	ldi	r24, 0x38	; 56
 366:	8b 83       	std	Y+3, r24	; 0x03
 368:	87 e7       	ldi	r24, 0x77	; 119
 36a:	8c 83       	std	Y+4, r24	; 0x04
 36c:	40 e0       	ldi	r20, 0x00	; 0
 36e:	64 e0       	ldi	r22, 0x04	; 4
 370:	ce 01       	movw	r24, r28
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	ab d1       	rcall	.+854    	; 0x6cc <TM1637_setSegments>
	print_time_on_display(14, 8);
 376:	68 e0       	ldi	r22, 0x08	; 8
 378:	8e e0       	ldi	r24, 0x0E	; 14
 37a:	7e de       	rcall	.-772    	; 0x78 <print_time_on_display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	2f e3       	ldi	r18, 0x3F	; 63
 37e:	8d e0       	ldi	r24, 0x0D	; 13
 380:	93 e0       	ldi	r25, 0x03	; 3
 382:	21 50       	subi	r18, 0x01	; 1
 384:	80 40       	sbci	r24, 0x00	; 0
 386:	90 40       	sbci	r25, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <main+0x62>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <main+0x6c>
 38c:	00 00       	nop
	_delay_ms(WAIT1S);
	
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 38e:	85 b7       	in	r24, 0x35	; 53
 390:	8f 78       	andi	r24, 0x8F	; 143
 392:	80 63       	ori	r24, 0x30	; 48
 394:	85 bf       	out	0x35, r24	; 53
	
	
	
	while(1)
	{
		print_time_on_display(14, 88);
 396:	68 e5       	ldi	r22, 0x58	; 88
 398:	8e e0       	ldi	r24, 0x0E	; 14
 39a:	6e de       	rcall	.-804    	; 0x78 <print_time_on_display>
 39c:	fc cf       	rjmp	.-8      	; 0x396 <main+0x76>

0000039e <update_menu>:
 39e:	2f e3       	ldi	r18, 0x3F	; 63
 3a0:	8d e0       	ldi	r24, 0x0D	; 13
 3a2:	93 e0       	ldi	r25, 0x03	; 3
 3a4:	21 50       	subi	r18, 0x01	; 1
 3a6:	80 40       	sbci	r24, 0x00	; 0
 3a8:	90 40       	sbci	r25, 0x00	; 0
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <update_menu+0x6>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <update_menu+0x10>
 3ae:	00 00       	nop
uint8_t wait_time = 0;

void update_menu()
{
	_delay_ms(WAIT1S);
	TM1637_clear();
 3b0:	34 d2       	rcall	.+1128   	; 0x81a <TM1637_clear>
 3b2:	08 95       	ret

000003b4 <set_time_up>:
}

uint8_t set_time_up(uint8_t val, uint8_t max_val)
{
	uint8_t result;
	if (val < max_val)
 3b4:	86 17       	cp	r24, r22
 3b6:	10 f4       	brcc	.+4      	; 0x3bc <set_time_up+0x8>
	{
		result = val + 1;
 3b8:	8f 5f       	subi	r24, 0xFF	; 255
 3ba:	08 95       	ret
	}
	else
	{
		result = 0;
 3bc:	80 e0       	ldi	r24, 0x00	; 0
	}
	return result;
}
 3be:	08 95       	ret

000003c0 <set_time_down>:

uint8_t set_time_down(uint8_t val, uint8_t max_val)
{
	uint8_t result;
	if (val > 0)
 3c0:	88 23       	and	r24, r24
 3c2:	11 f0       	breq	.+4      	; 0x3c8 <set_time_down+0x8>
	{
		result = val - 1;
 3c4:	6f ef       	ldi	r22, 0xFF	; 255
 3c6:	68 0f       	add	r22, r24
	else
	{
		result = max_val;
	}	
	return result;
}
 3c8:	86 2f       	mov	r24, r22
 3ca:	08 95       	ret

000003cc <tune_hour>:

void tune_hour()
{
	if (UP_BTN_CLICK)
 3cc:	85 99       	sbic	0x10, 5	; 16
 3ce:	08 c0       	rjmp	.+16     	; 0x3e0 <tune_hour+0x14>
	{
		wait_time = 0;
 3d0:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <wait_time>
		hr = set_time_up(hr, HOUR_OVF);
 3d4:	67 e1       	ldi	r22, 0x17	; 23
 3d6:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 3da:	ec df       	rcall	.-40     	; 0x3b4 <set_time_up>
 3dc:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <hr>
	}
			
	if (DOWN_BTN_CLICK)
 3e0:	86 99       	sbic	0x10, 6	; 16
 3e2:	08 c0       	rjmp	.+16     	; 0x3f4 <tune_hour+0x28>
	{
		wait_time = 0;
 3e4:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <wait_time>
		hr = set_time_down(hr, HOUR_OVF);
 3e8:	67 e1       	ldi	r22, 0x17	; 23
 3ea:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 3ee:	e8 df       	rcall	.-48     	; 0x3c0 <set_time_down>
 3f0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <hr>
 3f4:	08 95       	ret

000003f6 <tune_min>:
	}
}

void tune_min()
{
	if (UP_BTN_CLICK)
 3f6:	85 99       	sbic	0x10, 5	; 16
 3f8:	09 c0       	rjmp	.+18     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
	{
		wait_time = MAX_WAIT_TIME;
 3fa:	88 e0       	ldi	r24, 0x08	; 8
 3fc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <wait_time>
		min = set_time_up(min, MIN_OVF-1);
 400:	6b e3       	ldi	r22, 0x3B	; 59
 402:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <min>
 406:	d6 df       	rcall	.-84     	; 0x3b4 <set_time_up>
 408:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <min>
	}
			
	if (DOWN_BTN_CLICK)
 40c:	86 99       	sbic	0x10, 6	; 16
 40e:	09 c0       	rjmp	.+18     	; 0x422 <__DATA_REGION_LENGTH__+0x22>
	{
		wait_time = MAX_WAIT_TIME;
 410:	88 e0       	ldi	r24, 0x08	; 8
 412:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <wait_time>
		min = set_time_down(min, MIN_OVF-1);
 416:	6b e3       	ldi	r22, 0x3B	; 59
 418:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <min>
 41c:	d1 df       	rcall	.-94     	; 0x3c0 <set_time_down>
 41e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <min>
 422:	08 95       	ret

00000424 <event_listener>:
	}
}

void event_listener()
{
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	cd b7       	in	r28, 0x3d	; 61
 42a:	de b7       	in	r29, 0x3e	; 62
 42c:	28 97       	sbiw	r28, 0x08	; 8
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	f8 94       	cli
 432:	de bf       	out	0x3e, r29	; 62
 434:	0f be       	out	0x3f, r0	; 63
 436:	cd bf       	out	0x3d, r28	; 61
	hr = 0;
 438:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <hr>
	min = 0;
 43c:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <min>
	TM1637_setSegments(SET_WORD, DISP_LEN, START_POS);
 440:	8d e6       	ldi	r24, 0x6D	; 109
 442:	8d 83       	std	Y+5, r24	; 0x05
 444:	8b e7       	ldi	r24, 0x7B	; 123
 446:	8e 83       	std	Y+6, r24	; 0x06
 448:	88 e7       	ldi	r24, 0x78	; 120
 44a:	8f 83       	std	Y+7, r24	; 0x07
 44c:	88 87       	std	Y+8, r24	; 0x08
 44e:	40 e0       	ldi	r20, 0x00	; 0
 450:	64 e0       	ldi	r22, 0x04	; 4
 452:	ce 01       	movw	r24, r28
 454:	05 96       	adiw	r24, 0x05	; 5
 456:	3a d1       	rcall	.+628    	; 0x6cc <TM1637_setSegments>
	update_menu();
 458:	a2 df       	rcall	.-188    	; 0x39e <update_menu>
	while(MENU_BTN_CLICK)
 45a:	1a c0       	rjmp	.+52     	; 0x490 <__stack+0x31>
	{
		if (wait_time < MAX_WAIT_TIME)
 45c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <wait_time>
 460:	88 30       	cpi	r24, 0x08	; 8
 462:	10 f4       	brcc	.+4      	; 0x468 <__stack+0x9>
		{
			tune_hour();
 464:	b3 df       	rcall	.-154    	; 0x3cc <tune_hour>
 466:	01 c0       	rjmp	.+2      	; 0x46a <__stack+0xb>
		}
		else
		{
			tune_min();
 468:	c6 df       	rcall	.-116    	; 0x3f6 <tune_min>
		}
		wait_time++;
 46a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <wait_time>
 46e:	8f 5f       	subi	r24, 0xFF	; 255
 470:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <wait_time>
 474:	2f e9       	ldi	r18, 0x9F	; 159
 476:	86 e8       	ldi	r24, 0x86	; 134
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	21 50       	subi	r18, 0x01	; 1
 47c:	80 40       	sbci	r24, 0x00	; 0
 47e:	90 40       	sbci	r25, 0x00	; 0
 480:	e1 f7       	brne	.-8      	; 0x47a <__stack+0x1b>
 482:	00 c0       	rjmp	.+0      	; 0x484 <__stack+0x25>
 484:	00 00       	nop
		_delay_ms(WAIT500MS);
		print_time_on_display(hr,min);
 486:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <min>
 48a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 48e:	f4 dd       	rcall	.-1048   	; 0x78 <print_time_on_display>
{
	hr = 0;
	min = 0;
	TM1637_setSegments(SET_WORD, DISP_LEN, START_POS);
	update_menu();
	while(MENU_BTN_CLICK)
 490:	84 9b       	sbis	0x10, 4	; 16
 492:	e4 cf       	rjmp	.-56     	; 0x45c <event_listener+0x38>
		}
		wait_time++;
		_delay_ms(WAIT500MS);
		print_time_on_display(hr,min);
	}
	wait_time = 0;
 494:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <wait_time>
	TM1637_setSegments(DONE_WORD, DISP_LEN, START_POS);
 498:	8e e5       	ldi	r24, 0x5E	; 94
 49a:	89 83       	std	Y+1, r24	; 0x01
 49c:	8c e5       	ldi	r24, 0x5C	; 92
 49e:	8a 83       	std	Y+2, r24	; 0x02
 4a0:	84 e5       	ldi	r24, 0x54	; 84
 4a2:	8b 83       	std	Y+3, r24	; 0x03
 4a4:	89 e7       	ldi	r24, 0x79	; 121
 4a6:	8c 83       	std	Y+4, r24	; 0x04
 4a8:	40 e0       	ldi	r20, 0x00	; 0
 4aa:	64 e0       	ldi	r22, 0x04	; 4
 4ac:	ce 01       	movw	r24, r28
 4ae:	01 96       	adiw	r24, 0x01	; 1
 4b0:	0d d1       	rcall	.+538    	; 0x6cc <TM1637_setSegments>
	update_menu();
 4b2:	75 df       	rcall	.-278    	; 0x39e <update_menu>
}
 4b4:	28 96       	adiw	r28, 0x08	; 8
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	f8 94       	cli
 4ba:	de bf       	out	0x3e, r29	; 62
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	cd bf       	out	0x3d, r28	; 61
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

000004c6 <setup_time>:

void setup_time(uint8_t* seconds, uint8_t* minutes, uint8_t* hour)
{
	*seconds = 0;
 4c6:	fc 01       	movw	r30, r24
 4c8:	10 82       	st	Z, r1
	*minutes = min;
 4ca:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <min>
 4ce:	fb 01       	movw	r30, r22
 4d0:	80 83       	st	Z, r24
	*hour = hr;
 4d2:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 4d6:	fa 01       	movw	r30, r20
 4d8:	80 83       	st	Z, r24
 4da:	08 95       	ret

000004dc <control_seconds>:
#include "../main.h"

void control_seconds(uint8_t* seconds, uint8_t* minutes)
{
	if (*seconds >= SEC_OVF)
 4dc:	fc 01       	movw	r30, r24
 4de:	20 81       	ld	r18, Z
 4e0:	2c 33       	cpi	r18, 0x3C	; 60
 4e2:	30 f0       	brcs	.+12     	; 0x4f0 <control_seconds+0x14>
	{
		*minutes = *minutes + 1;
 4e4:	fb 01       	movw	r30, r22
 4e6:	20 81       	ld	r18, Z
 4e8:	2f 5f       	subi	r18, 0xFF	; 255
 4ea:	20 83       	st	Z, r18
		*seconds = 0;
 4ec:	fc 01       	movw	r30, r24
 4ee:	10 82       	st	Z, r1
 4f0:	08 95       	ret

000004f2 <control_min>:
	}
}

void control_min(uint8_t* minutes, uint8_t* hour)
{
	if (*minutes >= MIN_OVF)
 4f2:	fc 01       	movw	r30, r24
 4f4:	20 81       	ld	r18, Z
 4f6:	2c 33       	cpi	r18, 0x3C	; 60
 4f8:	30 f0       	brcs	.+12     	; 0x506 <control_min+0x14>
	{
		*hour = *hour + 1;
 4fa:	fb 01       	movw	r30, r22
 4fc:	20 81       	ld	r18, Z
 4fe:	2f 5f       	subi	r18, 0xFF	; 255
 500:	20 83       	st	Z, r18
		*minutes = 0;
 502:	fc 01       	movw	r30, r24
 504:	10 82       	st	Z, r1
 506:	08 95       	ret

00000508 <control_hour>:
	}
}

void control_hour(uint8_t* seconds, uint8_t* minutes, uint8_t* hour)
{
 508:	fc 01       	movw	r30, r24
	if (*hour == HOUR_OVF && *minutes >= 59 && *seconds >= 59)
 50a:	da 01       	movw	r26, r20
 50c:	9c 91       	ld	r25, X
 50e:	97 31       	cpi	r25, 0x17	; 23
 510:	61 f4       	brne	.+24     	; 0x52a <control_hour+0x22>
 512:	db 01       	movw	r26, r22
 514:	8c 91       	ld	r24, X
 516:	8b 33       	cpi	r24, 0x3B	; 59
 518:	40 f0       	brcs	.+16     	; 0x52a <control_hour+0x22>
 51a:	80 81       	ld	r24, Z
 51c:	8b 33       	cpi	r24, 0x3B	; 59
 51e:	28 f0       	brcs	.+10     	; 0x52a <control_hour+0x22>
	{
		*hour = 0;
 520:	da 01       	movw	r26, r20
 522:	1c 92       	st	X, r1
		*minutes = 0;
 524:	db 01       	movw	r26, r22
 526:	1c 92       	st	X, r1
		*seconds = 0;
 528:	10 82       	st	Z, r1
 52a:	08 95       	ret

0000052c <TM1637_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 52c:	84 b3       	in	r24, 0x14	; 20
 52e:	8f 7e       	andi	r24, 0xEF	; 239
 530:	84 bb       	out	0x14, r24	; 20
 532:	84 b3       	in	r24, 0x14	; 20
 534:	8f 7d       	andi	r24, 0xDF	; 223
 536:	84 bb       	out	0x14, r24	; 20
 538:	85 b3       	in	r24, 0x15	; 21
 53a:	8f 7c       	andi	r24, 0xCF	; 207
 53c:	85 bb       	out	0x15, r24	; 21
 53e:	84 b3       	in	r24, 0x14	; 20
 540:	80 61       	ori	r24, 0x10	; 16
 542:	84 bb       	out	0x14, r24	; 20
 544:	82 e4       	ldi	r24, 0x42	; 66
 546:	8a 95       	dec	r24
 548:	f1 f7       	brne	.-4      	; 0x546 <TM1637_init+0x1a>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <TM1637_init+0x20>
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	20 e4       	ldi	r18, 0x40	; 64
 550:	1d c0       	rjmp	.+58     	; 0x58c <TM1637_init+0x60>
 552:	84 b3       	in	r24, 0x14	; 20
 554:	80 62       	ori	r24, 0x20	; 32
 556:	84 bb       	out	0x14, r24	; 20
 558:	81 e2       	ldi	r24, 0x21	; 33
 55a:	8a 95       	dec	r24
 55c:	f1 f7       	brne	.-4      	; 0x55a <TM1637_init+0x2e>
 55e:	00 00       	nop
 560:	20 ff       	sbrs	r18, 0
 562:	04 c0       	rjmp	.+8      	; 0x56c <TM1637_init+0x40>
 564:	84 b3       	in	r24, 0x14	; 20
 566:	8f 7e       	andi	r24, 0xEF	; 239
 568:	84 bb       	out	0x14, r24	; 20
 56a:	03 c0       	rjmp	.+6      	; 0x572 <TM1637_init+0x46>
 56c:	84 b3       	in	r24, 0x14	; 20
 56e:	80 61       	ori	r24, 0x10	; 16
 570:	84 bb       	out	0x14, r24	; 20
 572:	81 e2       	ldi	r24, 0x21	; 33
 574:	8a 95       	dec	r24
 576:	f1 f7       	brne	.-4      	; 0x574 <TM1637_init+0x48>
 578:	00 00       	nop
 57a:	84 b3       	in	r24, 0x14	; 20
 57c:	8f 7d       	andi	r24, 0xDF	; 223
 57e:	84 bb       	out	0x14, r24	; 20
 580:	82 e4       	ldi	r24, 0x42	; 66
 582:	8a 95       	dec	r24
 584:	f1 f7       	brne	.-4      	; 0x582 <TM1637_init+0x56>
 586:	00 c0       	rjmp	.+0      	; 0x588 <TM1637_init+0x5c>
 588:	26 95       	lsr	r18
 58a:	9f 5f       	subi	r25, 0xFF	; 255
 58c:	98 30       	cpi	r25, 0x08	; 8
 58e:	08 f3       	brcs	.-62     	; 0x552 <TM1637_init+0x26>
 590:	84 b3       	in	r24, 0x14	; 20
 592:	80 62       	ori	r24, 0x20	; 32
 594:	84 bb       	out	0x14, r24	; 20
 596:	84 b3       	in	r24, 0x14	; 20
 598:	8f 7e       	andi	r24, 0xEF	; 239
 59a:	84 bb       	out	0x14, r24	; 20
 59c:	82 e4       	ldi	r24, 0x42	; 66
 59e:	8a 95       	dec	r24
 5a0:	f1 f7       	brne	.-4      	; 0x59e <TM1637_init+0x72>
 5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <TM1637_init+0x78>
 5a4:	84 b3       	in	r24, 0x14	; 20
 5a6:	8f 7d       	andi	r24, 0xDF	; 223
 5a8:	84 bb       	out	0x14, r24	; 20
 5aa:	81 e2       	ldi	r24, 0x21	; 33
 5ac:	8a 95       	dec	r24
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <TM1637_init+0x80>
 5b0:	00 00       	nop
 5b2:	9c 99       	sbic	0x13, 4	; 19
 5b4:	03 c0       	rjmp	.+6      	; 0x5bc <TM1637_init+0x90>
 5b6:	84 b3       	in	r24, 0x14	; 20
 5b8:	80 61       	ori	r24, 0x10	; 16
 5ba:	84 bb       	out	0x14, r24	; 20
 5bc:	81 e2       	ldi	r24, 0x21	; 33
 5be:	8a 95       	dec	r24
 5c0:	f1 f7       	brne	.-4      	; 0x5be <TM1637_init+0x92>
 5c2:	00 00       	nop
 5c4:	84 b3       	in	r24, 0x14	; 20
 5c6:	80 62       	ori	r24, 0x20	; 32
 5c8:	84 bb       	out	0x14, r24	; 20
 5ca:	81 e2       	ldi	r24, 0x21	; 33
 5cc:	8a 95       	dec	r24
 5ce:	f1 f7       	brne	.-4      	; 0x5cc <TM1637_init+0xa0>
 5d0:	00 00       	nop
 5d2:	84 b3       	in	r24, 0x14	; 20
 5d4:	80 61       	ori	r24, 0x10	; 16
 5d6:	84 bb       	out	0x14, r24	; 20
 5d8:	81 e2       	ldi	r24, 0x21	; 33
 5da:	8a 95       	dec	r24
 5dc:	f1 f7       	brne	.-4      	; 0x5da <TM1637_init+0xae>
 5de:	00 00       	nop
 5e0:	84 b3       	in	r24, 0x14	; 20
 5e2:	8f 7d       	andi	r24, 0xDF	; 223
 5e4:	84 bb       	out	0x14, r24	; 20
 5e6:	82 e4       	ldi	r24, 0x42	; 66
 5e8:	8a 95       	dec	r24
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <TM1637_init+0xbc>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <TM1637_init+0xc2>
 5ee:	84 b3       	in	r24, 0x14	; 20
 5f0:	8f 7e       	andi	r24, 0xEF	; 239
 5f2:	84 bb       	out	0x14, r24	; 20
 5f4:	82 e4       	ldi	r24, 0x42	; 66
 5f6:	8a 95       	dec	r24
 5f8:	f1 f7       	brne	.-4      	; 0x5f6 <TM1637_init+0xca>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <TM1637_init+0xd0>
 5fc:	08 95       	ret

000005fe <TM1637_turnOnAndSetBrightness>:
 5fe:	87 70       	andi	r24, 0x07	; 7
 600:	88 60       	ori	r24, 0x08	; 8
 602:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <TM1637_brightness_reg>
 606:	84 b3       	in	r24, 0x14	; 20
 608:	80 61       	ori	r24, 0x10	; 16
 60a:	84 bb       	out	0x14, r24	; 20
 60c:	82 e4       	ldi	r24, 0x42	; 66
 60e:	8a 95       	dec	r24
 610:	f1 f7       	brne	.-4      	; 0x60e <TM1637_turnOnAndSetBrightness+0x10>
 612:	00 c0       	rjmp	.+0      	; 0x614 <TM1637_turnOnAndSetBrightness+0x16>
 614:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <TM1637_brightness_reg>
 618:	9f 70       	andi	r25, 0x0F	; 15
 61a:	90 68       	ori	r25, 0x80	; 128
 61c:	20 e0       	ldi	r18, 0x00	; 0
 61e:	1d c0       	rjmp	.+58     	; 0x65a <TM1637_turnOnAndSetBrightness+0x5c>
 620:	84 b3       	in	r24, 0x14	; 20
 622:	80 62       	ori	r24, 0x20	; 32
 624:	84 bb       	out	0x14, r24	; 20
 626:	81 e2       	ldi	r24, 0x21	; 33
 628:	8a 95       	dec	r24
 62a:	f1 f7       	brne	.-4      	; 0x628 <TM1637_turnOnAndSetBrightness+0x2a>
 62c:	00 00       	nop
 62e:	90 ff       	sbrs	r25, 0
 630:	04 c0       	rjmp	.+8      	; 0x63a <TM1637_turnOnAndSetBrightness+0x3c>
 632:	84 b3       	in	r24, 0x14	; 20
 634:	8f 7e       	andi	r24, 0xEF	; 239
 636:	84 bb       	out	0x14, r24	; 20
 638:	03 c0       	rjmp	.+6      	; 0x640 <TM1637_turnOnAndSetBrightness+0x42>
 63a:	84 b3       	in	r24, 0x14	; 20
 63c:	80 61       	ori	r24, 0x10	; 16
 63e:	84 bb       	out	0x14, r24	; 20
 640:	81 e2       	ldi	r24, 0x21	; 33
 642:	8a 95       	dec	r24
 644:	f1 f7       	brne	.-4      	; 0x642 <TM1637_turnOnAndSetBrightness+0x44>
 646:	00 00       	nop
 648:	84 b3       	in	r24, 0x14	; 20
 64a:	8f 7d       	andi	r24, 0xDF	; 223
 64c:	84 bb       	out	0x14, r24	; 20
 64e:	82 e4       	ldi	r24, 0x42	; 66
 650:	8a 95       	dec	r24
 652:	f1 f7       	brne	.-4      	; 0x650 <TM1637_turnOnAndSetBrightness+0x52>
 654:	00 c0       	rjmp	.+0      	; 0x656 <TM1637_turnOnAndSetBrightness+0x58>
 656:	96 95       	lsr	r25
 658:	2f 5f       	subi	r18, 0xFF	; 255
 65a:	28 30       	cpi	r18, 0x08	; 8
 65c:	08 f3       	brcs	.-62     	; 0x620 <TM1637_turnOnAndSetBrightness+0x22>
 65e:	84 b3       	in	r24, 0x14	; 20
 660:	80 62       	ori	r24, 0x20	; 32
 662:	84 bb       	out	0x14, r24	; 20
 664:	84 b3       	in	r24, 0x14	; 20
 666:	8f 7e       	andi	r24, 0xEF	; 239
 668:	84 bb       	out	0x14, r24	; 20
 66a:	82 e4       	ldi	r24, 0x42	; 66
 66c:	8a 95       	dec	r24
 66e:	f1 f7       	brne	.-4      	; 0x66c <TM1637_turnOnAndSetBrightness+0x6e>
 670:	00 c0       	rjmp	.+0      	; 0x672 <TM1637_turnOnAndSetBrightness+0x74>
 672:	84 b3       	in	r24, 0x14	; 20
 674:	8f 7d       	andi	r24, 0xDF	; 223
 676:	84 bb       	out	0x14, r24	; 20
 678:	81 e2       	ldi	r24, 0x21	; 33
 67a:	8a 95       	dec	r24
 67c:	f1 f7       	brne	.-4      	; 0x67a <TM1637_turnOnAndSetBrightness+0x7c>
 67e:	00 00       	nop
 680:	9c 99       	sbic	0x13, 4	; 19
 682:	03 c0       	rjmp	.+6      	; 0x68a <TM1637_turnOnAndSetBrightness+0x8c>
 684:	84 b3       	in	r24, 0x14	; 20
 686:	80 61       	ori	r24, 0x10	; 16
 688:	84 bb       	out	0x14, r24	; 20
 68a:	81 e2       	ldi	r24, 0x21	; 33
 68c:	8a 95       	dec	r24
 68e:	f1 f7       	brne	.-4      	; 0x68c <TM1637_turnOnAndSetBrightness+0x8e>
 690:	00 00       	nop
 692:	84 b3       	in	r24, 0x14	; 20
 694:	80 62       	ori	r24, 0x20	; 32
 696:	84 bb       	out	0x14, r24	; 20
 698:	81 e2       	ldi	r24, 0x21	; 33
 69a:	8a 95       	dec	r24
 69c:	f1 f7       	brne	.-4      	; 0x69a <TM1637_turnOnAndSetBrightness+0x9c>
 69e:	00 00       	nop
 6a0:	84 b3       	in	r24, 0x14	; 20
 6a2:	80 61       	ori	r24, 0x10	; 16
 6a4:	84 bb       	out	0x14, r24	; 20
 6a6:	81 e2       	ldi	r24, 0x21	; 33
 6a8:	8a 95       	dec	r24
 6aa:	f1 f7       	brne	.-4      	; 0x6a8 <TM1637_turnOnAndSetBrightness+0xaa>
 6ac:	00 00       	nop
 6ae:	84 b3       	in	r24, 0x14	; 20
 6b0:	8f 7d       	andi	r24, 0xDF	; 223
 6b2:	84 bb       	out	0x14, r24	; 20
 6b4:	82 e4       	ldi	r24, 0x42	; 66
 6b6:	8a 95       	dec	r24
 6b8:	f1 f7       	brne	.-4      	; 0x6b6 <TM1637_turnOnAndSetBrightness+0xb8>
 6ba:	00 c0       	rjmp	.+0      	; 0x6bc <TM1637_turnOnAndSetBrightness+0xbe>
 6bc:	84 b3       	in	r24, 0x14	; 20
 6be:	8f 7e       	andi	r24, 0xEF	; 239
 6c0:	84 bb       	out	0x14, r24	; 20
 6c2:	82 e4       	ldi	r24, 0x42	; 66
 6c4:	8a 95       	dec	r24
 6c6:	f1 f7       	brne	.-4      	; 0x6c4 <TM1637_turnOnAndSetBrightness+0xc6>
 6c8:	00 c0       	rjmp	.+0      	; 0x6ca <TM1637_turnOnAndSetBrightness+0xcc>
 6ca:	08 95       	ret

000006cc <TM1637_setSegments>:
 6cc:	fc 01       	movw	r30, r24
 6ce:	84 b3       	in	r24, 0x14	; 20
 6d0:	80 61       	ori	r24, 0x10	; 16
 6d2:	84 bb       	out	0x14, r24	; 20
 6d4:	82 e4       	ldi	r24, 0x42	; 66
 6d6:	8a 95       	dec	r24
 6d8:	f1 f7       	brne	.-4      	; 0x6d6 <TM1637_setSegments+0xa>
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <TM1637_setSegments+0x10>
 6dc:	43 70       	andi	r20, 0x03	; 3
 6de:	40 6c       	ori	r20, 0xC0	; 192
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	1d c0       	rjmp	.+58     	; 0x71e <TM1637_setSegments+0x52>
 6e4:	84 b3       	in	r24, 0x14	; 20
 6e6:	80 62       	ori	r24, 0x20	; 32
 6e8:	84 bb       	out	0x14, r24	; 20
 6ea:	81 e2       	ldi	r24, 0x21	; 33
 6ec:	8a 95       	dec	r24
 6ee:	f1 f7       	brne	.-4      	; 0x6ec <TM1637_setSegments+0x20>
 6f0:	00 00       	nop
 6f2:	40 ff       	sbrs	r20, 0
 6f4:	04 c0       	rjmp	.+8      	; 0x6fe <TM1637_setSegments+0x32>
 6f6:	84 b3       	in	r24, 0x14	; 20
 6f8:	8f 7e       	andi	r24, 0xEF	; 239
 6fa:	84 bb       	out	0x14, r24	; 20
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <TM1637_setSegments+0x38>
 6fe:	84 b3       	in	r24, 0x14	; 20
 700:	80 61       	ori	r24, 0x10	; 16
 702:	84 bb       	out	0x14, r24	; 20
 704:	81 e2       	ldi	r24, 0x21	; 33
 706:	8a 95       	dec	r24
 708:	f1 f7       	brne	.-4      	; 0x706 <TM1637_setSegments+0x3a>
 70a:	00 00       	nop
 70c:	84 b3       	in	r24, 0x14	; 20
 70e:	8f 7d       	andi	r24, 0xDF	; 223
 710:	84 bb       	out	0x14, r24	; 20
 712:	82 e4       	ldi	r24, 0x42	; 66
 714:	8a 95       	dec	r24
 716:	f1 f7       	brne	.-4      	; 0x714 <TM1637_setSegments+0x48>
 718:	00 c0       	rjmp	.+0      	; 0x71a <TM1637_setSegments+0x4e>
 71a:	46 95       	lsr	r20
 71c:	9f 5f       	subi	r25, 0xFF	; 255
 71e:	98 30       	cpi	r25, 0x08	; 8
 720:	08 f3       	brcs	.-62     	; 0x6e4 <TM1637_setSegments+0x18>
 722:	84 b3       	in	r24, 0x14	; 20
 724:	80 62       	ori	r24, 0x20	; 32
 726:	84 bb       	out	0x14, r24	; 20
 728:	84 b3       	in	r24, 0x14	; 20
 72a:	8f 7e       	andi	r24, 0xEF	; 239
 72c:	84 bb       	out	0x14, r24	; 20
 72e:	82 e4       	ldi	r24, 0x42	; 66
 730:	8a 95       	dec	r24
 732:	f1 f7       	brne	.-4      	; 0x730 <TM1637_setSegments+0x64>
 734:	00 c0       	rjmp	.+0      	; 0x736 <TM1637_setSegments+0x6a>
 736:	84 b3       	in	r24, 0x14	; 20
 738:	8f 7d       	andi	r24, 0xDF	; 223
 73a:	84 bb       	out	0x14, r24	; 20
 73c:	81 e2       	ldi	r24, 0x21	; 33
 73e:	8a 95       	dec	r24
 740:	f1 f7       	brne	.-4      	; 0x73e <TM1637_setSegments+0x72>
 742:	00 00       	nop
 744:	9c 99       	sbic	0x13, 4	; 19
 746:	03 c0       	rjmp	.+6      	; 0x74e <TM1637_setSegments+0x82>
 748:	84 b3       	in	r24, 0x14	; 20
 74a:	80 61       	ori	r24, 0x10	; 16
 74c:	84 bb       	out	0x14, r24	; 20
 74e:	81 e2       	ldi	r24, 0x21	; 33
 750:	8a 95       	dec	r24
 752:	f1 f7       	brne	.-4      	; 0x750 <TM1637_setSegments+0x84>
 754:	00 00       	nop
 756:	40 e0       	ldi	r20, 0x00	; 0
 758:	40 c0       	rjmp	.+128    	; 0x7da <TM1637_setSegments+0x10e>
 75a:	df 01       	movw	r26, r30
 75c:	a4 0f       	add	r26, r20
 75e:	b1 1d       	adc	r27, r1
 760:	3c 91       	ld	r19, X
 762:	20 e0       	ldi	r18, 0x00	; 0
 764:	1d c0       	rjmp	.+58     	; 0x7a0 <TM1637_setSegments+0xd4>
 766:	94 b3       	in	r25, 0x14	; 20
 768:	90 62       	ori	r25, 0x20	; 32
 76a:	94 bb       	out	0x14, r25	; 20
 76c:	81 e2       	ldi	r24, 0x21	; 33
 76e:	8a 95       	dec	r24
 770:	f1 f7       	brne	.-4      	; 0x76e <TM1637_setSegments+0xa2>
 772:	00 00       	nop
 774:	30 ff       	sbrs	r19, 0
 776:	04 c0       	rjmp	.+8      	; 0x780 <TM1637_setSegments+0xb4>
 778:	94 b3       	in	r25, 0x14	; 20
 77a:	9f 7e       	andi	r25, 0xEF	; 239
 77c:	94 bb       	out	0x14, r25	; 20
 77e:	03 c0       	rjmp	.+6      	; 0x786 <TM1637_setSegments+0xba>
 780:	94 b3       	in	r25, 0x14	; 20
 782:	90 61       	ori	r25, 0x10	; 16
 784:	94 bb       	out	0x14, r25	; 20
 786:	81 e2       	ldi	r24, 0x21	; 33
 788:	8a 95       	dec	r24
 78a:	f1 f7       	brne	.-4      	; 0x788 <TM1637_setSegments+0xbc>
 78c:	00 00       	nop
 78e:	94 b3       	in	r25, 0x14	; 20
 790:	9f 7d       	andi	r25, 0xDF	; 223
 792:	94 bb       	out	0x14, r25	; 20
 794:	82 e4       	ldi	r24, 0x42	; 66
 796:	8a 95       	dec	r24
 798:	f1 f7       	brne	.-4      	; 0x796 <TM1637_setSegments+0xca>
 79a:	00 c0       	rjmp	.+0      	; 0x79c <TM1637_setSegments+0xd0>
 79c:	36 95       	lsr	r19
 79e:	2f 5f       	subi	r18, 0xFF	; 255
 7a0:	28 30       	cpi	r18, 0x08	; 8
 7a2:	08 f3       	brcs	.-62     	; 0x766 <TM1637_setSegments+0x9a>
 7a4:	84 b3       	in	r24, 0x14	; 20
 7a6:	80 62       	ori	r24, 0x20	; 32
 7a8:	84 bb       	out	0x14, r24	; 20
 7aa:	84 b3       	in	r24, 0x14	; 20
 7ac:	8f 7e       	andi	r24, 0xEF	; 239
 7ae:	84 bb       	out	0x14, r24	; 20
 7b0:	82 e4       	ldi	r24, 0x42	; 66
 7b2:	8a 95       	dec	r24
 7b4:	f1 f7       	brne	.-4      	; 0x7b2 <TM1637_setSegments+0xe6>
 7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <TM1637_setSegments+0xec>
 7b8:	94 b3       	in	r25, 0x14	; 20
 7ba:	9f 7d       	andi	r25, 0xDF	; 223
 7bc:	94 bb       	out	0x14, r25	; 20
 7be:	81 e2       	ldi	r24, 0x21	; 33
 7c0:	8a 95       	dec	r24
 7c2:	f1 f7       	brne	.-4      	; 0x7c0 <TM1637_setSegments+0xf4>
 7c4:	00 00       	nop
 7c6:	9c 99       	sbic	0x13, 4	; 19
 7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <TM1637_setSegments+0x104>
 7ca:	84 b3       	in	r24, 0x14	; 20
 7cc:	80 61       	ori	r24, 0x10	; 16
 7ce:	84 bb       	out	0x14, r24	; 20
 7d0:	81 e2       	ldi	r24, 0x21	; 33
 7d2:	8a 95       	dec	r24
 7d4:	f1 f7       	brne	.-4      	; 0x7d2 <TM1637_setSegments+0x106>
 7d6:	00 00       	nop
 7d8:	4f 5f       	subi	r20, 0xFF	; 255
 7da:	46 17       	cp	r20, r22
 7dc:	08 f4       	brcc	.+2      	; 0x7e0 <TM1637_setSegments+0x114>
 7de:	bd cf       	rjmp	.-134    	; 0x75a <TM1637_setSegments+0x8e>
 7e0:	84 b3       	in	r24, 0x14	; 20
 7e2:	80 62       	ori	r24, 0x20	; 32
 7e4:	84 bb       	out	0x14, r24	; 20
 7e6:	81 e2       	ldi	r24, 0x21	; 33
 7e8:	8a 95       	dec	r24
 7ea:	f1 f7       	brne	.-4      	; 0x7e8 <TM1637_setSegments+0x11c>
 7ec:	00 00       	nop
 7ee:	84 b3       	in	r24, 0x14	; 20
 7f0:	80 61       	ori	r24, 0x10	; 16
 7f2:	84 bb       	out	0x14, r24	; 20
 7f4:	81 e2       	ldi	r24, 0x21	; 33
 7f6:	8a 95       	dec	r24
 7f8:	f1 f7       	brne	.-4      	; 0x7f6 <TM1637_setSegments+0x12a>
 7fa:	00 00       	nop
 7fc:	84 b3       	in	r24, 0x14	; 20
 7fe:	8f 7d       	andi	r24, 0xDF	; 223
 800:	84 bb       	out	0x14, r24	; 20
 802:	82 e4       	ldi	r24, 0x42	; 66
 804:	8a 95       	dec	r24
 806:	f1 f7       	brne	.-4      	; 0x804 <TM1637_setSegments+0x138>
 808:	00 c0       	rjmp	.+0      	; 0x80a <TM1637_setSegments+0x13e>
 80a:	84 b3       	in	r24, 0x14	; 20
 80c:	8f 7e       	andi	r24, 0xEF	; 239
 80e:	84 bb       	out	0x14, r24	; 20
 810:	82 e4       	ldi	r24, 0x42	; 66
 812:	8a 95       	dec	r24
 814:	f1 f7       	brne	.-4      	; 0x812 <TM1637_setSegments+0x146>
 816:	00 c0       	rjmp	.+0      	; 0x818 <TM1637_setSegments+0x14c>
 818:	08 95       	ret

0000081a <TM1637_clear>:
 81a:	84 b3       	in	r24, 0x14	; 20
 81c:	80 61       	ori	r24, 0x10	; 16
 81e:	84 bb       	out	0x14, r24	; 20
 820:	82 e4       	ldi	r24, 0x42	; 66
 822:	8a 95       	dec	r24
 824:	f1 f7       	brne	.-4      	; 0x822 <TM1637_clear+0x8>
 826:	00 c0       	rjmp	.+0      	; 0x828 <TM1637_clear+0xe>
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	20 ec       	ldi	r18, 0xC0	; 192
 82c:	1d c0       	rjmp	.+58     	; 0x868 <TM1637_clear+0x4e>
 82e:	84 b3       	in	r24, 0x14	; 20
 830:	80 62       	ori	r24, 0x20	; 32
 832:	84 bb       	out	0x14, r24	; 20
 834:	81 e2       	ldi	r24, 0x21	; 33
 836:	8a 95       	dec	r24
 838:	f1 f7       	brne	.-4      	; 0x836 <TM1637_clear+0x1c>
 83a:	00 00       	nop
 83c:	20 ff       	sbrs	r18, 0
 83e:	04 c0       	rjmp	.+8      	; 0x848 <TM1637_clear+0x2e>
 840:	84 b3       	in	r24, 0x14	; 20
 842:	8f 7e       	andi	r24, 0xEF	; 239
 844:	84 bb       	out	0x14, r24	; 20
 846:	03 c0       	rjmp	.+6      	; 0x84e <TM1637_clear+0x34>
 848:	84 b3       	in	r24, 0x14	; 20
 84a:	80 61       	ori	r24, 0x10	; 16
 84c:	84 bb       	out	0x14, r24	; 20
 84e:	81 e2       	ldi	r24, 0x21	; 33
 850:	8a 95       	dec	r24
 852:	f1 f7       	brne	.-4      	; 0x850 <TM1637_clear+0x36>
 854:	00 00       	nop
 856:	84 b3       	in	r24, 0x14	; 20
 858:	8f 7d       	andi	r24, 0xDF	; 223
 85a:	84 bb       	out	0x14, r24	; 20
 85c:	82 e4       	ldi	r24, 0x42	; 66
 85e:	8a 95       	dec	r24
 860:	f1 f7       	brne	.-4      	; 0x85e <TM1637_clear+0x44>
 862:	00 c0       	rjmp	.+0      	; 0x864 <TM1637_clear+0x4a>
 864:	26 95       	lsr	r18
 866:	9f 5f       	subi	r25, 0xFF	; 255
 868:	98 30       	cpi	r25, 0x08	; 8
 86a:	08 f3       	brcs	.-62     	; 0x82e <TM1637_clear+0x14>
 86c:	84 b3       	in	r24, 0x14	; 20
 86e:	80 62       	ori	r24, 0x20	; 32
 870:	84 bb       	out	0x14, r24	; 20
 872:	84 b3       	in	r24, 0x14	; 20
 874:	8f 7e       	andi	r24, 0xEF	; 239
 876:	84 bb       	out	0x14, r24	; 20
 878:	82 e4       	ldi	r24, 0x42	; 66
 87a:	8a 95       	dec	r24
 87c:	f1 f7       	brne	.-4      	; 0x87a <TM1637_clear+0x60>
 87e:	00 c0       	rjmp	.+0      	; 0x880 <TM1637_clear+0x66>
 880:	84 b3       	in	r24, 0x14	; 20
 882:	8f 7d       	andi	r24, 0xDF	; 223
 884:	84 bb       	out	0x14, r24	; 20
 886:	81 e2       	ldi	r24, 0x21	; 33
 888:	8a 95       	dec	r24
 88a:	f1 f7       	brne	.-4      	; 0x888 <TM1637_clear+0x6e>
 88c:	00 00       	nop
 88e:	9c 99       	sbic	0x13, 4	; 19
 890:	03 c0       	rjmp	.+6      	; 0x898 <TM1637_clear+0x7e>
 892:	84 b3       	in	r24, 0x14	; 20
 894:	80 61       	ori	r24, 0x10	; 16
 896:	84 bb       	out	0x14, r24	; 20
 898:	81 e2       	ldi	r24, 0x21	; 33
 89a:	8a 95       	dec	r24
 89c:	f1 f7       	brne	.-4      	; 0x89a <TM1637_clear+0x80>
 89e:	00 00       	nop
 8a0:	20 e0       	ldi	r18, 0x00	; 0
 8a2:	35 c0       	rjmp	.+106    	; 0x90e <TM1637_clear+0xf4>
 8a4:	84 b3       	in	r24, 0x14	; 20
 8a6:	80 62       	ori	r24, 0x20	; 32
 8a8:	84 bb       	out	0x14, r24	; 20
 8aa:	81 e2       	ldi	r24, 0x21	; 33
 8ac:	8a 95       	dec	r24
 8ae:	f1 f7       	brne	.-4      	; 0x8ac <TM1637_clear+0x92>
 8b0:	00 00       	nop
 8b2:	84 b3       	in	r24, 0x14	; 20
 8b4:	80 61       	ori	r24, 0x10	; 16
 8b6:	84 bb       	out	0x14, r24	; 20
 8b8:	81 e2       	ldi	r24, 0x21	; 33
 8ba:	8a 95       	dec	r24
 8bc:	f1 f7       	brne	.-4      	; 0x8ba <TM1637_clear+0xa0>
 8be:	00 00       	nop
 8c0:	84 b3       	in	r24, 0x14	; 20
 8c2:	8f 7d       	andi	r24, 0xDF	; 223
 8c4:	84 bb       	out	0x14, r24	; 20
 8c6:	82 e4       	ldi	r24, 0x42	; 66
 8c8:	8a 95       	dec	r24
 8ca:	f1 f7       	brne	.-4      	; 0x8c8 <TM1637_clear+0xae>
 8cc:	00 c0       	rjmp	.+0      	; 0x8ce <TM1637_clear+0xb4>
 8ce:	9f 5f       	subi	r25, 0xFF	; 255
 8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <TM1637_clear+0xba>
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	98 30       	cpi	r25, 0x08	; 8
 8d6:	30 f3       	brcs	.-52     	; 0x8a4 <TM1637_clear+0x8a>
 8d8:	84 b3       	in	r24, 0x14	; 20
 8da:	80 62       	ori	r24, 0x20	; 32
 8dc:	84 bb       	out	0x14, r24	; 20
 8de:	84 b3       	in	r24, 0x14	; 20
 8e0:	8f 7e       	andi	r24, 0xEF	; 239
 8e2:	84 bb       	out	0x14, r24	; 20
 8e4:	82 e4       	ldi	r24, 0x42	; 66
 8e6:	8a 95       	dec	r24
 8e8:	f1 f7       	brne	.-4      	; 0x8e6 <TM1637_clear+0xcc>
 8ea:	00 c0       	rjmp	.+0      	; 0x8ec <TM1637_clear+0xd2>
 8ec:	84 b3       	in	r24, 0x14	; 20
 8ee:	8f 7d       	andi	r24, 0xDF	; 223
 8f0:	84 bb       	out	0x14, r24	; 20
 8f2:	81 e2       	ldi	r24, 0x21	; 33
 8f4:	8a 95       	dec	r24
 8f6:	f1 f7       	brne	.-4      	; 0x8f4 <TM1637_clear+0xda>
 8f8:	00 00       	nop
 8fa:	9c 99       	sbic	0x13, 4	; 19
 8fc:	03 c0       	rjmp	.+6      	; 0x904 <TM1637_clear+0xea>
 8fe:	84 b3       	in	r24, 0x14	; 20
 900:	80 61       	ori	r24, 0x10	; 16
 902:	84 bb       	out	0x14, r24	; 20
 904:	81 e2       	ldi	r24, 0x21	; 33
 906:	8a 95       	dec	r24
 908:	f1 f7       	brne	.-4      	; 0x906 <TM1637_clear+0xec>
 90a:	00 00       	nop
 90c:	2f 5f       	subi	r18, 0xFF	; 255
 90e:	24 30       	cpi	r18, 0x04	; 4
 910:	00 f3       	brcs	.-64     	; 0x8d2 <TM1637_clear+0xb8>
 912:	84 b3       	in	r24, 0x14	; 20
 914:	80 62       	ori	r24, 0x20	; 32
 916:	84 bb       	out	0x14, r24	; 20
 918:	81 e2       	ldi	r24, 0x21	; 33
 91a:	8a 95       	dec	r24
 91c:	f1 f7       	brne	.-4      	; 0x91a <TM1637_clear+0x100>
 91e:	00 00       	nop
 920:	84 b3       	in	r24, 0x14	; 20
 922:	80 61       	ori	r24, 0x10	; 16
 924:	84 bb       	out	0x14, r24	; 20
 926:	81 e2       	ldi	r24, 0x21	; 33
 928:	8a 95       	dec	r24
 92a:	f1 f7       	brne	.-4      	; 0x928 <TM1637_clear+0x10e>
 92c:	00 00       	nop
 92e:	84 b3       	in	r24, 0x14	; 20
 930:	8f 7d       	andi	r24, 0xDF	; 223
 932:	84 bb       	out	0x14, r24	; 20
 934:	82 e4       	ldi	r24, 0x42	; 66
 936:	8a 95       	dec	r24
 938:	f1 f7       	brne	.-4      	; 0x936 <TM1637_clear+0x11c>
 93a:	00 c0       	rjmp	.+0      	; 0x93c <TM1637_clear+0x122>
 93c:	84 b3       	in	r24, 0x14	; 20
 93e:	8f 7e       	andi	r24, 0xEF	; 239
 940:	84 bb       	out	0x14, r24	; 20
 942:	82 e4       	ldi	r24, 0x42	; 66
 944:	8a 95       	dec	r24
 946:	f1 f7       	brne	.-4      	; 0x944 <TM1637_clear+0x12a>
 948:	00 c0       	rjmp	.+0      	; 0x94a <TM1637_clear+0x130>
 94a:	08 95       	ret

0000094c <_exit>:
 94c:	f8 94       	cli

0000094e <__stop_program>:
 94e:	ff cf       	rjmp	.-2      	; 0x94e <__stop_program>
