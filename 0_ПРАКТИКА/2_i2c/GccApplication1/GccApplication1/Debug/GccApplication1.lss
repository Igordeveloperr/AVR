
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000006d2  00000766  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006c  0080006c  00000772  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000772  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028e7  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000959  00000000  00000000  000031f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000114b  00000000  00000000  00003b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  00004c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c3  00000000  00000000  00004f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d67  00000000  00000000  0000554b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000072b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	ef c0       	rjmp	.+478    	; 0x1e2 <__vector_1>
   4:	28 c1       	rjmp	.+592    	; 0x256 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	ae c0       	rjmp	.+348    	; 0x166 <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 ed       	ldi	r30, 0xD2	; 210
  3a:	f6 e0       	ldi	r31, 0x06	; 6
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	af 36       	cpi	r26, 0x6F	; 111
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	26 d1       	rcall	.+588    	; 0x2a6 <main>
  5a:	39 c3       	rjmp	.+1650   	; 0x6ce <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <select_display_digit>:
	0b11101111
};

uint8_t select_display_digit(uint8_t digit)
{
	if (digit >= 0 && digit < 10)
  5e:	8a 30       	cpi	r24, 0x0A	; 10
  60:	30 f4       	brcc	.+12     	; 0x6e <select_display_digit+0x10>
	{
		return display_digit[digit];
  62:	e8 2f       	mov	r30, r24
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	e0 5a       	subi	r30, 0xA0	; 160
  68:	ff 4f       	sbci	r31, 0xFF	; 255
  6a:	80 81       	ld	r24, Z
  6c:	08 95       	ret
	}
	else
	{
		return TM1637_SPAT_BLANK;
  6e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
  70:	08 95       	ret

00000072 <wakeup_display>:

void wakeup_display()
{
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	1e d2       	rcall	.+1084   	; 0x4b2 <TM1637_turnOnAndSetBrightness>
  76:	08 95       	ret

00000078 <print_time_on_display>:
}

void print_time_on_display()
{
  78:	ff 92       	push	r15
  7a:	0f 93       	push	r16
  7c:	1f 93       	push	r17
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	28 97       	sbiw	r28, 0x08	; 8
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	f8 94       	cli
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	0f be       	out	0x3f, r0	; 63
  90:	cd bf       	out	0x3d, r28	; 61
	uint8_t d_time[] =
	{
		get_hour() / DIVIDER,
  92:	54 d0       	rcall	.+168    	; 0x13c <get_hour>
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
}

void print_time_on_display()
{
	uint8_t d_time[] =
  94:	1d ec       	ldi	r17, 0xCD	; 205
  96:	81 9f       	mul	r24, r17
  98:	81 2d       	mov	r24, r1
  9a:	11 24       	eor	r1, r1
  9c:	86 95       	lsr	r24
  9e:	86 95       	lsr	r24
  a0:	86 95       	lsr	r24
  a2:	89 83       	std	Y+1, r24	; 0x01
	{
		get_hour() / DIVIDER,
		get_hour() % DIVIDER,
  a4:	4b d0       	rcall	.+150    	; 0x13c <get_hour>
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
}

void print_time_on_display()
{
	uint8_t d_time[] =
  a6:	81 9f       	mul	r24, r17
  a8:	91 2d       	mov	r25, r1
  aa:	11 24       	eor	r1, r1
  ac:	96 95       	lsr	r25
  ae:	96 95       	lsr	r25
  b0:	96 95       	lsr	r25
  b2:	99 0f       	add	r25, r25
  b4:	29 2f       	mov	r18, r25
  b6:	22 0f       	add	r18, r18
  b8:	22 0f       	add	r18, r18
  ba:	92 0f       	add	r25, r18
  bc:	89 1b       	sub	r24, r25
  be:	8a 83       	std	Y+2, r24	; 0x02
	{
		get_hour() / DIVIDER,
		get_hour() % DIVIDER,
		get_min() / DIVIDER,
  c0:	40 d0       	rcall	.+128    	; 0x142 <get_min>
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
}

void print_time_on_display()
{
	uint8_t d_time[] =
  c2:	81 9f       	mul	r24, r17
  c4:	81 2d       	mov	r24, r1
  c6:	11 24       	eor	r1, r1
  c8:	86 95       	lsr	r24
  ca:	86 95       	lsr	r24
  cc:	86 95       	lsr	r24
  ce:	8b 83       	std	Y+3, r24	; 0x03
	{
		get_hour() / DIVIDER,
		get_hour() % DIVIDER,
		get_min() / DIVIDER,
		get_min() % DIVIDER
  d0:	38 d0       	rcall	.+112    	; 0x142 <get_min>
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
}

void print_time_on_display()
{
	uint8_t d_time[] =
  d2:	81 9f       	mul	r24, r17
  d4:	11 2d       	mov	r17, r1
  d6:	11 24       	eor	r1, r1
  d8:	16 95       	lsr	r17
  da:	16 95       	lsr	r17
  dc:	16 95       	lsr	r17
  de:	11 0f       	add	r17, r17
  e0:	91 2f       	mov	r25, r17
  e2:	99 0f       	add	r25, r25
  e4:	99 0f       	add	r25, r25
  e6:	19 0f       	add	r17, r25
  e8:	81 1b       	sub	r24, r17
  ea:	8c 83       	std	Y+4, r24	; 0x04
		get_hour() % DIVIDER,
		get_min() / DIVIDER,
		get_min() % DIVIDER
	};
	uint8_t out_time[TM1637_DIGITS_COUNT];
	for(uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
  ec:	f1 2c       	mov	r15, r1
  ee:	12 c0       	rjmp	.+36     	; 0x114 <print_time_on_display+0x9c>
	{
		out_time[i] = select_display_digit(d_time[i]);
  f0:	0f 2d       	mov	r16, r15
  f2:	10 e0       	ldi	r17, 0x00	; 0
  f4:	e1 e0       	ldi	r30, 0x01	; 1
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	ec 0f       	add	r30, r28
  fa:	fd 1f       	adc	r31, r29
  fc:	e0 0f       	add	r30, r16
  fe:	f1 1f       	adc	r31, r17
 100:	80 81       	ld	r24, Z
 102:	ad df       	rcall	.-166    	; 0x5e <select_display_digit>
 104:	e5 e0       	ldi	r30, 0x05	; 5
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	ec 0f       	add	r30, r28
 10a:	fd 1f       	adc	r31, r29
 10c:	e0 0f       	add	r30, r16
 10e:	f1 1f       	adc	r31, r17
 110:	80 83       	st	Z, r24
		get_hour() % DIVIDER,
		get_min() / DIVIDER,
		get_min() % DIVIDER
	};
	uint8_t out_time[TM1637_DIGITS_COUNT];
	for(uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
 112:	f3 94       	inc	r15
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	8f 15       	cp	r24, r15
 118:	58 f7       	brcc	.-42     	; 0xf0 <print_time_on_display+0x78>
	{
		out_time[i] = select_display_digit(d_time[i]);
	}
	TM1637_setSegments(out_time, TM1637_DIGITS_COUNT, START_POS);
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	64 e0       	ldi	r22, 0x04	; 4
 11e:	ce 01       	movw	r24, r28
 120:	05 96       	adiw	r24, 0x05	; 5
 122:	2e d2       	rcall	.+1116   	; 0x580 <TM1637_setSegments>
 124:	28 96       	adiw	r28, 0x08	; 8
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	f8 94       	cli
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	cd bf       	out	0x3d, r28	; 61
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	ff 90       	pop	r15
 13a:	08 95       	ret

0000013c <get_hour>:

/* секунды по значению */
uint8_t get_sec()
{
	return seconds;
}
 13c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hour>
 140:	08 95       	ret

00000142 <get_min>:
 142:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <minutes>
 146:	08 95       	ret

00000148 <activate_sleep_mode>:

/* реализаци€ сп€щего режима */
void activate_sleep_mode()
{
	if (interval >= MAX_INTERVAL)
 148:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 14c:	8a 30       	cpi	r24, 0x0A	; 10
 14e:	50 f0       	brcs	.+20     	; 0x164 <activate_sleep_mode+0x1c>
	{	
		TM1637_turnOff();
 150:	48 d1       	rcall	.+656    	; 0x3e2 <TM1637_turnOff>
		OCR2 = 1;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	83 bd       	out	0x23, r24	; 35
		/* жду сброс флагов */
		while (ASSR != ASSR_REG_REDY);
 156:	82 b5       	in	r24, 0x22	; 34
 158:	88 30       	cpi	r24, 0x08	; 8
 15a:	e9 f7       	brne	.-6      	; 0x156 <activate_sleep_mode+0xe>
		sleep_enable();
 15c:	85 b7       	in	r24, 0x35	; 53
 15e:	80 68       	ori	r24, 0x80	; 128
 160:	85 bf       	out	0x35, r24	; 53
		sleep_cpu();
 162:	88 95       	sleep
 164:	08 95       	ret

00000166 <__vector_4>:
	}
}

/* отсчет времени */
ISR(TIMER2_OVF_vect)
{
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	2f 93       	push	r18
 172:	3f 93       	push	r19
 174:	4f 93       	push	r20
 176:	5f 93       	push	r21
 178:	6f 93       	push	r22
 17a:	7f 93       	push	r23
 17c:	8f 93       	push	r24
 17e:	9f 93       	push	r25
 180:	af 93       	push	r26
 182:	bf 93       	push	r27
 184:	ef 93       	push	r30
 186:	ff 93       	push	r31
	TCNT2 = 0;
 188:	14 bc       	out	0x24, r1	; 36
	seconds += STEP;
 18a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <seconds>
 18e:	8e 5f       	subi	r24, 0xFE	; 254
 190:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <seconds>
	interval += STEP;
 194:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 198:	8e 5f       	subi	r24, 0xFE	; 254
 19a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	control_seconds(&seconds, &minutes);
 19e:	6a e6       	ldi	r22, 0x6A	; 106
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	8d e6       	ldi	r24, 0x6D	; 109
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	8f d0       	rcall	.+286    	; 0x2c6 <control_seconds>
	control_min(&minutes, &hour);
 1a8:	6b e6       	ldi	r22, 0x6B	; 107
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	8a e6       	ldi	r24, 0x6A	; 106
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	95 d0       	rcall	.+298    	; 0x2dc <control_min>
	control_hour(&seconds, &minutes, &hour);
 1b2:	4b e6       	ldi	r20, 0x6B	; 107
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	6a e6       	ldi	r22, 0x6A	; 106
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	8d e6       	ldi	r24, 0x6D	; 109
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	99 d0       	rcall	.+306    	; 0x2f2 <control_hour>
}
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	bf 91       	pop	r27
 1c6:	af 91       	pop	r26
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	7f 91       	pop	r23
 1ce:	6f 91       	pop	r22
 1d0:	5f 91       	pop	r21
 1d2:	4f 91       	pop	r20
 1d4:	3f 91       	pop	r19
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <__vector_1>:

/* выход из сна + метка когда кот ел */
ISR(INT0_vect)
{
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	4f 93       	push	r20
 1f2:	5f 93       	push	r21
 1f4:	6f 93       	push	r22
 1f6:	7f 93       	push	r23
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	af 93       	push	r26
 1fe:	bf 93       	push	r27
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
	sleep_disable();
 204:	85 b7       	in	r24, 0x35	; 53
 206:	8f 77       	andi	r24, 0x7F	; 127
 208:	85 bf       	out	0x35, r24	; 53
	control_seconds(&seconds, &minutes);
 20a:	6a e6       	ldi	r22, 0x6A	; 106
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	8d e6       	ldi	r24, 0x6D	; 109
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	59 d0       	rcall	.+178    	; 0x2c6 <control_seconds>
	control_min(&minutes, &hour);
 214:	6b e6       	ldi	r22, 0x6B	; 107
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	8a e6       	ldi	r24, 0x6A	; 106
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	5f d0       	rcall	.+190    	; 0x2dc <control_min>
	control_hour(&seconds, &minutes, &hour);
 21e:	4b e6       	ldi	r20, 0x6B	; 107
 220:	50 e0       	ldi	r21, 0x00	; 0
 222:	6a e6       	ldi	r22, 0x6A	; 106
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	8d e6       	ldi	r24, 0x6D	; 109
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	63 d0       	rcall	.+198    	; 0x2f2 <control_hour>
	interval = 0;
 22c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
	wakeup_display();
 230:	20 df       	rcall	.-448    	; 0x72 <wakeup_display>
	print_time_on_display();
 232:	22 df       	rcall	.-444    	; 0x78 <print_time_on_display>
}
 234:	ff 91       	pop	r31
 236:	ef 91       	pop	r30
 238:	bf 91       	pop	r27
 23a:	af 91       	pop	r26
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	7f 91       	pop	r23
 242:	6f 91       	pop	r22
 244:	5f 91       	pop	r21
 246:	4f 91       	pop	r20
 248:	3f 91       	pop	r19
 24a:	2f 91       	pop	r18
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <__vector_2>:

ISR(INT1_vect)
{
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
	/*_delay_us(1);
	lcd_wakeup();
	event_listener();
	interval = 0;*/
}
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <start_timer2_async>:

/* настройка Timer/Counter2 */
void start_timer2_async()
{
	ASSR |= (1 << AS2); // вклю асинхронный режим
 26a:	82 b5       	in	r24, 0x22	; 34
 26c:	88 60       	ori	r24, 0x08	; 8
 26e:	82 bd       	out	0x22, r24	; 34
	/* чищу регистры таймера от мусора */
	TCCR2 = 0;
 270:	15 bc       	out	0x25, r1	; 37
	OCR2 = 0;
 272:	13 bc       	out	0x23, r1	; 35
	TCNT2 = 0;
 274:	14 bc       	out	0x24, r1	; 36
	/* делитель частоты = 256 */
	TCCR2 |= (1 << CS22) | (1 << CS21);
 276:	85 b5       	in	r24, 0x25	; 37
 278:	86 60       	ori	r24, 0x06	; 6
 27a:	85 bd       	out	0x25, r24	; 37
	/* жду сброс флагов дл€ старта в асинхронном режиме */
	while (ASSR != ASSR_REG_REDY);
 27c:	82 b5       	in	r24, 0x22	; 34
 27e:	88 30       	cpi	r24, 0x08	; 8
 280:	e9 f7       	brne	.-6      	; 0x27c <start_timer2_async+0x12>
	/* чистим флаги прерываний */
	TIFR |= (1 << OCF2) | (1 << TOV2);
 282:	88 b7       	in	r24, 0x38	; 56
 284:	80 6c       	ori	r24, 0xC0	; 192
 286:	88 bf       	out	0x38, r24	; 56
	/* включаю прерывание по переполнению таймера */
	TIMSK |= (1 << TOIE2);
 288:	89 b7       	in	r24, 0x39	; 57
 28a:	80 64       	ori	r24, 0x40	; 64
 28c:	89 bf       	out	0x39, r24	; 57
 28e:	08 95       	ret

00000290 <setup_ext_interrapt>:
}

/* настройка внешних прерываний */
void setup_ext_interrapt()
{
	GICR |= (1 << INT0) | (1 << INT1);
 290:	8b b7       	in	r24, 0x3b	; 59
 292:	80 6c       	ori	r24, 0xC0	; 192
 294:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC11);
 296:	85 b7       	in	r24, 0x35	; 53
 298:	88 60       	ori	r24, 0x08	; 8
 29a:	85 bf       	out	0x35, r24	; 53
	DDRD = 0;
 29c:	11 ba       	out	0x11, r1	; 17
	PORTD |= (1 << INT0_PIN) | (1 << INT1_PIN) | (1 << MENU_BTN) | (1 << UP_BTN) | (1 << DOWN_BTN);
 29e:	82 b3       	in	r24, 0x12	; 18
 2a0:	8c 67       	ori	r24, 0x7C	; 124
 2a2:	82 bb       	out	0x12, r24	; 18
 2a4:	08 95       	ret

000002a6 <main>:
}

int main(void)
{
	ACSR |= (1 << ACD); // ќ“ Ћё„≈Ќ»≈ ј÷ѕ
 2a6:	88 b1       	in	r24, 0x08	; 8
 2a8:	80 68       	ori	r24, 0x80	; 128
 2aa:	88 b9       	out	0x08, r24	; 8
	start_timer2_async();
 2ac:	de df       	rcall	.-68     	; 0x26a <start_timer2_async>
	setup_ext_interrapt();
 2ae:	f0 df       	rcall	.-32     	; 0x290 <setup_ext_interrapt>
	sei();
 2b0:	78 94       	sei
	
	TM1637_init();
 2b2:	2e d0       	rcall	.+92     	; 0x310 <TM1637_init>
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	fd d0       	rcall	.+506    	; 0x4b2 <TM1637_turnOnAndSetBrightness>
	print_time_on_display();
 2b8:	df de       	rcall	.-578    	; 0x78 <print_time_on_display>
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 2ba:	85 b7       	in	r24, 0x35	; 53
 2bc:	8f 78       	andi	r24, 0x8F	; 143
 2be:	80 63       	ori	r24, 0x30	; 48
 2c0:	85 bf       	out	0x35, r24	; 53
	
	while(1)
	{
		activate_sleep_mode();
 2c2:	42 df       	rcall	.-380    	; 0x148 <activate_sleep_mode>
 2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <main+0x1c>

000002c6 <control_seconds>:
#include "main.h"

void control_seconds(uint8_t* seconds, uint8_t* minutes)
{
	if (*seconds >= SEC_OVF)
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 81       	ld	r18, Z
 2ca:	2c 33       	cpi	r18, 0x3C	; 60
 2cc:	30 f0       	brcs	.+12     	; 0x2da <control_seconds+0x14>
	{
		*minutes = *minutes + 1;
 2ce:	fb 01       	movw	r30, r22
 2d0:	20 81       	ld	r18, Z
 2d2:	2f 5f       	subi	r18, 0xFF	; 255
 2d4:	20 83       	st	Z, r18
		*seconds = 0;
 2d6:	fc 01       	movw	r30, r24
 2d8:	10 82       	st	Z, r1
 2da:	08 95       	ret

000002dc <control_min>:
	}
}

void control_min(uint8_t* minutes, uint8_t* hour)
{
	if (*minutes >= MIN_OVF)
 2dc:	fc 01       	movw	r30, r24
 2de:	20 81       	ld	r18, Z
 2e0:	2c 33       	cpi	r18, 0x3C	; 60
 2e2:	30 f0       	brcs	.+12     	; 0x2f0 <control_min+0x14>
	{
		*hour = *hour + 1;
 2e4:	fb 01       	movw	r30, r22
 2e6:	20 81       	ld	r18, Z
 2e8:	2f 5f       	subi	r18, 0xFF	; 255
 2ea:	20 83       	st	Z, r18
		*minutes = 0;
 2ec:	fc 01       	movw	r30, r24
 2ee:	10 82       	st	Z, r1
 2f0:	08 95       	ret

000002f2 <control_hour>:
	}
}

void control_hour(uint8_t* seconds, uint8_t* minutes, uint8_t* hour)
{
 2f2:	fc 01       	movw	r30, r24
	if (*hour == HOUR_OVF && *minutes >= MIN_OVF)
 2f4:	da 01       	movw	r26, r20
 2f6:	9c 91       	ld	r25, X
 2f8:	97 31       	cpi	r25, 0x17	; 23
 2fa:	49 f4       	brne	.+18     	; 0x30e <control_hour+0x1c>
 2fc:	db 01       	movw	r26, r22
 2fe:	8c 91       	ld	r24, X
 300:	8c 33       	cpi	r24, 0x3C	; 60
 302:	28 f0       	brcs	.+10     	; 0x30e <control_hour+0x1c>
	{
		*hour = 0;
 304:	da 01       	movw	r26, r20
 306:	1c 92       	st	X, r1
		*minutes = 0;
 308:	db 01       	movw	r26, r22
 30a:	1c 92       	st	X, r1
		*seconds = 0;
 30c:	10 82       	st	Z, r1
 30e:	08 95       	ret

00000310 <TM1637_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 310:	84 b3       	in	r24, 0x14	; 20
 312:	8f 7e       	andi	r24, 0xEF	; 239
 314:	84 bb       	out	0x14, r24	; 20
 316:	84 b3       	in	r24, 0x14	; 20
 318:	8f 7d       	andi	r24, 0xDF	; 223
 31a:	84 bb       	out	0x14, r24	; 20
 31c:	85 b3       	in	r24, 0x15	; 21
 31e:	8f 7c       	andi	r24, 0xCF	; 207
 320:	85 bb       	out	0x15, r24	; 21
 322:	84 b3       	in	r24, 0x14	; 20
 324:	80 61       	ori	r24, 0x10	; 16
 326:	84 bb       	out	0x14, r24	; 20
 328:	82 e4       	ldi	r24, 0x42	; 66
 32a:	8a 95       	dec	r24
 32c:	f1 f7       	brne	.-4      	; 0x32a <TM1637_init+0x1a>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <TM1637_init+0x20>
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	20 e4       	ldi	r18, 0x40	; 64
 334:	1d c0       	rjmp	.+58     	; 0x370 <TM1637_init+0x60>
 336:	84 b3       	in	r24, 0x14	; 20
 338:	80 62       	ori	r24, 0x20	; 32
 33a:	84 bb       	out	0x14, r24	; 20
 33c:	81 e2       	ldi	r24, 0x21	; 33
 33e:	8a 95       	dec	r24
 340:	f1 f7       	brne	.-4      	; 0x33e <TM1637_init+0x2e>
 342:	00 00       	nop
 344:	20 ff       	sbrs	r18, 0
 346:	04 c0       	rjmp	.+8      	; 0x350 <TM1637_init+0x40>
 348:	84 b3       	in	r24, 0x14	; 20
 34a:	8f 7e       	andi	r24, 0xEF	; 239
 34c:	84 bb       	out	0x14, r24	; 20
 34e:	03 c0       	rjmp	.+6      	; 0x356 <TM1637_init+0x46>
 350:	84 b3       	in	r24, 0x14	; 20
 352:	80 61       	ori	r24, 0x10	; 16
 354:	84 bb       	out	0x14, r24	; 20
 356:	81 e2       	ldi	r24, 0x21	; 33
 358:	8a 95       	dec	r24
 35a:	f1 f7       	brne	.-4      	; 0x358 <TM1637_init+0x48>
 35c:	00 00       	nop
 35e:	84 b3       	in	r24, 0x14	; 20
 360:	8f 7d       	andi	r24, 0xDF	; 223
 362:	84 bb       	out	0x14, r24	; 20
 364:	82 e4       	ldi	r24, 0x42	; 66
 366:	8a 95       	dec	r24
 368:	f1 f7       	brne	.-4      	; 0x366 <TM1637_init+0x56>
 36a:	00 c0       	rjmp	.+0      	; 0x36c <TM1637_init+0x5c>
 36c:	26 95       	lsr	r18
 36e:	9f 5f       	subi	r25, 0xFF	; 255
 370:	98 30       	cpi	r25, 0x08	; 8
 372:	08 f3       	brcs	.-62     	; 0x336 <TM1637_init+0x26>
 374:	84 b3       	in	r24, 0x14	; 20
 376:	80 62       	ori	r24, 0x20	; 32
 378:	84 bb       	out	0x14, r24	; 20
 37a:	84 b3       	in	r24, 0x14	; 20
 37c:	8f 7e       	andi	r24, 0xEF	; 239
 37e:	84 bb       	out	0x14, r24	; 20
 380:	82 e4       	ldi	r24, 0x42	; 66
 382:	8a 95       	dec	r24
 384:	f1 f7       	brne	.-4      	; 0x382 <TM1637_init+0x72>
 386:	00 c0       	rjmp	.+0      	; 0x388 <TM1637_init+0x78>
 388:	84 b3       	in	r24, 0x14	; 20
 38a:	8f 7d       	andi	r24, 0xDF	; 223
 38c:	84 bb       	out	0x14, r24	; 20
 38e:	81 e2       	ldi	r24, 0x21	; 33
 390:	8a 95       	dec	r24
 392:	f1 f7       	brne	.-4      	; 0x390 <TM1637_init+0x80>
 394:	00 00       	nop
 396:	9c 99       	sbic	0x13, 4	; 19
 398:	03 c0       	rjmp	.+6      	; 0x3a0 <TM1637_init+0x90>
 39a:	84 b3       	in	r24, 0x14	; 20
 39c:	80 61       	ori	r24, 0x10	; 16
 39e:	84 bb       	out	0x14, r24	; 20
 3a0:	81 e2       	ldi	r24, 0x21	; 33
 3a2:	8a 95       	dec	r24
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <TM1637_init+0x92>
 3a6:	00 00       	nop
 3a8:	84 b3       	in	r24, 0x14	; 20
 3aa:	80 62       	ori	r24, 0x20	; 32
 3ac:	84 bb       	out	0x14, r24	; 20
 3ae:	81 e2       	ldi	r24, 0x21	; 33
 3b0:	8a 95       	dec	r24
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <TM1637_init+0xa0>
 3b4:	00 00       	nop
 3b6:	84 b3       	in	r24, 0x14	; 20
 3b8:	80 61       	ori	r24, 0x10	; 16
 3ba:	84 bb       	out	0x14, r24	; 20
 3bc:	81 e2       	ldi	r24, 0x21	; 33
 3be:	8a 95       	dec	r24
 3c0:	f1 f7       	brne	.-4      	; 0x3be <TM1637_init+0xae>
 3c2:	00 00       	nop
 3c4:	84 b3       	in	r24, 0x14	; 20
 3c6:	8f 7d       	andi	r24, 0xDF	; 223
 3c8:	84 bb       	out	0x14, r24	; 20
 3ca:	82 e4       	ldi	r24, 0x42	; 66
 3cc:	8a 95       	dec	r24
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <TM1637_init+0xbc>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <TM1637_init+0xc2>
 3d2:	84 b3       	in	r24, 0x14	; 20
 3d4:	8f 7e       	andi	r24, 0xEF	; 239
 3d6:	84 bb       	out	0x14, r24	; 20
 3d8:	82 e4       	ldi	r24, 0x42	; 66
 3da:	8a 95       	dec	r24
 3dc:	f1 f7       	brne	.-4      	; 0x3da <TM1637_init+0xca>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <TM1637_init+0xd0>
 3e0:	08 95       	ret

000003e2 <TM1637_turnOff>:
 3e2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <TM1637_brightness_reg>
 3e6:	87 70       	andi	r24, 0x07	; 7
 3e8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <TM1637_brightness_reg>
 3ec:	84 b3       	in	r24, 0x14	; 20
 3ee:	80 61       	ori	r24, 0x10	; 16
 3f0:	84 bb       	out	0x14, r24	; 20
 3f2:	82 e4       	ldi	r24, 0x42	; 66
 3f4:	8a 95       	dec	r24
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <TM1637_turnOff+0x12>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <TM1637_turnOff+0x18>
 3fa:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <TM1637_brightness_reg>
 3fe:	9f 70       	andi	r25, 0x0F	; 15
 400:	90 68       	ori	r25, 0x80	; 128
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	1d c0       	rjmp	.+58     	; 0x440 <__DATA_REGION_LENGTH__+0x40>
 406:	84 b3       	in	r24, 0x14	; 20
 408:	80 62       	ori	r24, 0x20	; 32
 40a:	84 bb       	out	0x14, r24	; 20
 40c:	81 e2       	ldi	r24, 0x21	; 33
 40e:	8a 95       	dec	r24
 410:	f1 f7       	brne	.-4      	; 0x40e <__DATA_REGION_LENGTH__+0xe>
 412:	00 00       	nop
 414:	90 ff       	sbrs	r25, 0
 416:	04 c0       	rjmp	.+8      	; 0x420 <__DATA_REGION_LENGTH__+0x20>
 418:	84 b3       	in	r24, 0x14	; 20
 41a:	8f 7e       	andi	r24, 0xEF	; 239
 41c:	84 bb       	out	0x14, r24	; 20
 41e:	03 c0       	rjmp	.+6      	; 0x426 <__DATA_REGION_LENGTH__+0x26>
 420:	84 b3       	in	r24, 0x14	; 20
 422:	80 61       	ori	r24, 0x10	; 16
 424:	84 bb       	out	0x14, r24	; 20
 426:	81 e2       	ldi	r24, 0x21	; 33
 428:	8a 95       	dec	r24
 42a:	f1 f7       	brne	.-4      	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 42c:	00 00       	nop
 42e:	84 b3       	in	r24, 0x14	; 20
 430:	8f 7d       	andi	r24, 0xDF	; 223
 432:	84 bb       	out	0x14, r24	; 20
 434:	82 e4       	ldi	r24, 0x42	; 66
 436:	8a 95       	dec	r24
 438:	f1 f7       	brne	.-4      	; 0x436 <__DATA_REGION_LENGTH__+0x36>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
 43c:	96 95       	lsr	r25
 43e:	2f 5f       	subi	r18, 0xFF	; 255
 440:	28 30       	cpi	r18, 0x08	; 8
 442:	08 f3       	brcs	.-62     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
 444:	84 b3       	in	r24, 0x14	; 20
 446:	80 62       	ori	r24, 0x20	; 32
 448:	84 bb       	out	0x14, r24	; 20
 44a:	84 b3       	in	r24, 0x14	; 20
 44c:	8f 7e       	andi	r24, 0xEF	; 239
 44e:	84 bb       	out	0x14, r24	; 20
 450:	82 e4       	ldi	r24, 0x42	; 66
 452:	8a 95       	dec	r24
 454:	f1 f7       	brne	.-4      	; 0x452 <__DATA_REGION_LENGTH__+0x52>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__DATA_REGION_LENGTH__+0x58>
 458:	84 b3       	in	r24, 0x14	; 20
 45a:	8f 7d       	andi	r24, 0xDF	; 223
 45c:	84 bb       	out	0x14, r24	; 20
 45e:	81 e2       	ldi	r24, 0x21	; 33
 460:	8a 95       	dec	r24
 462:	f1 f7       	brne	.-4      	; 0x460 <__stack+0x1>
 464:	00 00       	nop
 466:	9c 99       	sbic	0x13, 4	; 19
 468:	03 c0       	rjmp	.+6      	; 0x470 <__stack+0x11>
 46a:	84 b3       	in	r24, 0x14	; 20
 46c:	80 61       	ori	r24, 0x10	; 16
 46e:	84 bb       	out	0x14, r24	; 20
 470:	81 e2       	ldi	r24, 0x21	; 33
 472:	8a 95       	dec	r24
 474:	f1 f7       	brne	.-4      	; 0x472 <__stack+0x13>
 476:	00 00       	nop
 478:	84 b3       	in	r24, 0x14	; 20
 47a:	80 62       	ori	r24, 0x20	; 32
 47c:	84 bb       	out	0x14, r24	; 20
 47e:	81 e2       	ldi	r24, 0x21	; 33
 480:	8a 95       	dec	r24
 482:	f1 f7       	brne	.-4      	; 0x480 <__stack+0x21>
 484:	00 00       	nop
 486:	84 b3       	in	r24, 0x14	; 20
 488:	80 61       	ori	r24, 0x10	; 16
 48a:	84 bb       	out	0x14, r24	; 20
 48c:	81 e2       	ldi	r24, 0x21	; 33
 48e:	8a 95       	dec	r24
 490:	f1 f7       	brne	.-4      	; 0x48e <__stack+0x2f>
 492:	00 00       	nop
 494:	84 b3       	in	r24, 0x14	; 20
 496:	8f 7d       	andi	r24, 0xDF	; 223
 498:	84 bb       	out	0x14, r24	; 20
 49a:	82 e4       	ldi	r24, 0x42	; 66
 49c:	8a 95       	dec	r24
 49e:	f1 f7       	brne	.-4      	; 0x49c <__stack+0x3d>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <__stack+0x43>
 4a2:	84 b3       	in	r24, 0x14	; 20
 4a4:	8f 7e       	andi	r24, 0xEF	; 239
 4a6:	84 bb       	out	0x14, r24	; 20
 4a8:	82 e4       	ldi	r24, 0x42	; 66
 4aa:	8a 95       	dec	r24
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <__stack+0x4b>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <__stack+0x51>
 4b0:	08 95       	ret

000004b2 <TM1637_turnOnAndSetBrightness>:
  TM1637_brightness_reg = (TM1637_brightness_reg & TM1637_MASK_ON_OFF) | (brightness & TM1637_MASK_BRIGHTNESS);
  TM1637_writeBrightnessReg();
}

void TM1637_turnOnAndSetBrightness(uint8_t brightness) {
  TM1637_brightness_reg = TM1637_MASK_ON_OFF | (brightness & TM1637_MASK_BRIGHTNESS);
 4b2:	87 70       	andi	r24, 0x07	; 7
 4b4:	88 60       	ori	r24, 0x08	; 8
 4b6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <TM1637_brightness_reg>
  TM1637_COMM_STOP;
}

static inline void TM1637_writeBrightnessReg(void) {
  // Write TM1637_CMD_SET_BRIGHTNESS + TM1637_brightness_reg
  TM1637_COMM_START;
 4ba:	84 b3       	in	r24, 0x14	; 20
 4bc:	80 61       	ori	r24, 0x10	; 16
 4be:	84 bb       	out	0x14, r24	; 20
 4c0:	82 e4       	ldi	r24, 0x42	; 66
 4c2:	8a 95       	dec	r24
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <TM1637_turnOnAndSetBrightness+0x10>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <TM1637_turnOnAndSetBrightness+0x16>
  TM1637_writeByte(TM1637_CMD_SET_BRIGHTNESS | (TM1637_brightness_reg & TM1637_MASK_BRIGHTNESS_REG));
 4c8:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <TM1637_brightness_reg>
 4cc:	9f 70       	andi	r25, 0x0F	; 15
 4ce:	90 68       	ori	r25, 0x80	; 128
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	1d c0       	rjmp	.+58     	; 0x50e <TM1637_turnOnAndSetBrightness+0x5c>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 4d4:	84 b3       	in	r24, 0x14	; 20
 4d6:	80 62       	ori	r24, 0x20	; 32
 4d8:	84 bb       	out	0x14, r24	; 20
 4da:	81 e2       	ldi	r24, 0x21	; 33
 4dc:	8a 95       	dec	r24
 4de:	f1 f7       	brne	.-4      	; 0x4dc <TM1637_turnOnAndSetBrightness+0x2a>
 4e0:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 4e2:	90 ff       	sbrs	r25, 0
 4e4:	04 c0       	rjmp	.+8      	; 0x4ee <TM1637_turnOnAndSetBrightness+0x3c>
 4e6:	84 b3       	in	r24, 0x14	; 20
 4e8:	8f 7e       	andi	r24, 0xEF	; 239
 4ea:	84 bb       	out	0x14, r24	; 20
 4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <TM1637_turnOnAndSetBrightness+0x42>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 4ee:	84 b3       	in	r24, 0x14	; 20
 4f0:	80 61       	ori	r24, 0x10	; 16
 4f2:	84 bb       	out	0x14, r24	; 20
 4f4:	81 e2       	ldi	r24, 0x21	; 33
 4f6:	8a 95       	dec	r24
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <TM1637_turnOnAndSetBrightness+0x44>
 4fa:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 4fc:	84 b3       	in	r24, 0x14	; 20
 4fe:	8f 7d       	andi	r24, 0xDF	; 223
 500:	84 bb       	out	0x14, r24	; 20
 502:	82 e4       	ldi	r24, 0x42	; 66
 504:	8a 95       	dec	r24
 506:	f1 f7       	brne	.-4      	; 0x504 <TM1637_turnOnAndSetBrightness+0x52>
 508:	00 c0       	rjmp	.+0      	; 0x50a <TM1637_turnOnAndSetBrightness+0x58>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 50a:	96 95       	lsr	r25
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 50c:	2f 5f       	subi	r18, 0xFF	; 255
 50e:	28 30       	cpi	r18, 0x08	; 8
 510:	08 f3       	brcs	.-62     	; 0x4d4 <TM1637_turnOnAndSetBrightness+0x22>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 512:	84 b3       	in	r24, 0x14	; 20
 514:	80 62       	ori	r24, 0x20	; 32
 516:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 518:	84 b3       	in	r24, 0x14	; 20
 51a:	8f 7e       	andi	r24, 0xEF	; 239
 51c:	84 bb       	out	0x14, r24	; 20
 51e:	82 e4       	ldi	r24, 0x42	; 66
 520:	8a 95       	dec	r24
 522:	f1 f7       	brne	.-4      	; 0x520 <TM1637_turnOnAndSetBrightness+0x6e>
 524:	00 c0       	rjmp	.+0      	; 0x526 <TM1637_turnOnAndSetBrightness+0x74>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 526:	84 b3       	in	r24, 0x14	; 20
 528:	8f 7d       	andi	r24, 0xDF	; 223
 52a:	84 bb       	out	0x14, r24	; 20
 52c:	81 e2       	ldi	r24, 0x21	; 33
 52e:	8a 95       	dec	r24
 530:	f1 f7       	brne	.-4      	; 0x52e <TM1637_turnOnAndSetBrightness+0x7c>
 532:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 534:	9c 99       	sbic	0x13, 4	; 19
 536:	03 c0       	rjmp	.+6      	; 0x53e <TM1637_turnOnAndSetBrightness+0x8c>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 538:	84 b3       	in	r24, 0x14	; 20
 53a:	80 61       	ori	r24, 0x10	; 16
 53c:	84 bb       	out	0x14, r24	; 20
 53e:	81 e2       	ldi	r24, 0x21	; 33
 540:	8a 95       	dec	r24
 542:	f1 f7       	brne	.-4      	; 0x540 <TM1637_turnOnAndSetBrightness+0x8e>
 544:	00 00       	nop

static inline void TM1637_writeBrightnessReg(void) {
  // Write TM1637_CMD_SET_BRIGHTNESS + TM1637_brightness_reg
  TM1637_COMM_START;
  TM1637_writeByte(TM1637_CMD_SET_BRIGHTNESS | (TM1637_brightness_reg & TM1637_MASK_BRIGHTNESS_REG));
  TM1637_COMM_STOP;
 546:	84 b3       	in	r24, 0x14	; 20
 548:	80 62       	ori	r24, 0x20	; 32
 54a:	84 bb       	out	0x14, r24	; 20
 54c:	81 e2       	ldi	r24, 0x21	; 33
 54e:	8a 95       	dec	r24
 550:	f1 f7       	brne	.-4      	; 0x54e <TM1637_turnOnAndSetBrightness+0x9c>
 552:	00 00       	nop
 554:	84 b3       	in	r24, 0x14	; 20
 556:	80 61       	ori	r24, 0x10	; 16
 558:	84 bb       	out	0x14, r24	; 20
 55a:	81 e2       	ldi	r24, 0x21	; 33
 55c:	8a 95       	dec	r24
 55e:	f1 f7       	brne	.-4      	; 0x55c <TM1637_turnOnAndSetBrightness+0xaa>
 560:	00 00       	nop
 562:	84 b3       	in	r24, 0x14	; 20
 564:	8f 7d       	andi	r24, 0xDF	; 223
 566:	84 bb       	out	0x14, r24	; 20
 568:	82 e4       	ldi	r24, 0x42	; 66
 56a:	8a 95       	dec	r24
 56c:	f1 f7       	brne	.-4      	; 0x56a <TM1637_turnOnAndSetBrightness+0xb8>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <TM1637_turnOnAndSetBrightness+0xbe>
 570:	84 b3       	in	r24, 0x14	; 20
 572:	8f 7e       	andi	r24, 0xEF	; 239
 574:	84 bb       	out	0x14, r24	; 20
 576:	82 e4       	ldi	r24, 0x42	; 66
 578:	8a 95       	dec	r24
 57a:	f1 f7       	brne	.-4      	; 0x578 <TM1637_turnOnAndSetBrightness+0xc6>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <TM1637_turnOnAndSetBrightness+0xcc>
 57e:	08 95       	ret

00000580 <TM1637_setSegments>:
void TM1637_turnOnAndSetBrightness(uint8_t brightness) {
  TM1637_brightness_reg = TM1637_MASK_ON_OFF | (brightness & TM1637_MASK_BRIGHTNESS);
  TM1637_writeBrightnessReg();
}

void TM1637_setSegments(const uint8_t segments[], uint8_t length, uint8_t pos) {
 580:	fc 01       	movw	r30, r24
  TM1637_COMM_START;
 582:	84 b3       	in	r24, 0x14	; 20
 584:	80 61       	ori	r24, 0x10	; 16
 586:	84 bb       	out	0x14, r24	; 20
 588:	82 e4       	ldi	r24, 0x42	; 66
 58a:	8a 95       	dec	r24
 58c:	f1 f7       	brne	.-4      	; 0x58a <TM1637_setSegments+0xa>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <TM1637_setSegments+0x10>
  // Write TM1637_CMD_SET_DATA + first digit address
  TM1637_writeByte(TM1637_CMD_SET_DATA | (pos & TM1637_MASK_POS));
 590:	43 70       	andi	r20, 0x03	; 3
 592:	40 6c       	ori	r20, 0xC0	; 192
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	1d c0       	rjmp	.+58     	; 0x5d2 <TM1637_setSegments+0x52>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 598:	84 b3       	in	r24, 0x14	; 20
 59a:	80 62       	ori	r24, 0x20	; 32
 59c:	84 bb       	out	0x14, r24	; 20
 59e:	81 e2       	ldi	r24, 0x21	; 33
 5a0:	8a 95       	dec	r24
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <TM1637_setSegments+0x20>
 5a4:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 5a6:	40 ff       	sbrs	r20, 0
 5a8:	04 c0       	rjmp	.+8      	; 0x5b2 <TM1637_setSegments+0x32>
 5aa:	84 b3       	in	r24, 0x14	; 20
 5ac:	8f 7e       	andi	r24, 0xEF	; 239
 5ae:	84 bb       	out	0x14, r24	; 20
 5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <TM1637_setSegments+0x38>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 5b2:	84 b3       	in	r24, 0x14	; 20
 5b4:	80 61       	ori	r24, 0x10	; 16
 5b6:	84 bb       	out	0x14, r24	; 20
 5b8:	81 e2       	ldi	r24, 0x21	; 33
 5ba:	8a 95       	dec	r24
 5bc:	f1 f7       	brne	.-4      	; 0x5ba <TM1637_setSegments+0x3a>
 5be:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 5c0:	84 b3       	in	r24, 0x14	; 20
 5c2:	8f 7d       	andi	r24, 0xDF	; 223
 5c4:	84 bb       	out	0x14, r24	; 20
 5c6:	82 e4       	ldi	r24, 0x42	; 66
 5c8:	8a 95       	dec	r24
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <TM1637_setSegments+0x48>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <TM1637_setSegments+0x4e>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 5ce:	46 95       	lsr	r20
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 5d0:	9f 5f       	subi	r25, 0xFF	; 255
 5d2:	98 30       	cpi	r25, 0x08	; 8
 5d4:	08 f3       	brcs	.-62     	; 0x598 <TM1637_setSegments+0x18>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 5d6:	84 b3       	in	r24, 0x14	; 20
 5d8:	80 62       	ori	r24, 0x20	; 32
 5da:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 5dc:	84 b3       	in	r24, 0x14	; 20
 5de:	8f 7e       	andi	r24, 0xEF	; 239
 5e0:	84 bb       	out	0x14, r24	; 20
 5e2:	82 e4       	ldi	r24, 0x42	; 66
 5e4:	8a 95       	dec	r24
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <TM1637_setSegments+0x64>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <TM1637_setSegments+0x6a>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 5ea:	84 b3       	in	r24, 0x14	; 20
 5ec:	8f 7d       	andi	r24, 0xDF	; 223
 5ee:	84 bb       	out	0x14, r24	; 20
 5f0:	81 e2       	ldi	r24, 0x21	; 33
 5f2:	8a 95       	dec	r24
 5f4:	f1 f7       	brne	.-4      	; 0x5f2 <TM1637_setSegments+0x72>
 5f6:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 5f8:	9c 99       	sbic	0x13, 4	; 19
 5fa:	03 c0       	rjmp	.+6      	; 0x602 <TM1637_setSegments+0x82>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 5fc:	84 b3       	in	r24, 0x14	; 20
 5fe:	80 61       	ori	r24, 0x10	; 16
 600:	84 bb       	out	0x14, r24	; 20
 602:	81 e2       	ldi	r24, 0x21	; 33
 604:	8a 95       	dec	r24
 606:	f1 f7       	brne	.-4      	; 0x604 <TM1637_setSegments+0x84>
 608:	00 00       	nop
void TM1637_setSegments(const uint8_t segments[], uint8_t length, uint8_t pos) {
  TM1637_COMM_START;
  // Write TM1637_CMD_SET_DATA + first digit address
  TM1637_writeByte(TM1637_CMD_SET_DATA | (pos & TM1637_MASK_POS));
  // Write data bytes
  for (uint8_t i = 0; i < length; i++)
 60a:	40 e0       	ldi	r20, 0x00	; 0
 60c:	40 c0       	rjmp	.+128    	; 0x68e <TM1637_setSegments+0x10e>
    TM1637_writeByte(segments[i]);
 60e:	df 01       	movw	r26, r30
 610:	a4 0f       	add	r26, r20
 612:	b1 1d       	adc	r27, r1
 614:	3c 91       	ld	r19, X
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 616:	20 e0       	ldi	r18, 0x00	; 0
 618:	1d c0       	rjmp	.+58     	; 0x654 <TM1637_setSegments+0xd4>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 61a:	94 b3       	in	r25, 0x14	; 20
 61c:	90 62       	ori	r25, 0x20	; 32
 61e:	94 bb       	out	0x14, r25	; 20
 620:	81 e2       	ldi	r24, 0x21	; 33
 622:	8a 95       	dec	r24
 624:	f1 f7       	brne	.-4      	; 0x622 <TM1637_setSegments+0xa2>
 626:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 628:	30 ff       	sbrs	r19, 0
 62a:	04 c0       	rjmp	.+8      	; 0x634 <TM1637_setSegments+0xb4>
 62c:	94 b3       	in	r25, 0x14	; 20
 62e:	9f 7e       	andi	r25, 0xEF	; 239
 630:	94 bb       	out	0x14, r25	; 20
 632:	03 c0       	rjmp	.+6      	; 0x63a <TM1637_setSegments+0xba>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 634:	94 b3       	in	r25, 0x14	; 20
 636:	90 61       	ori	r25, 0x10	; 16
 638:	94 bb       	out	0x14, r25	; 20
 63a:	81 e2       	ldi	r24, 0x21	; 33
 63c:	8a 95       	dec	r24
 63e:	f1 f7       	brne	.-4      	; 0x63c <TM1637_setSegments+0xbc>
 640:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 642:	94 b3       	in	r25, 0x14	; 20
 644:	9f 7d       	andi	r25, 0xDF	; 223
 646:	94 bb       	out	0x14, r25	; 20
 648:	82 e4       	ldi	r24, 0x42	; 66
 64a:	8a 95       	dec	r24
 64c:	f1 f7       	brne	.-4      	; 0x64a <TM1637_setSegments+0xca>
 64e:	00 c0       	rjmp	.+0      	; 0x650 <TM1637_setSegments+0xd0>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 650:	36 95       	lsr	r19
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 652:	2f 5f       	subi	r18, 0xFF	; 255
 654:	28 30       	cpi	r18, 0x08	; 8
 656:	08 f3       	brcs	.-62     	; 0x61a <TM1637_setSegments+0x9a>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 658:	84 b3       	in	r24, 0x14	; 20
 65a:	80 62       	ori	r24, 0x20	; 32
 65c:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 65e:	84 b3       	in	r24, 0x14	; 20
 660:	8f 7e       	andi	r24, 0xEF	; 239
 662:	84 bb       	out	0x14, r24	; 20
 664:	82 e4       	ldi	r24, 0x42	; 66
 666:	8a 95       	dec	r24
 668:	f1 f7       	brne	.-4      	; 0x666 <TM1637_setSegments+0xe6>
 66a:	00 c0       	rjmp	.+0      	; 0x66c <TM1637_setSegments+0xec>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 66c:	94 b3       	in	r25, 0x14	; 20
 66e:	9f 7d       	andi	r25, 0xDF	; 223
 670:	94 bb       	out	0x14, r25	; 20
 672:	81 e2       	ldi	r24, 0x21	; 33
 674:	8a 95       	dec	r24
 676:	f1 f7       	brne	.-4      	; 0x674 <TM1637_setSegments+0xf4>
 678:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 67a:	9c 99       	sbic	0x13, 4	; 19
 67c:	03 c0       	rjmp	.+6      	; 0x684 <TM1637_setSegments+0x104>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 67e:	84 b3       	in	r24, 0x14	; 20
 680:	80 61       	ori	r24, 0x10	; 16
 682:	84 bb       	out	0x14, r24	; 20
 684:	81 e2       	ldi	r24, 0x21	; 33
 686:	8a 95       	dec	r24
 688:	f1 f7       	brne	.-4      	; 0x686 <TM1637_setSegments+0x106>
 68a:	00 00       	nop
void TM1637_setSegments(const uint8_t segments[], uint8_t length, uint8_t pos) {
  TM1637_COMM_START;
  // Write TM1637_CMD_SET_DATA + first digit address
  TM1637_writeByte(TM1637_CMD_SET_DATA | (pos & TM1637_MASK_POS));
  // Write data bytes
  for (uint8_t i = 0; i < length; i++)
 68c:	4f 5f       	subi	r20, 0xFF	; 255
 68e:	46 17       	cp	r20, r22
 690:	08 f4       	brcc	.+2      	; 0x694 <TM1637_setSegments+0x114>
 692:	bd cf       	rjmp	.-134    	; 0x60e <TM1637_setSegments+0x8e>
    TM1637_writeByte(segments[i]);
  TM1637_COMM_STOP;
 694:	84 b3       	in	r24, 0x14	; 20
 696:	80 62       	ori	r24, 0x20	; 32
 698:	84 bb       	out	0x14, r24	; 20
 69a:	81 e2       	ldi	r24, 0x21	; 33
 69c:	8a 95       	dec	r24
 69e:	f1 f7       	brne	.-4      	; 0x69c <TM1637_setSegments+0x11c>
 6a0:	00 00       	nop
 6a2:	84 b3       	in	r24, 0x14	; 20
 6a4:	80 61       	ori	r24, 0x10	; 16
 6a6:	84 bb       	out	0x14, r24	; 20
 6a8:	81 e2       	ldi	r24, 0x21	; 33
 6aa:	8a 95       	dec	r24
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <TM1637_setSegments+0x12a>
 6ae:	00 00       	nop
 6b0:	84 b3       	in	r24, 0x14	; 20
 6b2:	8f 7d       	andi	r24, 0xDF	; 223
 6b4:	84 bb       	out	0x14, r24	; 20
 6b6:	82 e4       	ldi	r24, 0x42	; 66
 6b8:	8a 95       	dec	r24
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <TM1637_setSegments+0x138>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <TM1637_setSegments+0x13e>
 6be:	84 b3       	in	r24, 0x14	; 20
 6c0:	8f 7e       	andi	r24, 0xEF	; 239
 6c2:	84 bb       	out	0x14, r24	; 20
 6c4:	82 e4       	ldi	r24, 0x42	; 66
 6c6:	8a 95       	dec	r24
 6c8:	f1 f7       	brne	.-4      	; 0x6c6 <TM1637_setSegments+0x146>
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <TM1637_setSegments+0x14c>
 6cc:	08 95       	ret

000006ce <_exit>:
 6ce:	f8 94       	cli

000006d0 <__stop_program>:
 6d0:	ff cf       	rjmp	.-2      	; 0x6d0 <__stop_program>
