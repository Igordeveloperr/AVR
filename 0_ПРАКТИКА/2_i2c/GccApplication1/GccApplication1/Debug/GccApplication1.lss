
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000932  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000932  000009c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006c  0080006c  000009d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c69  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b48  00000000  00000000  00003811  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001472  00000000  00000000  00004359  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  000057cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000658  00000000  00000000  00005b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fec  00000000  00000000  000061a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000818c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	dd c0       	rjmp	.+442    	; 0x1be <__vector_1>
   4:	11 c1       	rjmp	.+546    	; 0x228 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	98 c0       	rjmp	.+304    	; 0x13a <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e3       	ldi	r30, 0x32	; 50
  3a:	f9 e0       	ldi	r31, 0x09	; 9
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 37       	cpi	r26, 0x74	; 116
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	40 d1       	rcall	.+640    	; 0x2da <main>
  5a:	69 c4       	rjmp	.+2258   	; 0x92e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <select_display_digit>:
	0b11101111
};

uint8_t select_display_digit(uint8_t digit)
{
	if (digit >= 0 && digit < 10)
  5e:	8a 30       	cpi	r24, 0x0A	; 10
  60:	30 f4       	brcc	.+12     	; 0x6e <select_display_digit+0x10>
	{
		return display_digit[digit];
  62:	e8 2f       	mov	r30, r24
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	e0 5a       	subi	r30, 0xA0	; 160
  68:	ff 4f       	sbci	r31, 0xFF	; 255
  6a:	80 81       	ld	r24, Z
  6c:	08 95       	ret
	}
	else
	{
		return TM1637_SPAT_BLANK;
  6e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
  70:	08 95       	ret

00000072 <wakeup_display>:

void wakeup_display()
{
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	b5 d2       	rcall	.+1386   	; 0x5e0 <TM1637_turnOnAndSetBrightness>
  76:	08 95       	ret

00000078 <print_time_on_display>:
}

void print_time_on_display(uint8_t hour, uint8_t min)
{
  78:	ff 92       	push	r15
  7a:	0f 93       	push	r16
  7c:	1f 93       	push	r17
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	28 97       	sbiw	r28, 0x08	; 8
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	f8 94       	cli
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	0f be       	out	0x3f, r0	; 63
  90:	cd bf       	out	0x3d, r28	; 61
	uint8_t d_time[DISP_LEN];
	d_time[0] = hour / DIVIDER;
  92:	9d ec       	ldi	r25, 0xCD	; 205
  94:	89 9f       	mul	r24, r25
  96:	21 2d       	mov	r18, r1
  98:	11 24       	eor	r1, r1
  9a:	26 95       	lsr	r18
  9c:	26 95       	lsr	r18
  9e:	26 95       	lsr	r18
  a0:	29 83       	std	Y+1, r18	; 0x01
	d_time[1] = hour % DIVIDER;
  a2:	22 0f       	add	r18, r18
  a4:	32 2f       	mov	r19, r18
  a6:	33 0f       	add	r19, r19
  a8:	33 0f       	add	r19, r19
  aa:	23 0f       	add	r18, r19
  ac:	82 1b       	sub	r24, r18
  ae:	8a 83       	std	Y+2, r24	; 0x02
	d_time[2] = min / DIVIDER;
  b0:	69 9f       	mul	r22, r25
  b2:	81 2d       	mov	r24, r1
  b4:	11 24       	eor	r1, r1
  b6:	86 95       	lsr	r24
  b8:	86 95       	lsr	r24
  ba:	86 95       	lsr	r24
  bc:	8b 83       	std	Y+3, r24	; 0x03
	d_time[3] = min % DIVIDER;
  be:	88 0f       	add	r24, r24
  c0:	98 2f       	mov	r25, r24
  c2:	99 0f       	add	r25, r25
  c4:	99 0f       	add	r25, r25
  c6:	89 0f       	add	r24, r25
  c8:	68 1b       	sub	r22, r24
  ca:	6c 83       	std	Y+4, r22	; 0x04
	
	uint8_t out_time[TM1637_DIGITS_COUNT];
	for(uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
  cc:	f1 2c       	mov	r15, r1
  ce:	12 c0       	rjmp	.+36     	; 0xf4 <print_time_on_display+0x7c>
	{
		out_time[i] = select_display_digit(d_time[i]);
  d0:	0f 2d       	mov	r16, r15
  d2:	10 e0       	ldi	r17, 0x00	; 0
  d4:	e1 e0       	ldi	r30, 0x01	; 1
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	ec 0f       	add	r30, r28
  da:	fd 1f       	adc	r31, r29
  dc:	e0 0f       	add	r30, r16
  de:	f1 1f       	adc	r31, r17
  e0:	80 81       	ld	r24, Z
  e2:	bd df       	rcall	.-134    	; 0x5e <select_display_digit>
  e4:	e5 e0       	ldi	r30, 0x05	; 5
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	ec 0f       	add	r30, r28
  ea:	fd 1f       	adc	r31, r29
  ec:	e0 0f       	add	r30, r16
  ee:	f1 1f       	adc	r31, r17
  f0:	80 83       	st	Z, r24
	d_time[1] = hour % DIVIDER;
	d_time[2] = min / DIVIDER;
	d_time[3] = min % DIVIDER;
	
	uint8_t out_time[TM1637_DIGITS_COUNT];
	for(uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
  f2:	f3 94       	inc	r15
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	8f 15       	cp	r24, r15
  f8:	58 f7       	brcc	.-42     	; 0xd0 <print_time_on_display+0x58>
	{
		out_time[i] = select_display_digit(d_time[i]);
	}
	TM1637_setSegments(out_time, TM1637_DIGITS_COUNT, START_POS);
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	64 e0       	ldi	r22, 0x04	; 4
  fe:	ce 01       	movw	r24, r28
 100:	05 96       	adiw	r24, 0x05	; 5
 102:	d5 d2       	rcall	.+1450   	; 0x6ae <TM1637_setSegments>
 104:	28 96       	adiw	r28, 0x08	; 8
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	ff 90       	pop	r15
 11a:	08 95       	ret

0000011c <activate_sleep_mode>:
uint8_t interval = 0;

/* реализация спящего режима */
void activate_sleep_mode()
{
	if (interval >= MAX_INTERVAL)
 11c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 120:	8a 30       	cpi	r24, 0x0A	; 10
 122:	50 f0       	brcs	.+20     	; 0x138 <activate_sleep_mode+0x1c>
	{	
		TM1637_turnOff();
 124:	f5 d1       	rcall	.+1002   	; 0x510 <TM1637_turnOff>
		OCR2 = 1;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	83 bd       	out	0x23, r24	; 35
		/* жду сброс флагов */
		while (ASSR != ASSR_REG_REDY);
 12a:	82 b5       	in	r24, 0x22	; 34
 12c:	88 30       	cpi	r24, 0x08	; 8
 12e:	e9 f7       	brne	.-6      	; 0x12a <activate_sleep_mode+0xe>
		sleep_enable();
 130:	85 b7       	in	r24, 0x35	; 53
 132:	80 68       	ori	r24, 0x80	; 128
 134:	85 bf       	out	0x35, r24	; 53
		sleep_cpu();
 136:	88 95       	sleep
 138:	08 95       	ret

0000013a <__vector_4>:
	}
}

/* отсчет времени */
ISR(TIMER2_OVF_vect)
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	2f 93       	push	r18
 146:	3f 93       	push	r19
 148:	4f 93       	push	r20
 14a:	5f 93       	push	r21
 14c:	6f 93       	push	r22
 14e:	7f 93       	push	r23
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	TCNT2 = 0;
 15c:	14 bc       	out	0x24, r1	; 36
	PORTB ^= (1 << PB1);
 15e:	98 b3       	in	r25, 0x18	; 24
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	89 27       	eor	r24, r25
 164:	88 bb       	out	0x18, r24	; 24
	seconds += STEP;
 166:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <seconds>
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <seconds>
	interval += STEP;
 170:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	control_seconds(&seconds, &minutes);
 17a:	6a e6       	ldi	r22, 0x6A	; 106
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	8f e6       	ldi	r24, 0x6F	; 111
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	35 d1       	rcall	.+618    	; 0x3ee <control_seconds>
	control_min(&minutes, &hour);
 184:	6b e6       	ldi	r22, 0x6B	; 107
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	8a e6       	ldi	r24, 0x6A	; 106
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	3b d1       	rcall	.+630    	; 0x404 <control_min>
	control_hour(&seconds, &minutes, &hour);
 18e:	4b e6       	ldi	r20, 0x6B	; 107
 190:	50 e0       	ldi	r21, 0x00	; 0
 192:	6a e6       	ldi	r22, 0x6A	; 106
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	8f e6       	ldi	r24, 0x6F	; 111
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	3f d1       	rcall	.+638    	; 0x41a <control_hour>
}
 19c:	ff 91       	pop	r31
 19e:	ef 91       	pop	r30
 1a0:	bf 91       	pop	r27
 1a2:	af 91       	pop	r26
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	7f 91       	pop	r23
 1aa:	6f 91       	pop	r22
 1ac:	5f 91       	pop	r21
 1ae:	4f 91       	pop	r20
 1b0:	3f 91       	pop	r19
 1b2:	2f 91       	pop	r18
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <__vector_1>:

/* выход из сна + метка когда кот ел */
ISR(INT0_vect)
{
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	2f 93       	push	r18
 1ca:	3f 93       	push	r19
 1cc:	4f 93       	push	r20
 1ce:	5f 93       	push	r21
 1d0:	6f 93       	push	r22
 1d2:	7f 93       	push	r23
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	af 93       	push	r26
 1da:	bf 93       	push	r27
 1dc:	ef 93       	push	r30
 1de:	ff 93       	push	r31
	sleep_disable();
 1e0:	85 b7       	in	r24, 0x35	; 53
 1e2:	8f 77       	andi	r24, 0x7F	; 127
 1e4:	85 bf       	out	0x35, r24	; 53
	cat_hour = hour;
 1e6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hour>
 1ea:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <cat_hour>
	cat_minutes = minutes;
 1ee:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <minutes>
 1f2:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <cat_minutes>
	interval = 0;
 1f6:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
	wakeup_display();
 1fa:	3b df       	rcall	.-394    	; 0x72 <wakeup_display>
	print_time_on_display(cat_hour, cat_minutes);
 1fc:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <cat_minutes>
 200:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <cat_hour>
 204:	39 df       	rcall	.-398    	; 0x78 <print_time_on_display>
}
 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	bf 91       	pop	r27
 20c:	af 91       	pop	r26
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
 212:	7f 91       	pop	r23
 214:	6f 91       	pop	r22
 216:	5f 91       	pop	r21
 218:	4f 91       	pop	r20
 21a:	3f 91       	pop	r19
 21c:	2f 91       	pop	r18
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <__vector_2>:

ISR(INT1_vect)
{
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	2f 93       	push	r18
 234:	3f 93       	push	r19
 236:	4f 93       	push	r20
 238:	5f 93       	push	r21
 23a:	6f 93       	push	r22
 23c:	7f 93       	push	r23
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	af 93       	push	r26
 244:	bf 93       	push	r27
 246:	ef 93       	push	r30
 248:	ff 93       	push	r31
	sleep_disable();
 24a:	85 b7       	in	r24, 0x35	; 53
 24c:	8f 77       	andi	r24, 0x7F	; 127
 24e:	85 bf       	out	0x35, r24	; 53
	wakeup_display();
 250:	10 df       	rcall	.-480    	; 0x72 <wakeup_display>
	event_listener();
 252:	a0 d0       	rcall	.+320    	; 0x394 <event_listener>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	2f e3       	ldi	r18, 0x3F	; 63
 256:	8d e0       	ldi	r24, 0x0D	; 13
 258:	93 e0       	ldi	r25, 0x03	; 3
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <__vector_2+0x32>
 262:	00 c0       	rjmp	.+0      	; 0x264 <__vector_2+0x3c>
 264:	00 00       	nop
	_delay_ms(1000);
	setup_time(&seconds, &minutes, &hour);
 266:	4b e6       	ldi	r20, 0x6B	; 107
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	6a e6       	ldi	r22, 0x6A	; 106
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	8f e6       	ldi	r24, 0x6F	; 111
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	b2 d0       	rcall	.+356    	; 0x3d8 <setup_time>
	print_time_on_display(hour, minutes);
 274:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <minutes>
 278:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hour>
 27c:	fd de       	rcall	.-518    	; 0x78 <print_time_on_display>
	interval = 0;
 27e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
}
 282:	ff 91       	pop	r31
 284:	ef 91       	pop	r30
 286:	bf 91       	pop	r27
 288:	af 91       	pop	r26
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	7f 91       	pop	r23
 290:	6f 91       	pop	r22
 292:	5f 91       	pop	r21
 294:	4f 91       	pop	r20
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <start_timer2_async>:

/* настройка Timer/Counter2 */
void start_timer2_async()
{
	ASSR |= (1 << AS2); // вклю асинхронный режим
 2a4:	82 b5       	in	r24, 0x22	; 34
 2a6:	88 60       	ori	r24, 0x08	; 8
 2a8:	82 bd       	out	0x22, r24	; 34
	/* чищу регистры таймера от мусора */
	TCCR2 = 0;
 2aa:	15 bc       	out	0x25, r1	; 37
	OCR2 = 0;
 2ac:	13 bc       	out	0x23, r1	; 35
	TCNT2 = 0;
 2ae:	14 bc       	out	0x24, r1	; 36
	/* делитель частоты = 128 */
	TCCR2 |= (1 << CS22) | (1 << CS20);
 2b0:	85 b5       	in	r24, 0x25	; 37
 2b2:	85 60       	ori	r24, 0x05	; 5
 2b4:	85 bd       	out	0x25, r24	; 37
	/* жду сброс флагов для старта в асинхронном режиме */
	while (ASSR != ASSR_REG_REDY);
 2b6:	82 b5       	in	r24, 0x22	; 34
 2b8:	88 30       	cpi	r24, 0x08	; 8
 2ba:	e9 f7       	brne	.-6      	; 0x2b6 <start_timer2_async+0x12>
	/* чистим флаги прерываний */
	TIFR |= (1 << OCF2) | (1 << TOV2);
 2bc:	88 b7       	in	r24, 0x38	; 56
 2be:	80 6c       	ori	r24, 0xC0	; 192
 2c0:	88 bf       	out	0x38, r24	; 56
	/* включаю прерывание по переполнению таймера */
	TIMSK |= (1 << TOIE2);
 2c2:	89 b7       	in	r24, 0x39	; 57
 2c4:	80 64       	ori	r24, 0x40	; 64
 2c6:	89 bf       	out	0x39, r24	; 57
 2c8:	08 95       	ret

000002ca <setup_ext_interrapt>:
}

/* настройка внешних прерываний */
void setup_ext_interrapt()
{
	GICR |= (1 << INT0) | (1 << INT1);
 2ca:	8b b7       	in	r24, 0x3b	; 59
 2cc:	80 6c       	ori	r24, 0xC0	; 192
 2ce:	8b bf       	out	0x3b, r24	; 59
	DDRD = 0;
 2d0:	11 ba       	out	0x11, r1	; 17
	PORTD |= (1 << INT0_PIN) | (1 << INT1_PIN) | (1 << MENU_BTN) | (1 << UP_BTN) | (1 << DOWN_BTN);
 2d2:	82 b3       	in	r24, 0x12	; 18
 2d4:	8c 67       	ori	r24, 0x7C	; 124
 2d6:	82 bb       	out	0x12, r24	; 18
 2d8:	08 95       	ret

000002da <main>:
}

int main(void)
{
	ACSR |= (1 << ACD); // ОТКЛЮЧЕНИЕ АЦП
 2da:	88 b1       	in	r24, 0x08	; 8
 2dc:	80 68       	ori	r24, 0x80	; 128
 2de:	88 b9       	out	0x08, r24	; 8
	start_timer2_async();
 2e0:	e1 df       	rcall	.-62     	; 0x2a4 <start_timer2_async>
	setup_ext_interrapt();
 2e2:	f3 df       	rcall	.-26     	; 0x2ca <setup_ext_interrapt>
	sei();
 2e4:	78 94       	sei
	
	TM1637_init();
 2e6:	ab d0       	rcall	.+342    	; 0x43e <TM1637_init>
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	7a d1       	rcall	.+756    	; 0x5e0 <TM1637_turnOnAndSetBrightness>
	print_time_on_display(hour, minutes);
 2ec:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <minutes>
 2f0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hour>
 2f4:	c1 de       	rcall	.-638    	; 0x78 <print_time_on_display>
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 2f6:	85 b7       	in	r24, 0x35	; 53
 2f8:	8f 78       	andi	r24, 0x8F	; 143
 2fa:	80 63       	ori	r24, 0x30	; 48
 2fc:	85 bf       	out	0x35, r24	; 53
	
	DDRB |= (1 << PB1);
 2fe:	87 b3       	in	r24, 0x17	; 23
 300:	82 60       	ori	r24, 0x02	; 2
 302:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1 << PB1);
 304:	88 b3       	in	r24, 0x18	; 24
 306:	8d 7f       	andi	r24, 0xFD	; 253
 308:	88 bb       	out	0x18, r24	; 24
	
	while(1)
	{
		activate_sleep_mode();
 30a:	08 df       	rcall	.-496    	; 0x11c <activate_sleep_mode>
 30c:	fe cf       	rjmp	.-4      	; 0x30a <main+0x30>

0000030e <update_menu>:
uint8_t min = 0;
uint8_t wait_time = 0;

void update_menu()
{
	TM1637_clear();
 30e:	76 d2       	rcall	.+1260   	; 0x7fc <TM1637_clear>
 310:	2f e9       	ldi	r18, 0x9F	; 159
 312:	86 e8       	ldi	r24, 0x86	; 134
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	21 50       	subi	r18, 0x01	; 1
 318:	80 40       	sbci	r24, 0x00	; 0
 31a:	90 40       	sbci	r25, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <update_menu+0x8>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <update_menu+0x12>
 320:	00 00       	nop
 322:	08 95       	ret

00000324 <set_time_up>:
}

uint8_t set_time_up(uint8_t val, uint8_t max_val)
{
	uint8_t result;
	if (val < max_val)
 324:	86 17       	cp	r24, r22
 326:	10 f4       	brcc	.+4      	; 0x32c <set_time_up+0x8>
	{
		result = val + 1;
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	08 95       	ret
	}
	else
	{
		result = 0;
 32c:	80 e0       	ldi	r24, 0x00	; 0
	}
	return result;
}
 32e:	08 95       	ret

00000330 <set_time_down>:

uint8_t set_time_down(uint8_t val, uint8_t max_val)
{
	uint8_t result;
	if (val > 0)
 330:	88 23       	and	r24, r24
 332:	11 f0       	breq	.+4      	; 0x338 <set_time_down+0x8>
	{
		result = val - 1;
 334:	6f ef       	ldi	r22, 0xFF	; 255
 336:	68 0f       	add	r22, r24
	else
	{
		result = max_val;
	}	
	return result;
}
 338:	86 2f       	mov	r24, r22
 33a:	08 95       	ret

0000033c <tune_hour>:

void tune_hour()
{
	if (!(PIND & (1 << UP_BTN)))
 33c:	85 99       	sbic	0x10, 5	; 16
 33e:	08 c0       	rjmp	.+16     	; 0x350 <tune_hour+0x14>
	{
		wait_time = 0;
 340:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <wait_time>
		hr = set_time_up(hr, HOUR_OVF);
 344:	67 e1       	ldi	r22, 0x17	; 23
 346:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 34a:	ec df       	rcall	.-40     	; 0x324 <set_time_up>
 34c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <hr>
	}
			
	if (!(PIND & (1 << DOWN_BTN)))
 350:	86 99       	sbic	0x10, 6	; 16
 352:	08 c0       	rjmp	.+16     	; 0x364 <tune_hour+0x28>
	{
		wait_time = 0;
 354:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <wait_time>
		hr = set_time_down(hr, HOUR_OVF);
 358:	67 e1       	ldi	r22, 0x17	; 23
 35a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 35e:	e8 df       	rcall	.-48     	; 0x330 <set_time_down>
 360:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <hr>
 364:	08 95       	ret

00000366 <tune_min>:
	}
}

void tune_min()
{
	if (!(PIND & (1 << UP_BTN)))
 366:	85 99       	sbic	0x10, 5	; 16
 368:	09 c0       	rjmp	.+18     	; 0x37c <tune_min+0x16>
	{
		wait_time = MAX_WAIT_TIME;
 36a:	84 e0       	ldi	r24, 0x04	; 4
 36c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <wait_time>
		min = set_time_up(min, MIN_OVF-1);
 370:	6b e3       	ldi	r22, 0x3B	; 59
 372:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <min>
 376:	d6 df       	rcall	.-84     	; 0x324 <set_time_up>
 378:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <min>
	}
			
	if (!(PIND & (1 << DOWN_BTN)))
 37c:	86 99       	sbic	0x10, 6	; 16
 37e:	09 c0       	rjmp	.+18     	; 0x392 <tune_min+0x2c>
	{
		wait_time = MAX_WAIT_TIME;
 380:	84 e0       	ldi	r24, 0x04	; 4
 382:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <wait_time>
		min = set_time_down(min, MIN_OVF-1);
 386:	6b e3       	ldi	r22, 0x3B	; 59
 388:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <min>
 38c:	d1 df       	rcall	.-94     	; 0x330 <set_time_down>
 38e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <min>
 392:	08 95       	ret

00000394 <event_listener>:
	}
}

void event_listener()
{
	update_menu();
 394:	bc df       	rcall	.-136    	; 0x30e <update_menu>
	while(!(PIND & (1 << MENU_BTN)))
 396:	1a c0       	rjmp	.+52     	; 0x3cc <event_listener+0x38>
	{
		if (wait_time < MAX_WAIT_TIME)
 398:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <wait_time>
 39c:	84 30       	cpi	r24, 0x04	; 4
 39e:	10 f4       	brcc	.+4      	; 0x3a4 <event_listener+0x10>
		{
			tune_hour();
 3a0:	cd df       	rcall	.-102    	; 0x33c <tune_hour>
 3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <event_listener+0x12>
		}
		else
		{
			tune_min();
 3a4:	e0 df       	rcall	.-64     	; 0x366 <tune_min>
		}
		wait_time++;
 3a6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <wait_time>
 3aa:	8f 5f       	subi	r24, 0xFF	; 255
 3ac:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <wait_time>
 3b0:	2f e9       	ldi	r18, 0x9F	; 159
 3b2:	86 e8       	ldi	r24, 0x86	; 134
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	21 50       	subi	r18, 0x01	; 1
 3b8:	80 40       	sbci	r24, 0x00	; 0
 3ba:	90 40       	sbci	r25, 0x00	; 0
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <event_listener+0x22>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <event_listener+0x2c>
 3c0:	00 00       	nop
		_delay_ms(WAIT);
		print_time_on_display(hr,min);
 3c2:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <min>
 3c6:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 3ca:	56 de       	rcall	.-852    	; 0x78 <print_time_on_display>
}

void event_listener()
{
	update_menu();
	while(!(PIND & (1 << MENU_BTN)))
 3cc:	84 9b       	sbis	0x10, 4	; 16
 3ce:	e4 cf       	rjmp	.-56     	; 0x398 <event_listener+0x4>
		}
		wait_time++;
		_delay_ms(WAIT);
		print_time_on_display(hr,min);
	}
	wait_time = 0;
 3d0:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <wait_time>
	update_menu();
 3d4:	9c df       	rcall	.-200    	; 0x30e <update_menu>
 3d6:	08 95       	ret

000003d8 <setup_time>:
}

void setup_time(uint8_t* seconds, uint8_t* minutes, uint8_t* hour)
{
	*seconds = 0;
 3d8:	fc 01       	movw	r30, r24
 3da:	10 82       	st	Z, r1
	*minutes = min;
 3dc:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <min>
 3e0:	fb 01       	movw	r30, r22
 3e2:	80 83       	st	Z, r24
	*hour = hr;
 3e4:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 3e8:	fa 01       	movw	r30, r20
 3ea:	80 83       	st	Z, r24
 3ec:	08 95       	ret

000003ee <control_seconds>:
#include "../main.h"

void control_seconds(uint8_t* seconds, uint8_t* minutes)
{
	if (*seconds >= SEC_OVF)
 3ee:	fc 01       	movw	r30, r24
 3f0:	20 81       	ld	r18, Z
 3f2:	2c 33       	cpi	r18, 0x3C	; 60
 3f4:	30 f0       	brcs	.+12     	; 0x402 <__DATA_REGION_LENGTH__+0x2>
	{
		*minutes = *minutes + 1;
 3f6:	fb 01       	movw	r30, r22
 3f8:	20 81       	ld	r18, Z
 3fa:	2f 5f       	subi	r18, 0xFF	; 255
 3fc:	20 83       	st	Z, r18
		*seconds = 0;
 3fe:	fc 01       	movw	r30, r24
 400:	10 82       	st	Z, r1
 402:	08 95       	ret

00000404 <control_min>:
	}
}

void control_min(uint8_t* minutes, uint8_t* hour)
{
	if (*minutes >= MIN_OVF)
 404:	fc 01       	movw	r30, r24
 406:	20 81       	ld	r18, Z
 408:	2c 33       	cpi	r18, 0x3C	; 60
 40a:	30 f0       	brcs	.+12     	; 0x418 <control_min+0x14>
	{
		*hour = *hour + 1;
 40c:	fb 01       	movw	r30, r22
 40e:	20 81       	ld	r18, Z
 410:	2f 5f       	subi	r18, 0xFF	; 255
 412:	20 83       	st	Z, r18
		*minutes = 0;
 414:	fc 01       	movw	r30, r24
 416:	10 82       	st	Z, r1
 418:	08 95       	ret

0000041a <control_hour>:
	}
}

void control_hour(uint8_t* seconds, uint8_t* minutes, uint8_t* hour)
{
 41a:	fc 01       	movw	r30, r24
	if (*hour == HOUR_OVF && *minutes >= 59 && *seconds >= 59)
 41c:	da 01       	movw	r26, r20
 41e:	9c 91       	ld	r25, X
 420:	97 31       	cpi	r25, 0x17	; 23
 422:	61 f4       	brne	.+24     	; 0x43c <control_hour+0x22>
 424:	db 01       	movw	r26, r22
 426:	8c 91       	ld	r24, X
 428:	8b 33       	cpi	r24, 0x3B	; 59
 42a:	40 f0       	brcs	.+16     	; 0x43c <control_hour+0x22>
 42c:	80 81       	ld	r24, Z
 42e:	8b 33       	cpi	r24, 0x3B	; 59
 430:	28 f0       	brcs	.+10     	; 0x43c <control_hour+0x22>
	{
		*hour = 0;
 432:	da 01       	movw	r26, r20
 434:	1c 92       	st	X, r1
		*minutes = 0;
 436:	db 01       	movw	r26, r22
 438:	1c 92       	st	X, r1
		*seconds = 0;
 43a:	10 82       	st	Z, r1
 43c:	08 95       	ret

0000043e <TM1637_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43e:	84 b3       	in	r24, 0x14	; 20
 440:	8f 7e       	andi	r24, 0xEF	; 239
 442:	84 bb       	out	0x14, r24	; 20
 444:	84 b3       	in	r24, 0x14	; 20
 446:	8f 7d       	andi	r24, 0xDF	; 223
 448:	84 bb       	out	0x14, r24	; 20
 44a:	85 b3       	in	r24, 0x15	; 21
 44c:	8f 7c       	andi	r24, 0xCF	; 207
 44e:	85 bb       	out	0x15, r24	; 21
 450:	84 b3       	in	r24, 0x14	; 20
 452:	80 61       	ori	r24, 0x10	; 16
 454:	84 bb       	out	0x14, r24	; 20
 456:	82 e4       	ldi	r24, 0x42	; 66
 458:	8a 95       	dec	r24
 45a:	f1 f7       	brne	.-4      	; 0x458 <TM1637_init+0x1a>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <TM1637_init+0x20>
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	20 e4       	ldi	r18, 0x40	; 64
 462:	1d c0       	rjmp	.+58     	; 0x49e <__stack+0x3f>
 464:	84 b3       	in	r24, 0x14	; 20
 466:	80 62       	ori	r24, 0x20	; 32
 468:	84 bb       	out	0x14, r24	; 20
 46a:	81 e2       	ldi	r24, 0x21	; 33
 46c:	8a 95       	dec	r24
 46e:	f1 f7       	brne	.-4      	; 0x46c <__stack+0xd>
 470:	00 00       	nop
 472:	20 ff       	sbrs	r18, 0
 474:	04 c0       	rjmp	.+8      	; 0x47e <__stack+0x1f>
 476:	84 b3       	in	r24, 0x14	; 20
 478:	8f 7e       	andi	r24, 0xEF	; 239
 47a:	84 bb       	out	0x14, r24	; 20
 47c:	03 c0       	rjmp	.+6      	; 0x484 <__stack+0x25>
 47e:	84 b3       	in	r24, 0x14	; 20
 480:	80 61       	ori	r24, 0x10	; 16
 482:	84 bb       	out	0x14, r24	; 20
 484:	81 e2       	ldi	r24, 0x21	; 33
 486:	8a 95       	dec	r24
 488:	f1 f7       	brne	.-4      	; 0x486 <__stack+0x27>
 48a:	00 00       	nop
 48c:	84 b3       	in	r24, 0x14	; 20
 48e:	8f 7d       	andi	r24, 0xDF	; 223
 490:	84 bb       	out	0x14, r24	; 20
 492:	82 e4       	ldi	r24, 0x42	; 66
 494:	8a 95       	dec	r24
 496:	f1 f7       	brne	.-4      	; 0x494 <__stack+0x35>
 498:	00 c0       	rjmp	.+0      	; 0x49a <__stack+0x3b>
 49a:	26 95       	lsr	r18
 49c:	9f 5f       	subi	r25, 0xFF	; 255
 49e:	98 30       	cpi	r25, 0x08	; 8
 4a0:	08 f3       	brcs	.-62     	; 0x464 <__stack+0x5>
 4a2:	84 b3       	in	r24, 0x14	; 20
 4a4:	80 62       	ori	r24, 0x20	; 32
 4a6:	84 bb       	out	0x14, r24	; 20
 4a8:	84 b3       	in	r24, 0x14	; 20
 4aa:	8f 7e       	andi	r24, 0xEF	; 239
 4ac:	84 bb       	out	0x14, r24	; 20
 4ae:	82 e4       	ldi	r24, 0x42	; 66
 4b0:	8a 95       	dec	r24
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <__stack+0x51>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <__stack+0x57>
 4b6:	84 b3       	in	r24, 0x14	; 20
 4b8:	8f 7d       	andi	r24, 0xDF	; 223
 4ba:	84 bb       	out	0x14, r24	; 20
 4bc:	81 e2       	ldi	r24, 0x21	; 33
 4be:	8a 95       	dec	r24
 4c0:	f1 f7       	brne	.-4      	; 0x4be <__stack+0x5f>
 4c2:	00 00       	nop
 4c4:	9c 99       	sbic	0x13, 4	; 19
 4c6:	03 c0       	rjmp	.+6      	; 0x4ce <__stack+0x6f>
 4c8:	84 b3       	in	r24, 0x14	; 20
 4ca:	80 61       	ori	r24, 0x10	; 16
 4cc:	84 bb       	out	0x14, r24	; 20
 4ce:	81 e2       	ldi	r24, 0x21	; 33
 4d0:	8a 95       	dec	r24
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <__stack+0x71>
 4d4:	00 00       	nop
 4d6:	84 b3       	in	r24, 0x14	; 20
 4d8:	80 62       	ori	r24, 0x20	; 32
 4da:	84 bb       	out	0x14, r24	; 20
 4dc:	81 e2       	ldi	r24, 0x21	; 33
 4de:	8a 95       	dec	r24
 4e0:	f1 f7       	brne	.-4      	; 0x4de <__stack+0x7f>
 4e2:	00 00       	nop
 4e4:	84 b3       	in	r24, 0x14	; 20
 4e6:	80 61       	ori	r24, 0x10	; 16
 4e8:	84 bb       	out	0x14, r24	; 20
 4ea:	81 e2       	ldi	r24, 0x21	; 33
 4ec:	8a 95       	dec	r24
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <__stack+0x8d>
 4f0:	00 00       	nop
 4f2:	84 b3       	in	r24, 0x14	; 20
 4f4:	8f 7d       	andi	r24, 0xDF	; 223
 4f6:	84 bb       	out	0x14, r24	; 20
 4f8:	82 e4       	ldi	r24, 0x42	; 66
 4fa:	8a 95       	dec	r24
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <__stack+0x9b>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <__stack+0xa1>
 500:	84 b3       	in	r24, 0x14	; 20
 502:	8f 7e       	andi	r24, 0xEF	; 239
 504:	84 bb       	out	0x14, r24	; 20
 506:	82 e4       	ldi	r24, 0x42	; 66
 508:	8a 95       	dec	r24
 50a:	f1 f7       	brne	.-4      	; 0x508 <__stack+0xa9>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <__stack+0xaf>
 50e:	08 95       	ret

00000510 <TM1637_turnOff>:
 510:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <TM1637_brightness_reg>
 514:	87 70       	andi	r24, 0x07	; 7
 516:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <TM1637_brightness_reg>
 51a:	84 b3       	in	r24, 0x14	; 20
 51c:	80 61       	ori	r24, 0x10	; 16
 51e:	84 bb       	out	0x14, r24	; 20
 520:	82 e4       	ldi	r24, 0x42	; 66
 522:	8a 95       	dec	r24
 524:	f1 f7       	brne	.-4      	; 0x522 <TM1637_turnOff+0x12>
 526:	00 c0       	rjmp	.+0      	; 0x528 <TM1637_turnOff+0x18>
 528:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <TM1637_brightness_reg>
 52c:	9f 70       	andi	r25, 0x0F	; 15
 52e:	90 68       	ori	r25, 0x80	; 128
 530:	20 e0       	ldi	r18, 0x00	; 0
 532:	1d c0       	rjmp	.+58     	; 0x56e <TM1637_turnOff+0x5e>
 534:	84 b3       	in	r24, 0x14	; 20
 536:	80 62       	ori	r24, 0x20	; 32
 538:	84 bb       	out	0x14, r24	; 20
 53a:	81 e2       	ldi	r24, 0x21	; 33
 53c:	8a 95       	dec	r24
 53e:	f1 f7       	brne	.-4      	; 0x53c <TM1637_turnOff+0x2c>
 540:	00 00       	nop
 542:	90 ff       	sbrs	r25, 0
 544:	04 c0       	rjmp	.+8      	; 0x54e <TM1637_turnOff+0x3e>
 546:	84 b3       	in	r24, 0x14	; 20
 548:	8f 7e       	andi	r24, 0xEF	; 239
 54a:	84 bb       	out	0x14, r24	; 20
 54c:	03 c0       	rjmp	.+6      	; 0x554 <TM1637_turnOff+0x44>
 54e:	84 b3       	in	r24, 0x14	; 20
 550:	80 61       	ori	r24, 0x10	; 16
 552:	84 bb       	out	0x14, r24	; 20
 554:	81 e2       	ldi	r24, 0x21	; 33
 556:	8a 95       	dec	r24
 558:	f1 f7       	brne	.-4      	; 0x556 <TM1637_turnOff+0x46>
 55a:	00 00       	nop
 55c:	84 b3       	in	r24, 0x14	; 20
 55e:	8f 7d       	andi	r24, 0xDF	; 223
 560:	84 bb       	out	0x14, r24	; 20
 562:	82 e4       	ldi	r24, 0x42	; 66
 564:	8a 95       	dec	r24
 566:	f1 f7       	brne	.-4      	; 0x564 <TM1637_turnOff+0x54>
 568:	00 c0       	rjmp	.+0      	; 0x56a <TM1637_turnOff+0x5a>
 56a:	96 95       	lsr	r25
 56c:	2f 5f       	subi	r18, 0xFF	; 255
 56e:	28 30       	cpi	r18, 0x08	; 8
 570:	08 f3       	brcs	.-62     	; 0x534 <TM1637_turnOff+0x24>
 572:	84 b3       	in	r24, 0x14	; 20
 574:	80 62       	ori	r24, 0x20	; 32
 576:	84 bb       	out	0x14, r24	; 20
 578:	84 b3       	in	r24, 0x14	; 20
 57a:	8f 7e       	andi	r24, 0xEF	; 239
 57c:	84 bb       	out	0x14, r24	; 20
 57e:	82 e4       	ldi	r24, 0x42	; 66
 580:	8a 95       	dec	r24
 582:	f1 f7       	brne	.-4      	; 0x580 <TM1637_turnOff+0x70>
 584:	00 c0       	rjmp	.+0      	; 0x586 <TM1637_turnOff+0x76>
 586:	84 b3       	in	r24, 0x14	; 20
 588:	8f 7d       	andi	r24, 0xDF	; 223
 58a:	84 bb       	out	0x14, r24	; 20
 58c:	81 e2       	ldi	r24, 0x21	; 33
 58e:	8a 95       	dec	r24
 590:	f1 f7       	brne	.-4      	; 0x58e <TM1637_turnOff+0x7e>
 592:	00 00       	nop
 594:	9c 99       	sbic	0x13, 4	; 19
 596:	03 c0       	rjmp	.+6      	; 0x59e <TM1637_turnOff+0x8e>
 598:	84 b3       	in	r24, 0x14	; 20
 59a:	80 61       	ori	r24, 0x10	; 16
 59c:	84 bb       	out	0x14, r24	; 20
 59e:	81 e2       	ldi	r24, 0x21	; 33
 5a0:	8a 95       	dec	r24
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <TM1637_turnOff+0x90>
 5a4:	00 00       	nop
 5a6:	84 b3       	in	r24, 0x14	; 20
 5a8:	80 62       	ori	r24, 0x20	; 32
 5aa:	84 bb       	out	0x14, r24	; 20
 5ac:	81 e2       	ldi	r24, 0x21	; 33
 5ae:	8a 95       	dec	r24
 5b0:	f1 f7       	brne	.-4      	; 0x5ae <TM1637_turnOff+0x9e>
 5b2:	00 00       	nop
 5b4:	84 b3       	in	r24, 0x14	; 20
 5b6:	80 61       	ori	r24, 0x10	; 16
 5b8:	84 bb       	out	0x14, r24	; 20
 5ba:	81 e2       	ldi	r24, 0x21	; 33
 5bc:	8a 95       	dec	r24
 5be:	f1 f7       	brne	.-4      	; 0x5bc <TM1637_turnOff+0xac>
 5c0:	00 00       	nop
 5c2:	84 b3       	in	r24, 0x14	; 20
 5c4:	8f 7d       	andi	r24, 0xDF	; 223
 5c6:	84 bb       	out	0x14, r24	; 20
 5c8:	82 e4       	ldi	r24, 0x42	; 66
 5ca:	8a 95       	dec	r24
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <TM1637_turnOff+0xba>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <TM1637_turnOff+0xc0>
 5d0:	84 b3       	in	r24, 0x14	; 20
 5d2:	8f 7e       	andi	r24, 0xEF	; 239
 5d4:	84 bb       	out	0x14, r24	; 20
 5d6:	82 e4       	ldi	r24, 0x42	; 66
 5d8:	8a 95       	dec	r24
 5da:	f1 f7       	brne	.-4      	; 0x5d8 <TM1637_turnOff+0xc8>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <TM1637_turnOff+0xce>
 5de:	08 95       	ret

000005e0 <TM1637_turnOnAndSetBrightness>:
  TM1637_brightness_reg = (TM1637_brightness_reg & TM1637_MASK_ON_OFF) | (brightness & TM1637_MASK_BRIGHTNESS);
  TM1637_writeBrightnessReg();
}

void TM1637_turnOnAndSetBrightness(uint8_t brightness) {
  TM1637_brightness_reg = TM1637_MASK_ON_OFF | (brightness & TM1637_MASK_BRIGHTNESS);
 5e0:	87 70       	andi	r24, 0x07	; 7
 5e2:	88 60       	ori	r24, 0x08	; 8
 5e4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <TM1637_brightness_reg>
  TM1637_COMM_STOP;
}

static inline void TM1637_writeBrightnessReg(void) {
  // Write TM1637_CMD_SET_BRIGHTNESS + TM1637_brightness_reg
  TM1637_COMM_START;
 5e8:	84 b3       	in	r24, 0x14	; 20
 5ea:	80 61       	ori	r24, 0x10	; 16
 5ec:	84 bb       	out	0x14, r24	; 20
 5ee:	82 e4       	ldi	r24, 0x42	; 66
 5f0:	8a 95       	dec	r24
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <TM1637_turnOnAndSetBrightness+0x10>
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <TM1637_turnOnAndSetBrightness+0x16>
  TM1637_writeByte(TM1637_CMD_SET_BRIGHTNESS | (TM1637_brightness_reg & TM1637_MASK_BRIGHTNESS_REG));
 5f6:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <TM1637_brightness_reg>
 5fa:	9f 70       	andi	r25, 0x0F	; 15
 5fc:	90 68       	ori	r25, 0x80	; 128
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 5fe:	20 e0       	ldi	r18, 0x00	; 0
 600:	1d c0       	rjmp	.+58     	; 0x63c <TM1637_turnOnAndSetBrightness+0x5c>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 602:	84 b3       	in	r24, 0x14	; 20
 604:	80 62       	ori	r24, 0x20	; 32
 606:	84 bb       	out	0x14, r24	; 20
 608:	81 e2       	ldi	r24, 0x21	; 33
 60a:	8a 95       	dec	r24
 60c:	f1 f7       	brne	.-4      	; 0x60a <TM1637_turnOnAndSetBrightness+0x2a>
 60e:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 610:	90 ff       	sbrs	r25, 0
 612:	04 c0       	rjmp	.+8      	; 0x61c <TM1637_turnOnAndSetBrightness+0x3c>
 614:	84 b3       	in	r24, 0x14	; 20
 616:	8f 7e       	andi	r24, 0xEF	; 239
 618:	84 bb       	out	0x14, r24	; 20
 61a:	03 c0       	rjmp	.+6      	; 0x622 <TM1637_turnOnAndSetBrightness+0x42>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 61c:	84 b3       	in	r24, 0x14	; 20
 61e:	80 61       	ori	r24, 0x10	; 16
 620:	84 bb       	out	0x14, r24	; 20
 622:	81 e2       	ldi	r24, 0x21	; 33
 624:	8a 95       	dec	r24
 626:	f1 f7       	brne	.-4      	; 0x624 <TM1637_turnOnAndSetBrightness+0x44>
 628:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 62a:	84 b3       	in	r24, 0x14	; 20
 62c:	8f 7d       	andi	r24, 0xDF	; 223
 62e:	84 bb       	out	0x14, r24	; 20
 630:	82 e4       	ldi	r24, 0x42	; 66
 632:	8a 95       	dec	r24
 634:	f1 f7       	brne	.-4      	; 0x632 <TM1637_turnOnAndSetBrightness+0x52>
 636:	00 c0       	rjmp	.+0      	; 0x638 <TM1637_turnOnAndSetBrightness+0x58>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 638:	96 95       	lsr	r25
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 63a:	2f 5f       	subi	r18, 0xFF	; 255
 63c:	28 30       	cpi	r18, 0x08	; 8
 63e:	08 f3       	brcs	.-62     	; 0x602 <TM1637_turnOnAndSetBrightness+0x22>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 640:	84 b3       	in	r24, 0x14	; 20
 642:	80 62       	ori	r24, 0x20	; 32
 644:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 646:	84 b3       	in	r24, 0x14	; 20
 648:	8f 7e       	andi	r24, 0xEF	; 239
 64a:	84 bb       	out	0x14, r24	; 20
 64c:	82 e4       	ldi	r24, 0x42	; 66
 64e:	8a 95       	dec	r24
 650:	f1 f7       	brne	.-4      	; 0x64e <TM1637_turnOnAndSetBrightness+0x6e>
 652:	00 c0       	rjmp	.+0      	; 0x654 <TM1637_turnOnAndSetBrightness+0x74>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 654:	84 b3       	in	r24, 0x14	; 20
 656:	8f 7d       	andi	r24, 0xDF	; 223
 658:	84 bb       	out	0x14, r24	; 20
 65a:	81 e2       	ldi	r24, 0x21	; 33
 65c:	8a 95       	dec	r24
 65e:	f1 f7       	brne	.-4      	; 0x65c <TM1637_turnOnAndSetBrightness+0x7c>
 660:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 662:	9c 99       	sbic	0x13, 4	; 19
 664:	03 c0       	rjmp	.+6      	; 0x66c <TM1637_turnOnAndSetBrightness+0x8c>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 666:	84 b3       	in	r24, 0x14	; 20
 668:	80 61       	ori	r24, 0x10	; 16
 66a:	84 bb       	out	0x14, r24	; 20
 66c:	81 e2       	ldi	r24, 0x21	; 33
 66e:	8a 95       	dec	r24
 670:	f1 f7       	brne	.-4      	; 0x66e <TM1637_turnOnAndSetBrightness+0x8e>
 672:	00 00       	nop

static inline void TM1637_writeBrightnessReg(void) {
  // Write TM1637_CMD_SET_BRIGHTNESS + TM1637_brightness_reg
  TM1637_COMM_START;
  TM1637_writeByte(TM1637_CMD_SET_BRIGHTNESS | (TM1637_brightness_reg & TM1637_MASK_BRIGHTNESS_REG));
  TM1637_COMM_STOP;
 674:	84 b3       	in	r24, 0x14	; 20
 676:	80 62       	ori	r24, 0x20	; 32
 678:	84 bb       	out	0x14, r24	; 20
 67a:	81 e2       	ldi	r24, 0x21	; 33
 67c:	8a 95       	dec	r24
 67e:	f1 f7       	brne	.-4      	; 0x67c <TM1637_turnOnAndSetBrightness+0x9c>
 680:	00 00       	nop
 682:	84 b3       	in	r24, 0x14	; 20
 684:	80 61       	ori	r24, 0x10	; 16
 686:	84 bb       	out	0x14, r24	; 20
 688:	81 e2       	ldi	r24, 0x21	; 33
 68a:	8a 95       	dec	r24
 68c:	f1 f7       	brne	.-4      	; 0x68a <TM1637_turnOnAndSetBrightness+0xaa>
 68e:	00 00       	nop
 690:	84 b3       	in	r24, 0x14	; 20
 692:	8f 7d       	andi	r24, 0xDF	; 223
 694:	84 bb       	out	0x14, r24	; 20
 696:	82 e4       	ldi	r24, 0x42	; 66
 698:	8a 95       	dec	r24
 69a:	f1 f7       	brne	.-4      	; 0x698 <TM1637_turnOnAndSetBrightness+0xb8>
 69c:	00 c0       	rjmp	.+0      	; 0x69e <TM1637_turnOnAndSetBrightness+0xbe>
 69e:	84 b3       	in	r24, 0x14	; 20
 6a0:	8f 7e       	andi	r24, 0xEF	; 239
 6a2:	84 bb       	out	0x14, r24	; 20
 6a4:	82 e4       	ldi	r24, 0x42	; 66
 6a6:	8a 95       	dec	r24
 6a8:	f1 f7       	brne	.-4      	; 0x6a6 <TM1637_turnOnAndSetBrightness+0xc6>
 6aa:	00 c0       	rjmp	.+0      	; 0x6ac <TM1637_turnOnAndSetBrightness+0xcc>
 6ac:	08 95       	ret

000006ae <TM1637_setSegments>:
void TM1637_turnOnAndSetBrightness(uint8_t brightness) {
  TM1637_brightness_reg = TM1637_MASK_ON_OFF | (brightness & TM1637_MASK_BRIGHTNESS);
  TM1637_writeBrightnessReg();
}

void TM1637_setSegments(const uint8_t segments[], uint8_t length, uint8_t pos) {
 6ae:	fc 01       	movw	r30, r24
  TM1637_COMM_START;
 6b0:	84 b3       	in	r24, 0x14	; 20
 6b2:	80 61       	ori	r24, 0x10	; 16
 6b4:	84 bb       	out	0x14, r24	; 20
 6b6:	82 e4       	ldi	r24, 0x42	; 66
 6b8:	8a 95       	dec	r24
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <TM1637_setSegments+0xa>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <TM1637_setSegments+0x10>
  // Write TM1637_CMD_SET_DATA + first digit address
  TM1637_writeByte(TM1637_CMD_SET_DATA | (pos & TM1637_MASK_POS));
 6be:	43 70       	andi	r20, 0x03	; 3
 6c0:	40 6c       	ori	r20, 0xC0	; 192
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	1d c0       	rjmp	.+58     	; 0x700 <TM1637_setSegments+0x52>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 6c6:	84 b3       	in	r24, 0x14	; 20
 6c8:	80 62       	ori	r24, 0x20	; 32
 6ca:	84 bb       	out	0x14, r24	; 20
 6cc:	81 e2       	ldi	r24, 0x21	; 33
 6ce:	8a 95       	dec	r24
 6d0:	f1 f7       	brne	.-4      	; 0x6ce <TM1637_setSegments+0x20>
 6d2:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 6d4:	40 ff       	sbrs	r20, 0
 6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <TM1637_setSegments+0x32>
 6d8:	84 b3       	in	r24, 0x14	; 20
 6da:	8f 7e       	andi	r24, 0xEF	; 239
 6dc:	84 bb       	out	0x14, r24	; 20
 6de:	03 c0       	rjmp	.+6      	; 0x6e6 <TM1637_setSegments+0x38>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 6e0:	84 b3       	in	r24, 0x14	; 20
 6e2:	80 61       	ori	r24, 0x10	; 16
 6e4:	84 bb       	out	0x14, r24	; 20
 6e6:	81 e2       	ldi	r24, 0x21	; 33
 6e8:	8a 95       	dec	r24
 6ea:	f1 f7       	brne	.-4      	; 0x6e8 <TM1637_setSegments+0x3a>
 6ec:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 6ee:	84 b3       	in	r24, 0x14	; 20
 6f0:	8f 7d       	andi	r24, 0xDF	; 223
 6f2:	84 bb       	out	0x14, r24	; 20
 6f4:	82 e4       	ldi	r24, 0x42	; 66
 6f6:	8a 95       	dec	r24
 6f8:	f1 f7       	brne	.-4      	; 0x6f6 <TM1637_setSegments+0x48>
 6fa:	00 c0       	rjmp	.+0      	; 0x6fc <TM1637_setSegments+0x4e>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 6fc:	46 95       	lsr	r20
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 6fe:	9f 5f       	subi	r25, 0xFF	; 255
 700:	98 30       	cpi	r25, 0x08	; 8
 702:	08 f3       	brcs	.-62     	; 0x6c6 <TM1637_setSegments+0x18>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 704:	84 b3       	in	r24, 0x14	; 20
 706:	80 62       	ori	r24, 0x20	; 32
 708:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 70a:	84 b3       	in	r24, 0x14	; 20
 70c:	8f 7e       	andi	r24, 0xEF	; 239
 70e:	84 bb       	out	0x14, r24	; 20
 710:	82 e4       	ldi	r24, 0x42	; 66
 712:	8a 95       	dec	r24
 714:	f1 f7       	brne	.-4      	; 0x712 <TM1637_setSegments+0x64>
 716:	00 c0       	rjmp	.+0      	; 0x718 <TM1637_setSegments+0x6a>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 718:	84 b3       	in	r24, 0x14	; 20
 71a:	8f 7d       	andi	r24, 0xDF	; 223
 71c:	84 bb       	out	0x14, r24	; 20
 71e:	81 e2       	ldi	r24, 0x21	; 33
 720:	8a 95       	dec	r24
 722:	f1 f7       	brne	.-4      	; 0x720 <TM1637_setSegments+0x72>
 724:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 726:	9c 99       	sbic	0x13, 4	; 19
 728:	03 c0       	rjmp	.+6      	; 0x730 <TM1637_setSegments+0x82>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 72a:	84 b3       	in	r24, 0x14	; 20
 72c:	80 61       	ori	r24, 0x10	; 16
 72e:	84 bb       	out	0x14, r24	; 20
 730:	81 e2       	ldi	r24, 0x21	; 33
 732:	8a 95       	dec	r24
 734:	f1 f7       	brne	.-4      	; 0x732 <TM1637_setSegments+0x84>
 736:	00 00       	nop
void TM1637_setSegments(const uint8_t segments[], uint8_t length, uint8_t pos) {
  TM1637_COMM_START;
  // Write TM1637_CMD_SET_DATA + first digit address
  TM1637_writeByte(TM1637_CMD_SET_DATA | (pos & TM1637_MASK_POS));
  // Write data bytes
  for (uint8_t i = 0; i < length; i++)
 738:	40 e0       	ldi	r20, 0x00	; 0
 73a:	40 c0       	rjmp	.+128    	; 0x7bc <TM1637_setSegments+0x10e>
    TM1637_writeByte(segments[i]);
 73c:	df 01       	movw	r26, r30
 73e:	a4 0f       	add	r26, r20
 740:	b1 1d       	adc	r27, r1
 742:	3c 91       	ld	r19, X
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 744:	20 e0       	ldi	r18, 0x00	; 0
 746:	1d c0       	rjmp	.+58     	; 0x782 <TM1637_setSegments+0xd4>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 748:	94 b3       	in	r25, 0x14	; 20
 74a:	90 62       	ori	r25, 0x20	; 32
 74c:	94 bb       	out	0x14, r25	; 20
 74e:	81 e2       	ldi	r24, 0x21	; 33
 750:	8a 95       	dec	r24
 752:	f1 f7       	brne	.-4      	; 0x750 <TM1637_setSegments+0xa2>
 754:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 756:	30 ff       	sbrs	r19, 0
 758:	04 c0       	rjmp	.+8      	; 0x762 <TM1637_setSegments+0xb4>
 75a:	94 b3       	in	r25, 0x14	; 20
 75c:	9f 7e       	andi	r25, 0xEF	; 239
 75e:	94 bb       	out	0x14, r25	; 20
 760:	03 c0       	rjmp	.+6      	; 0x768 <TM1637_setSegments+0xba>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 762:	94 b3       	in	r25, 0x14	; 20
 764:	90 61       	ori	r25, 0x10	; 16
 766:	94 bb       	out	0x14, r25	; 20
 768:	81 e2       	ldi	r24, 0x21	; 33
 76a:	8a 95       	dec	r24
 76c:	f1 f7       	brne	.-4      	; 0x76a <TM1637_setSegments+0xbc>
 76e:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 770:	94 b3       	in	r25, 0x14	; 20
 772:	9f 7d       	andi	r25, 0xDF	; 223
 774:	94 bb       	out	0x14, r25	; 20
 776:	82 e4       	ldi	r24, 0x42	; 66
 778:	8a 95       	dec	r24
 77a:	f1 f7       	brne	.-4      	; 0x778 <TM1637_setSegments+0xca>
 77c:	00 c0       	rjmp	.+0      	; 0x77e <TM1637_setSegments+0xd0>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 77e:	36 95       	lsr	r19
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 780:	2f 5f       	subi	r18, 0xFF	; 255
 782:	28 30       	cpi	r18, 0x08	; 8
 784:	08 f3       	brcs	.-62     	; 0x748 <TM1637_setSegments+0x9a>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 786:	84 b3       	in	r24, 0x14	; 20
 788:	80 62       	ori	r24, 0x20	; 32
 78a:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 78c:	84 b3       	in	r24, 0x14	; 20
 78e:	8f 7e       	andi	r24, 0xEF	; 239
 790:	84 bb       	out	0x14, r24	; 20
 792:	82 e4       	ldi	r24, 0x42	; 66
 794:	8a 95       	dec	r24
 796:	f1 f7       	brne	.-4      	; 0x794 <TM1637_setSegments+0xe6>
 798:	00 c0       	rjmp	.+0      	; 0x79a <TM1637_setSegments+0xec>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 79a:	94 b3       	in	r25, 0x14	; 20
 79c:	9f 7d       	andi	r25, 0xDF	; 223
 79e:	94 bb       	out	0x14, r25	; 20
 7a0:	81 e2       	ldi	r24, 0x21	; 33
 7a2:	8a 95       	dec	r24
 7a4:	f1 f7       	brne	.-4      	; 0x7a2 <TM1637_setSegments+0xf4>
 7a6:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 7a8:	9c 99       	sbic	0x13, 4	; 19
 7aa:	03 c0       	rjmp	.+6      	; 0x7b2 <TM1637_setSegments+0x104>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 7ac:	84 b3       	in	r24, 0x14	; 20
 7ae:	80 61       	ori	r24, 0x10	; 16
 7b0:	84 bb       	out	0x14, r24	; 20
 7b2:	81 e2       	ldi	r24, 0x21	; 33
 7b4:	8a 95       	dec	r24
 7b6:	f1 f7       	brne	.-4      	; 0x7b4 <TM1637_setSegments+0x106>
 7b8:	00 00       	nop
void TM1637_setSegments(const uint8_t segments[], uint8_t length, uint8_t pos) {
  TM1637_COMM_START;
  // Write TM1637_CMD_SET_DATA + first digit address
  TM1637_writeByte(TM1637_CMD_SET_DATA | (pos & TM1637_MASK_POS));
  // Write data bytes
  for (uint8_t i = 0; i < length; i++)
 7ba:	4f 5f       	subi	r20, 0xFF	; 255
 7bc:	46 17       	cp	r20, r22
 7be:	08 f4       	brcc	.+2      	; 0x7c2 <TM1637_setSegments+0x114>
 7c0:	bd cf       	rjmp	.-134    	; 0x73c <TM1637_setSegments+0x8e>
    TM1637_writeByte(segments[i]);
  TM1637_COMM_STOP;
 7c2:	84 b3       	in	r24, 0x14	; 20
 7c4:	80 62       	ori	r24, 0x20	; 32
 7c6:	84 bb       	out	0x14, r24	; 20
 7c8:	81 e2       	ldi	r24, 0x21	; 33
 7ca:	8a 95       	dec	r24
 7cc:	f1 f7       	brne	.-4      	; 0x7ca <TM1637_setSegments+0x11c>
 7ce:	00 00       	nop
 7d0:	84 b3       	in	r24, 0x14	; 20
 7d2:	80 61       	ori	r24, 0x10	; 16
 7d4:	84 bb       	out	0x14, r24	; 20
 7d6:	81 e2       	ldi	r24, 0x21	; 33
 7d8:	8a 95       	dec	r24
 7da:	f1 f7       	brne	.-4      	; 0x7d8 <TM1637_setSegments+0x12a>
 7dc:	00 00       	nop
 7de:	84 b3       	in	r24, 0x14	; 20
 7e0:	8f 7d       	andi	r24, 0xDF	; 223
 7e2:	84 bb       	out	0x14, r24	; 20
 7e4:	82 e4       	ldi	r24, 0x42	; 66
 7e6:	8a 95       	dec	r24
 7e8:	f1 f7       	brne	.-4      	; 0x7e6 <TM1637_setSegments+0x138>
 7ea:	00 c0       	rjmp	.+0      	; 0x7ec <TM1637_setSegments+0x13e>
 7ec:	84 b3       	in	r24, 0x14	; 20
 7ee:	8f 7e       	andi	r24, 0xEF	; 239
 7f0:	84 bb       	out	0x14, r24	; 20
 7f2:	82 e4       	ldi	r24, 0x42	; 66
 7f4:	8a 95       	dec	r24
 7f6:	f1 f7       	brne	.-4      	; 0x7f4 <TM1637_setSegments+0x146>
 7f8:	00 c0       	rjmp	.+0      	; 0x7fa <TM1637_setSegments+0x14c>
 7fa:	08 95       	ret

000007fc <TM1637_clear>:
}

void TM1637_clear(void) {
  TM1637_COMM_START;
 7fc:	84 b3       	in	r24, 0x14	; 20
 7fe:	80 61       	ori	r24, 0x10	; 16
 800:	84 bb       	out	0x14, r24	; 20
 802:	82 e4       	ldi	r24, 0x42	; 66
 804:	8a 95       	dec	r24
 806:	f1 f7       	brne	.-4      	; 0x804 <TM1637_clear+0x8>
 808:	00 c0       	rjmp	.+0      	; 0x80a <TM1637_clear+0xe>
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	20 ec       	ldi	r18, 0xC0	; 192
 80e:	1d c0       	rjmp	.+58     	; 0x84a <TM1637_clear+0x4e>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 810:	84 b3       	in	r24, 0x14	; 20
 812:	80 62       	ori	r24, 0x20	; 32
 814:	84 bb       	out	0x14, r24	; 20
 816:	81 e2       	ldi	r24, 0x21	; 33
 818:	8a 95       	dec	r24
 81a:	f1 f7       	brne	.-4      	; 0x818 <TM1637_clear+0x1c>
 81c:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 81e:	20 ff       	sbrs	r18, 0
 820:	04 c0       	rjmp	.+8      	; 0x82a <TM1637_clear+0x2e>
 822:	84 b3       	in	r24, 0x14	; 20
 824:	8f 7e       	andi	r24, 0xEF	; 239
 826:	84 bb       	out	0x14, r24	; 20
 828:	03 c0       	rjmp	.+6      	; 0x830 <TM1637_clear+0x34>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 82a:	84 b3       	in	r24, 0x14	; 20
 82c:	80 61       	ori	r24, 0x10	; 16
 82e:	84 bb       	out	0x14, r24	; 20
 830:	81 e2       	ldi	r24, 0x21	; 33
 832:	8a 95       	dec	r24
 834:	f1 f7       	brne	.-4      	; 0x832 <TM1637_clear+0x36>
 836:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 838:	84 b3       	in	r24, 0x14	; 20
 83a:	8f 7d       	andi	r24, 0xDF	; 223
 83c:	84 bb       	out	0x14, r24	; 20
 83e:	82 e4       	ldi	r24, 0x42	; 66
 840:	8a 95       	dec	r24
 842:	f1 f7       	brne	.-4      	; 0x840 <TM1637_clear+0x44>
 844:	00 c0       	rjmp	.+0      	; 0x846 <TM1637_clear+0x4a>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 846:	26 95       	lsr	r18
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 848:	9f 5f       	subi	r25, 0xFF	; 255
 84a:	98 30       	cpi	r25, 0x08	; 8
 84c:	08 f3       	brcs	.-62     	; 0x810 <TM1637_clear+0x14>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 84e:	84 b3       	in	r24, 0x14	; 20
 850:	80 62       	ori	r24, 0x20	; 32
 852:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 854:	84 b3       	in	r24, 0x14	; 20
 856:	8f 7e       	andi	r24, 0xEF	; 239
 858:	84 bb       	out	0x14, r24	; 20
 85a:	82 e4       	ldi	r24, 0x42	; 66
 85c:	8a 95       	dec	r24
 85e:	f1 f7       	brne	.-4      	; 0x85c <TM1637_clear+0x60>
 860:	00 c0       	rjmp	.+0      	; 0x862 <TM1637_clear+0x66>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 862:	84 b3       	in	r24, 0x14	; 20
 864:	8f 7d       	andi	r24, 0xDF	; 223
 866:	84 bb       	out	0x14, r24	; 20
 868:	81 e2       	ldi	r24, 0x21	; 33
 86a:	8a 95       	dec	r24
 86c:	f1 f7       	brne	.-4      	; 0x86a <TM1637_clear+0x6e>
 86e:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 870:	9c 99       	sbic	0x13, 4	; 19
 872:	03 c0       	rjmp	.+6      	; 0x87a <TM1637_clear+0x7e>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 874:	84 b3       	in	r24, 0x14	; 20
 876:	80 61       	ori	r24, 0x10	; 16
 878:	84 bb       	out	0x14, r24	; 20
 87a:	81 e2       	ldi	r24, 0x21	; 33
 87c:	8a 95       	dec	r24
 87e:	f1 f7       	brne	.-4      	; 0x87c <TM1637_clear+0x80>
 880:	00 00       	nop

void TM1637_clear(void) {
  TM1637_COMM_START;
  TM1637_writeByte(TM1637_CMD_SET_DATA);
  // Write blank segment data bytes
  for (uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
 882:	20 e0       	ldi	r18, 0x00	; 0
 884:	35 c0       	rjmp	.+106    	; 0x8f0 <TM1637_clear+0xf4>


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 886:	84 b3       	in	r24, 0x14	; 20
 888:	80 62       	ori	r24, 0x20	; 32
 88a:	84 bb       	out	0x14, r24	; 20
 88c:	81 e2       	ldi	r24, 0x21	; 33
 88e:	8a 95       	dec	r24
 890:	f1 f7       	brne	.-4      	; 0x88e <TM1637_clear+0x92>
 892:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 894:	84 b3       	in	r24, 0x14	; 20
 896:	80 61       	ori	r24, 0x10	; 16
 898:	84 bb       	out	0x14, r24	; 20
 89a:	81 e2       	ldi	r24, 0x21	; 33
 89c:	8a 95       	dec	r24
 89e:	f1 f7       	brne	.-4      	; 0x89c <TM1637_clear+0xa0>
 8a0:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 8a2:	84 b3       	in	r24, 0x14	; 20
 8a4:	8f 7d       	andi	r24, 0xDF	; 223
 8a6:	84 bb       	out	0x14, r24	; 20
 8a8:	82 e4       	ldi	r24, 0x42	; 66
 8aa:	8a 95       	dec	r24
 8ac:	f1 f7       	brne	.-4      	; 0x8aa <TM1637_clear+0xae>
 8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <TM1637_clear+0xb4>
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 8b0:	9f 5f       	subi	r25, 0xFF	; 255
 8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <TM1637_clear+0xba>
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	98 30       	cpi	r25, 0x08	; 8
 8b8:	30 f3       	brcs	.-52     	; 0x886 <TM1637_clear+0x8a>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 8ba:	84 b3       	in	r24, 0x14	; 20
 8bc:	80 62       	ori	r24, 0x20	; 32
 8be:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 8c0:	84 b3       	in	r24, 0x14	; 20
 8c2:	8f 7e       	andi	r24, 0xEF	; 239
 8c4:	84 bb       	out	0x14, r24	; 20
 8c6:	82 e4       	ldi	r24, 0x42	; 66
 8c8:	8a 95       	dec	r24
 8ca:	f1 f7       	brne	.-4      	; 0x8c8 <TM1637_clear+0xcc>
 8cc:	00 c0       	rjmp	.+0      	; 0x8ce <TM1637_clear+0xd2>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 8ce:	84 b3       	in	r24, 0x14	; 20
 8d0:	8f 7d       	andi	r24, 0xDF	; 223
 8d2:	84 bb       	out	0x14, r24	; 20
 8d4:	81 e2       	ldi	r24, 0x21	; 33
 8d6:	8a 95       	dec	r24
 8d8:	f1 f7       	brne	.-4      	; 0x8d6 <TM1637_clear+0xda>
 8da:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 8dc:	9c 99       	sbic	0x13, 4	; 19
 8de:	03 c0       	rjmp	.+6      	; 0x8e6 <TM1637_clear+0xea>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 8e0:	84 b3       	in	r24, 0x14	; 20
 8e2:	80 61       	ori	r24, 0x10	; 16
 8e4:	84 bb       	out	0x14, r24	; 20
 8e6:	81 e2       	ldi	r24, 0x21	; 33
 8e8:	8a 95       	dec	r24
 8ea:	f1 f7       	brne	.-4      	; 0x8e8 <TM1637_clear+0xec>
 8ec:	00 00       	nop

void TM1637_clear(void) {
  TM1637_COMM_START;
  TM1637_writeByte(TM1637_CMD_SET_DATA);
  // Write blank segment data bytes
  for (uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
 8ee:	2f 5f       	subi	r18, 0xFF	; 255
 8f0:	24 30       	cpi	r18, 0x04	; 4
 8f2:	00 f3       	brcs	.-64     	; 0x8b4 <TM1637_clear+0xb8>
    TM1637_writeByte(TM1637_SPAT_BLANK);
  TM1637_COMM_STOP;
 8f4:	84 b3       	in	r24, 0x14	; 20
 8f6:	80 62       	ori	r24, 0x20	; 32
 8f8:	84 bb       	out	0x14, r24	; 20
 8fa:	81 e2       	ldi	r24, 0x21	; 33
 8fc:	8a 95       	dec	r24
 8fe:	f1 f7       	brne	.-4      	; 0x8fc <TM1637_clear+0x100>
 900:	00 00       	nop
 902:	84 b3       	in	r24, 0x14	; 20
 904:	80 61       	ori	r24, 0x10	; 16
 906:	84 bb       	out	0x14, r24	; 20
 908:	81 e2       	ldi	r24, 0x21	; 33
 90a:	8a 95       	dec	r24
 90c:	f1 f7       	brne	.-4      	; 0x90a <TM1637_clear+0x10e>
 90e:	00 00       	nop
 910:	84 b3       	in	r24, 0x14	; 20
 912:	8f 7d       	andi	r24, 0xDF	; 223
 914:	84 bb       	out	0x14, r24	; 20
 916:	82 e4       	ldi	r24, 0x42	; 66
 918:	8a 95       	dec	r24
 91a:	f1 f7       	brne	.-4      	; 0x918 <TM1637_clear+0x11c>
 91c:	00 c0       	rjmp	.+0      	; 0x91e <TM1637_clear+0x122>
 91e:	84 b3       	in	r24, 0x14	; 20
 920:	8f 7e       	andi	r24, 0xEF	; 239
 922:	84 bb       	out	0x14, r24	; 20
 924:	82 e4       	ldi	r24, 0x42	; 66
 926:	8a 95       	dec	r24
 928:	f1 f7       	brne	.-4      	; 0x926 <TM1637_clear+0x12a>
 92a:	00 c0       	rjmp	.+0      	; 0x92c <TM1637_clear+0x130>
 92c:	08 95       	ret

0000092e <_exit>:
 92e:	f8 94       	cli

00000930 <__stop_program>:
 930:	ff cf       	rjmp	.-2      	; 0x930 <__stop_program>
