
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000069e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000069e  00000732  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006c  0080006c  0000073e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000073e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000770  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026da  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c3  00000000  00000000  00002fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010c9  00000000  00000000  00003869  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e8  00000000  00000000  00004934  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c2  00000000  00000000  00004c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d3f  00000000  00000000  000051de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00006f1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	0a c1       	rjmp	.+532    	; 0x218 <__vector_1>
   4:	33 c1       	rjmp	.+614    	; 0x26c <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	d9 c0       	rjmp	.+434    	; 0x1bc <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e9       	ldi	r30, 0x9E	; 158
  3a:	f6 e0       	ldi	r31, 0x06	; 6
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	af 36       	cpi	r26, 0x6F	; 111
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	31 d1       	rcall	.+610    	; 0x2bc <main>
  5a:	1f c3       	rjmp	.+1598   	; 0x69a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <select_display_digit>:
	0b11101111
};

uint8_t select_display_digit(uint8_t digit)
{
	if (digit >= 0 && digit < 10)
  5e:	8a 30       	cpi	r24, 0x0A	; 10
  60:	30 f4       	brcc	.+12     	; 0x6e <select_display_digit+0x10>
	{
		return display_digit[digit];
  62:	e8 2f       	mov	r30, r24
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	e0 5a       	subi	r30, 0xA0	; 160
  68:	ff 4f       	sbci	r31, 0xFF	; 255
  6a:	80 81       	ld	r24, Z
  6c:	08 95       	ret
	}
	else
	{
		return TM1637_SPAT_BLANK;
  6e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
  70:	08 95       	ret

00000072 <wakeup_display>:

void wakeup_display()
{
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	04 d2       	rcall	.+1032   	; 0x47e <TM1637_turnOnAndSetBrightness>
  76:	08 95       	ret

00000078 <print_time_on_display>:
}

void print_time_on_display()
{
  78:	ff 92       	push	r15
  7a:	0f 93       	push	r16
  7c:	1f 93       	push	r17
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	28 97       	sbiw	r28, 0x08	; 8
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	f8 94       	cli
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	0f be       	out	0x3f, r0	; 63
  90:	cd bf       	out	0x3d, r28	; 61
	uint8_t d_time[] =
	{
		get_hour() / DIVIDER,
  92:	54 d0       	rcall	.+168    	; 0x13c <get_hour>
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
}

void print_time_on_display()
{
	uint8_t d_time[] =
  94:	1d ec       	ldi	r17, 0xCD	; 205
  96:	81 9f       	mul	r24, r17
  98:	81 2d       	mov	r24, r1
  9a:	11 24       	eor	r1, r1
  9c:	86 95       	lsr	r24
  9e:	86 95       	lsr	r24
  a0:	86 95       	lsr	r24
  a2:	89 83       	std	Y+1, r24	; 0x01
	{
		get_hour() / DIVIDER,
		get_hour() % DIVIDER,
  a4:	4b d0       	rcall	.+150    	; 0x13c <get_hour>
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
}

void print_time_on_display()
{
	uint8_t d_time[] =
  a6:	81 9f       	mul	r24, r17
  a8:	91 2d       	mov	r25, r1
  aa:	11 24       	eor	r1, r1
  ac:	96 95       	lsr	r25
  ae:	96 95       	lsr	r25
  b0:	96 95       	lsr	r25
  b2:	99 0f       	add	r25, r25
  b4:	29 2f       	mov	r18, r25
  b6:	22 0f       	add	r18, r18
  b8:	22 0f       	add	r18, r18
  ba:	92 0f       	add	r25, r18
  bc:	89 1b       	sub	r24, r25
  be:	8a 83       	std	Y+2, r24	; 0x02
	{
		get_hour() / DIVIDER,
		get_hour() % DIVIDER,
		get_min() / DIVIDER,
  c0:	40 d0       	rcall	.+128    	; 0x142 <get_min>
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
}

void print_time_on_display()
{
	uint8_t d_time[] =
  c2:	81 9f       	mul	r24, r17
  c4:	81 2d       	mov	r24, r1
  c6:	11 24       	eor	r1, r1
  c8:	86 95       	lsr	r24
  ca:	86 95       	lsr	r24
  cc:	86 95       	lsr	r24
  ce:	8b 83       	std	Y+3, r24	; 0x03
	{
		get_hour() / DIVIDER,
		get_hour() % DIVIDER,
		get_min() / DIVIDER,
		get_min() % DIVIDER
  d0:	38 d0       	rcall	.+112    	; 0x142 <get_min>
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
}

void print_time_on_display()
{
	uint8_t d_time[] =
  d2:	81 9f       	mul	r24, r17
  d4:	11 2d       	mov	r17, r1
  d6:	11 24       	eor	r1, r1
  d8:	16 95       	lsr	r17
  da:	16 95       	lsr	r17
  dc:	16 95       	lsr	r17
  de:	11 0f       	add	r17, r17
  e0:	91 2f       	mov	r25, r17
  e2:	99 0f       	add	r25, r25
  e4:	99 0f       	add	r25, r25
  e6:	19 0f       	add	r17, r25
  e8:	81 1b       	sub	r24, r17
  ea:	8c 83       	std	Y+4, r24	; 0x04
		get_hour() % DIVIDER,
		get_min() / DIVIDER,
		get_min() % DIVIDER
	};
	uint8_t out_time[TM1637_DIGITS_COUNT];
	for(uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
  ec:	f1 2c       	mov	r15, r1
  ee:	12 c0       	rjmp	.+36     	; 0x114 <print_time_on_display+0x9c>
	{
		out_time[i] = select_display_digit(d_time[i]);
  f0:	0f 2d       	mov	r16, r15
  f2:	10 e0       	ldi	r17, 0x00	; 0
  f4:	e1 e0       	ldi	r30, 0x01	; 1
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	ec 0f       	add	r30, r28
  fa:	fd 1f       	adc	r31, r29
  fc:	e0 0f       	add	r30, r16
  fe:	f1 1f       	adc	r31, r17
 100:	80 81       	ld	r24, Z
 102:	ad df       	rcall	.-166    	; 0x5e <select_display_digit>
 104:	e5 e0       	ldi	r30, 0x05	; 5
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	ec 0f       	add	r30, r28
 10a:	fd 1f       	adc	r31, r29
 10c:	e0 0f       	add	r30, r16
 10e:	f1 1f       	adc	r31, r17
 110:	80 83       	st	Z, r24
		get_hour() % DIVIDER,
		get_min() / DIVIDER,
		get_min() % DIVIDER
	};
	uint8_t out_time[TM1637_DIGITS_COUNT];
	for(uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
 112:	f3 94       	inc	r15
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	8f 15       	cp	r24, r15
 118:	58 f7       	brcc	.-42     	; 0xf0 <print_time_on_display+0x78>
	{
		out_time[i] = select_display_digit(d_time[i]);
	}
	TM1637_setSegments(out_time, TM1637_DIGITS_COUNT, START_POS);
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	64 e0       	ldi	r22, 0x04	; 4
 11e:	ce 01       	movw	r24, r28
 120:	05 96       	adiw	r24, 0x05	; 5
 122:	14 d2       	rcall	.+1064   	; 0x54c <TM1637_setSegments>
 124:	28 96       	adiw	r28, 0x08	; 8
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	f8 94       	cli
 12a:	de bf       	out	0x3e, r29	; 62
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	cd bf       	out	0x3d, r28	; 61
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	ff 90       	pop	r15
 13a:	08 95       	ret

0000013c <get_hour>:

/* секунды по значению */
uint8_t get_sec()
{
	return seconds;
}
 13c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hour>
 140:	08 95       	ret

00000142 <get_min>:
 142:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <minutes>
 146:	08 95       	ret

00000148 <control_seconds>:

void control_seconds()
{
	if (seconds >= SEC_OVF)
 148:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <seconds>
 14c:	8c 33       	cpi	r24, 0x3C	; 60
 14e:	38 f0       	brcs	.+14     	; 0x15e <control_seconds+0x16>
	{
		minutes++;
 150:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <minutes>
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <minutes>
		seconds = 0;
 15a:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <seconds>
 15e:	08 95       	ret

00000160 <control_min>:
	}
}

void control_min()
{
	if (minutes >= MIN_OVF)
 160:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <minutes>
 164:	8c 33       	cpi	r24, 0x3C	; 60
 166:	38 f0       	brcs	.+14     	; 0x176 <control_min+0x16>
	{
		hour++;
 168:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hour>
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <hour>
		minutes = 0;
 172:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <minutes>
 176:	08 95       	ret

00000178 <control_hour>:
	}
}

void control_hour()
{
	if (hour == HOUR_OVF && minutes >= MIN_OVF)
 178:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hour>
 17c:	87 31       	cpi	r24, 0x17	; 23
 17e:	51 f4       	brne	.+20     	; 0x194 <control_hour+0x1c>
 180:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <minutes>
 184:	8c 33       	cpi	r24, 0x3C	; 60
 186:	30 f0       	brcs	.+12     	; 0x194 <control_hour+0x1c>
	{
		hour = 0;
 188:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <hour>
		minutes = 0;
 18c:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <minutes>
		seconds = 0;
 190:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <seconds>
 194:	08 95       	ret

00000196 <control_time>:
}

/* конвертация секунд в минуты и тд */
void control_time()
{
	control_seconds();
 196:	d8 df       	rcall	.-80     	; 0x148 <control_seconds>
	control_min();
 198:	e3 df       	rcall	.-58     	; 0x160 <control_min>
	control_hour();
 19a:	ee df       	rcall	.-36     	; 0x178 <control_hour>
 19c:	08 95       	ret

0000019e <activate_sleep_mode>:
}

/* реализация спящего режима */
void activate_sleep_mode()
{
	if (interval >= 10)
 19e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 1a2:	8a 30       	cpi	r24, 0x0A	; 10
 1a4:	50 f0       	brcs	.+20     	; 0x1ba <activate_sleep_mode+0x1c>
	{	
		TM1637_turnOff();
 1a6:	03 d1       	rcall	.+518    	; 0x3ae <TM1637_turnOff>
		OCR2 = 1;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	83 bd       	out	0x23, r24	; 35
		/* жду сброс флагов */
		while (ASSR != ASSR_REG_REDY);
 1ac:	82 b5       	in	r24, 0x22	; 34
 1ae:	88 30       	cpi	r24, 0x08	; 8
 1b0:	e9 f7       	brne	.-6      	; 0x1ac <activate_sleep_mode+0xe>
		sleep_enable();
 1b2:	85 b7       	in	r24, 0x35	; 53
 1b4:	80 68       	ori	r24, 0x80	; 128
 1b6:	85 bf       	out	0x35, r24	; 53
		sleep_cpu();
 1b8:	88 95       	sleep
 1ba:	08 95       	ret

000001bc <__vector_4>:
	}
}

/* отсчет времени */
ISR(TIMER2_OVF_vect)
{
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	4f 93       	push	r20
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
	TCNT2 = 0;
 1de:	14 bc       	out	0x24, r1	; 36
	seconds += 2;
 1e0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <seconds>
 1e4:	8e 5f       	subi	r24, 0xFE	; 254
 1e6:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <seconds>
	interval += 2;
 1ea:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 1ee:	8e 5f       	subi	r24, 0xFE	; 254
 1f0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	control_time();
 1f4:	d0 df       	rcall	.-96     	; 0x196 <control_time>
}
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	5f 91       	pop	r21
 208:	4f 91       	pop	r20
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <__vector_1>:

/* выход из сна + метка когда кот ел */
ISR(INT0_vect)
{
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	2f 93       	push	r18
 224:	3f 93       	push	r19
 226:	4f 93       	push	r20
 228:	5f 93       	push	r21
 22a:	6f 93       	push	r22
 22c:	7f 93       	push	r23
 22e:	8f 93       	push	r24
 230:	9f 93       	push	r25
 232:	af 93       	push	r26
 234:	bf 93       	push	r27
 236:	ef 93       	push	r30
 238:	ff 93       	push	r31
	sleep_disable();
 23a:	85 b7       	in	r24, 0x35	; 53
 23c:	8f 77       	andi	r24, 0x7F	; 127
 23e:	85 bf       	out	0x35, r24	; 53
	control_time();
 240:	aa df       	rcall	.-172    	; 0x196 <control_time>
	interval = 0;
 242:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
	wakeup_display();
 246:	15 df       	rcall	.-470    	; 0x72 <wakeup_display>
	print_time_on_display();
 248:	17 df       	rcall	.-466    	; 0x78 <print_time_on_display>
}
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <__vector_2>:

ISR(INT1_vect)
{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
	/*_delay_us(1);
	lcd_wakeup();
	event_listener();
	interval = 0;*/
}
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <start_timer2_async>:

/* настройка Timer/Counter2 */
void start_timer2_async()
{
	ASSR |= (1 << AS2); // вклю асинхронный режим
 280:	82 b5       	in	r24, 0x22	; 34
 282:	88 60       	ori	r24, 0x08	; 8
 284:	82 bd       	out	0x22, r24	; 34
	/* чищу регистры таймера от мусора */
	TCCR2 = 0;
 286:	15 bc       	out	0x25, r1	; 37
	OCR2 = 0;
 288:	13 bc       	out	0x23, r1	; 35
	TCNT2 = 0;
 28a:	14 bc       	out	0x24, r1	; 36
	/* делитель частоты = 256 */
	TCCR2 |= (1 << CS22) | (1 << CS21);
 28c:	85 b5       	in	r24, 0x25	; 37
 28e:	86 60       	ori	r24, 0x06	; 6
 290:	85 bd       	out	0x25, r24	; 37
	/* жду сброс флагов для старта в асинхронном режиме */
	while (ASSR != ASSR_REG_REDY);
 292:	82 b5       	in	r24, 0x22	; 34
 294:	88 30       	cpi	r24, 0x08	; 8
 296:	e9 f7       	brne	.-6      	; 0x292 <start_timer2_async+0x12>
	/* чистим флаги прерываний */
	TIFR |= (1 << OCF2) | (1 << TOV2);
 298:	88 b7       	in	r24, 0x38	; 56
 29a:	80 6c       	ori	r24, 0xC0	; 192
 29c:	88 bf       	out	0x38, r24	; 56
	/* включаю прерывание по переполнению таймера */
	TIMSK |= (1 << TOIE2);
 29e:	89 b7       	in	r24, 0x39	; 57
 2a0:	80 64       	ori	r24, 0x40	; 64
 2a2:	89 bf       	out	0x39, r24	; 57
 2a4:	08 95       	ret

000002a6 <setup_ext_interrapt>:
}

/* настройка внешних прерываний */
void setup_ext_interrapt()
{
	GICR |= (1 << INT0) | (1 << INT1);
 2a6:	8b b7       	in	r24, 0x3b	; 59
 2a8:	80 6c       	ori	r24, 0xC0	; 192
 2aa:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC11);
 2ac:	85 b7       	in	r24, 0x35	; 53
 2ae:	88 60       	ori	r24, 0x08	; 8
 2b0:	85 bf       	out	0x35, r24	; 53
	DDRD = 0;
 2b2:	11 ba       	out	0x11, r1	; 17
	PORTD |= (1 << INT0_PIN) | (1 << INT1_PIN) | (1 << MENU_BTN) | (1 << UP_BTN) | (1 << DOWN_BTN);
 2b4:	82 b3       	in	r24, 0x12	; 18
 2b6:	8c 67       	ori	r24, 0x7C	; 124
 2b8:	82 bb       	out	0x12, r24	; 18
 2ba:	08 95       	ret

000002bc <main>:
}

int main(void)
{
	ACSR |= (1 << ACD); // ОТКЛЮЧЕНИЕ АЦП
 2bc:	88 b1       	in	r24, 0x08	; 8
 2be:	80 68       	ori	r24, 0x80	; 128
 2c0:	88 b9       	out	0x08, r24	; 8
	start_timer2_async();
 2c2:	de df       	rcall	.-68     	; 0x280 <start_timer2_async>
	setup_ext_interrapt();
 2c4:	f0 df       	rcall	.-32     	; 0x2a6 <setup_ext_interrapt>
	sei();
 2c6:	78 94       	sei
	
	TM1637_init();
 2c8:	09 d0       	rcall	.+18     	; 0x2dc <TM1637_init>
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	d8 d0       	rcall	.+432    	; 0x47e <TM1637_turnOnAndSetBrightness>
	print_time_on_display();
 2ce:	d4 de       	rcall	.-600    	; 0x78 <print_time_on_display>
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 2d0:	85 b7       	in	r24, 0x35	; 53
 2d2:	8f 78       	andi	r24, 0x8F	; 143
 2d4:	80 63       	ori	r24, 0x30	; 48
 2d6:	85 bf       	out	0x35, r24	; 53
	
	while(1)
	{
		activate_sleep_mode();
 2d8:	62 df       	rcall	.-316    	; 0x19e <activate_sleep_mode>
 2da:	fe cf       	rjmp	.-4      	; 0x2d8 <main+0x1c>

000002dc <TM1637_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2dc:	84 b3       	in	r24, 0x14	; 20
 2de:	8f 7e       	andi	r24, 0xEF	; 239
 2e0:	84 bb       	out	0x14, r24	; 20
 2e2:	84 b3       	in	r24, 0x14	; 20
 2e4:	8f 7d       	andi	r24, 0xDF	; 223
 2e6:	84 bb       	out	0x14, r24	; 20
 2e8:	85 b3       	in	r24, 0x15	; 21
 2ea:	8f 7c       	andi	r24, 0xCF	; 207
 2ec:	85 bb       	out	0x15, r24	; 21
 2ee:	84 b3       	in	r24, 0x14	; 20
 2f0:	80 61       	ori	r24, 0x10	; 16
 2f2:	84 bb       	out	0x14, r24	; 20
 2f4:	82 e4       	ldi	r24, 0x42	; 66
 2f6:	8a 95       	dec	r24
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <TM1637_init+0x1a>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <TM1637_init+0x20>
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	20 e4       	ldi	r18, 0x40	; 64
 300:	1d c0       	rjmp	.+58     	; 0x33c <TM1637_init+0x60>
 302:	84 b3       	in	r24, 0x14	; 20
 304:	80 62       	ori	r24, 0x20	; 32
 306:	84 bb       	out	0x14, r24	; 20
 308:	81 e2       	ldi	r24, 0x21	; 33
 30a:	8a 95       	dec	r24
 30c:	f1 f7       	brne	.-4      	; 0x30a <TM1637_init+0x2e>
 30e:	00 00       	nop
 310:	20 ff       	sbrs	r18, 0
 312:	04 c0       	rjmp	.+8      	; 0x31c <TM1637_init+0x40>
 314:	84 b3       	in	r24, 0x14	; 20
 316:	8f 7e       	andi	r24, 0xEF	; 239
 318:	84 bb       	out	0x14, r24	; 20
 31a:	03 c0       	rjmp	.+6      	; 0x322 <TM1637_init+0x46>
 31c:	84 b3       	in	r24, 0x14	; 20
 31e:	80 61       	ori	r24, 0x10	; 16
 320:	84 bb       	out	0x14, r24	; 20
 322:	81 e2       	ldi	r24, 0x21	; 33
 324:	8a 95       	dec	r24
 326:	f1 f7       	brne	.-4      	; 0x324 <TM1637_init+0x48>
 328:	00 00       	nop
 32a:	84 b3       	in	r24, 0x14	; 20
 32c:	8f 7d       	andi	r24, 0xDF	; 223
 32e:	84 bb       	out	0x14, r24	; 20
 330:	82 e4       	ldi	r24, 0x42	; 66
 332:	8a 95       	dec	r24
 334:	f1 f7       	brne	.-4      	; 0x332 <TM1637_init+0x56>
 336:	00 c0       	rjmp	.+0      	; 0x338 <TM1637_init+0x5c>
 338:	26 95       	lsr	r18
 33a:	9f 5f       	subi	r25, 0xFF	; 255
 33c:	98 30       	cpi	r25, 0x08	; 8
 33e:	08 f3       	brcs	.-62     	; 0x302 <TM1637_init+0x26>
 340:	84 b3       	in	r24, 0x14	; 20
 342:	80 62       	ori	r24, 0x20	; 32
 344:	84 bb       	out	0x14, r24	; 20
 346:	84 b3       	in	r24, 0x14	; 20
 348:	8f 7e       	andi	r24, 0xEF	; 239
 34a:	84 bb       	out	0x14, r24	; 20
 34c:	82 e4       	ldi	r24, 0x42	; 66
 34e:	8a 95       	dec	r24
 350:	f1 f7       	brne	.-4      	; 0x34e <TM1637_init+0x72>
 352:	00 c0       	rjmp	.+0      	; 0x354 <TM1637_init+0x78>
 354:	84 b3       	in	r24, 0x14	; 20
 356:	8f 7d       	andi	r24, 0xDF	; 223
 358:	84 bb       	out	0x14, r24	; 20
 35a:	81 e2       	ldi	r24, 0x21	; 33
 35c:	8a 95       	dec	r24
 35e:	f1 f7       	brne	.-4      	; 0x35c <TM1637_init+0x80>
 360:	00 00       	nop
 362:	9c 99       	sbic	0x13, 4	; 19
 364:	03 c0       	rjmp	.+6      	; 0x36c <TM1637_init+0x90>
 366:	84 b3       	in	r24, 0x14	; 20
 368:	80 61       	ori	r24, 0x10	; 16
 36a:	84 bb       	out	0x14, r24	; 20
 36c:	81 e2       	ldi	r24, 0x21	; 33
 36e:	8a 95       	dec	r24
 370:	f1 f7       	brne	.-4      	; 0x36e <TM1637_init+0x92>
 372:	00 00       	nop
 374:	84 b3       	in	r24, 0x14	; 20
 376:	80 62       	ori	r24, 0x20	; 32
 378:	84 bb       	out	0x14, r24	; 20
 37a:	81 e2       	ldi	r24, 0x21	; 33
 37c:	8a 95       	dec	r24
 37e:	f1 f7       	brne	.-4      	; 0x37c <TM1637_init+0xa0>
 380:	00 00       	nop
 382:	84 b3       	in	r24, 0x14	; 20
 384:	80 61       	ori	r24, 0x10	; 16
 386:	84 bb       	out	0x14, r24	; 20
 388:	81 e2       	ldi	r24, 0x21	; 33
 38a:	8a 95       	dec	r24
 38c:	f1 f7       	brne	.-4      	; 0x38a <TM1637_init+0xae>
 38e:	00 00       	nop
 390:	84 b3       	in	r24, 0x14	; 20
 392:	8f 7d       	andi	r24, 0xDF	; 223
 394:	84 bb       	out	0x14, r24	; 20
 396:	82 e4       	ldi	r24, 0x42	; 66
 398:	8a 95       	dec	r24
 39a:	f1 f7       	brne	.-4      	; 0x398 <TM1637_init+0xbc>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <TM1637_init+0xc2>
 39e:	84 b3       	in	r24, 0x14	; 20
 3a0:	8f 7e       	andi	r24, 0xEF	; 239
 3a2:	84 bb       	out	0x14, r24	; 20
 3a4:	82 e4       	ldi	r24, 0x42	; 66
 3a6:	8a 95       	dec	r24
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <TM1637_init+0xca>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <TM1637_init+0xd0>
 3ac:	08 95       	ret

000003ae <TM1637_turnOff>:
 3ae:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <TM1637_brightness_reg>
 3b2:	87 70       	andi	r24, 0x07	; 7
 3b4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <TM1637_brightness_reg>
 3b8:	84 b3       	in	r24, 0x14	; 20
 3ba:	80 61       	ori	r24, 0x10	; 16
 3bc:	84 bb       	out	0x14, r24	; 20
 3be:	82 e4       	ldi	r24, 0x42	; 66
 3c0:	8a 95       	dec	r24
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <TM1637_turnOff+0x12>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <TM1637_turnOff+0x18>
 3c6:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <TM1637_brightness_reg>
 3ca:	9f 70       	andi	r25, 0x0F	; 15
 3cc:	90 68       	ori	r25, 0x80	; 128
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	1d c0       	rjmp	.+58     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
 3d2:	84 b3       	in	r24, 0x14	; 20
 3d4:	80 62       	ori	r24, 0x20	; 32
 3d6:	84 bb       	out	0x14, r24	; 20
 3d8:	81 e2       	ldi	r24, 0x21	; 33
 3da:	8a 95       	dec	r24
 3dc:	f1 f7       	brne	.-4      	; 0x3da <TM1637_turnOff+0x2c>
 3de:	00 00       	nop
 3e0:	90 ff       	sbrs	r25, 0
 3e2:	04 c0       	rjmp	.+8      	; 0x3ec <TM1637_turnOff+0x3e>
 3e4:	84 b3       	in	r24, 0x14	; 20
 3e6:	8f 7e       	andi	r24, 0xEF	; 239
 3e8:	84 bb       	out	0x14, r24	; 20
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <TM1637_turnOff+0x44>
 3ec:	84 b3       	in	r24, 0x14	; 20
 3ee:	80 61       	ori	r24, 0x10	; 16
 3f0:	84 bb       	out	0x14, r24	; 20
 3f2:	81 e2       	ldi	r24, 0x21	; 33
 3f4:	8a 95       	dec	r24
 3f6:	f1 f7       	brne	.-4      	; 0x3f4 <TM1637_turnOff+0x46>
 3f8:	00 00       	nop
 3fa:	84 b3       	in	r24, 0x14	; 20
 3fc:	8f 7d       	andi	r24, 0xDF	; 223
 3fe:	84 bb       	out	0x14, r24	; 20
 400:	82 e4       	ldi	r24, 0x42	; 66
 402:	8a 95       	dec	r24
 404:	f1 f7       	brne	.-4      	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__DATA_REGION_LENGTH__+0x8>
 408:	96 95       	lsr	r25
 40a:	2f 5f       	subi	r18, 0xFF	; 255
 40c:	28 30       	cpi	r18, 0x08	; 8
 40e:	08 f3       	brcs	.-62     	; 0x3d2 <TM1637_turnOff+0x24>
 410:	84 b3       	in	r24, 0x14	; 20
 412:	80 62       	ori	r24, 0x20	; 32
 414:	84 bb       	out	0x14, r24	; 20
 416:	84 b3       	in	r24, 0x14	; 20
 418:	8f 7e       	andi	r24, 0xEF	; 239
 41a:	84 bb       	out	0x14, r24	; 20
 41c:	82 e4       	ldi	r24, 0x42	; 66
 41e:	8a 95       	dec	r24
 420:	f1 f7       	brne	.-4      	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__DATA_REGION_LENGTH__+0x24>
 424:	84 b3       	in	r24, 0x14	; 20
 426:	8f 7d       	andi	r24, 0xDF	; 223
 428:	84 bb       	out	0x14, r24	; 20
 42a:	81 e2       	ldi	r24, 0x21	; 33
 42c:	8a 95       	dec	r24
 42e:	f1 f7       	brne	.-4      	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
 430:	00 00       	nop
 432:	9c 99       	sbic	0x13, 4	; 19
 434:	03 c0       	rjmp	.+6      	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
 436:	84 b3       	in	r24, 0x14	; 20
 438:	80 61       	ori	r24, 0x10	; 16
 43a:	84 bb       	out	0x14, r24	; 20
 43c:	81 e2       	ldi	r24, 0x21	; 33
 43e:	8a 95       	dec	r24
 440:	f1 f7       	brne	.-4      	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
 442:	00 00       	nop
 444:	84 b3       	in	r24, 0x14	; 20
 446:	80 62       	ori	r24, 0x20	; 32
 448:	84 bb       	out	0x14, r24	; 20
 44a:	81 e2       	ldi	r24, 0x21	; 33
 44c:	8a 95       	dec	r24
 44e:	f1 f7       	brne	.-4      	; 0x44c <__DATA_REGION_LENGTH__+0x4c>
 450:	00 00       	nop
 452:	84 b3       	in	r24, 0x14	; 20
 454:	80 61       	ori	r24, 0x10	; 16
 456:	84 bb       	out	0x14, r24	; 20
 458:	81 e2       	ldi	r24, 0x21	; 33
 45a:	8a 95       	dec	r24
 45c:	f1 f7       	brne	.-4      	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
 45e:	00 00       	nop
 460:	84 b3       	in	r24, 0x14	; 20
 462:	8f 7d       	andi	r24, 0xDF	; 223
 464:	84 bb       	out	0x14, r24	; 20
 466:	82 e4       	ldi	r24, 0x42	; 66
 468:	8a 95       	dec	r24
 46a:	f1 f7       	brne	.-4      	; 0x468 <__stack+0x9>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <__stack+0xf>
 46e:	84 b3       	in	r24, 0x14	; 20
 470:	8f 7e       	andi	r24, 0xEF	; 239
 472:	84 bb       	out	0x14, r24	; 20
 474:	82 e4       	ldi	r24, 0x42	; 66
 476:	8a 95       	dec	r24
 478:	f1 f7       	brne	.-4      	; 0x476 <__stack+0x17>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <__stack+0x1d>
 47c:	08 95       	ret

0000047e <TM1637_turnOnAndSetBrightness>:
  TM1637_brightness_reg = (TM1637_brightness_reg & TM1637_MASK_ON_OFF) | (brightness & TM1637_MASK_BRIGHTNESS);
  TM1637_writeBrightnessReg();
}

void TM1637_turnOnAndSetBrightness(uint8_t brightness) {
  TM1637_brightness_reg = TM1637_MASK_ON_OFF | (brightness & TM1637_MASK_BRIGHTNESS);
 47e:	87 70       	andi	r24, 0x07	; 7
 480:	88 60       	ori	r24, 0x08	; 8
 482:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <TM1637_brightness_reg>
  TM1637_COMM_STOP;
}

static inline void TM1637_writeBrightnessReg(void) {
  // Write TM1637_CMD_SET_BRIGHTNESS + TM1637_brightness_reg
  TM1637_COMM_START;
 486:	84 b3       	in	r24, 0x14	; 20
 488:	80 61       	ori	r24, 0x10	; 16
 48a:	84 bb       	out	0x14, r24	; 20
 48c:	82 e4       	ldi	r24, 0x42	; 66
 48e:	8a 95       	dec	r24
 490:	f1 f7       	brne	.-4      	; 0x48e <TM1637_turnOnAndSetBrightness+0x10>
 492:	00 c0       	rjmp	.+0      	; 0x494 <TM1637_turnOnAndSetBrightness+0x16>
  TM1637_writeByte(TM1637_CMD_SET_BRIGHTNESS | (TM1637_brightness_reg & TM1637_MASK_BRIGHTNESS_REG));
 494:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <TM1637_brightness_reg>
 498:	9f 70       	andi	r25, 0x0F	; 15
 49a:	90 68       	ori	r25, 0x80	; 128
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 49c:	20 e0       	ldi	r18, 0x00	; 0
 49e:	1d c0       	rjmp	.+58     	; 0x4da <TM1637_turnOnAndSetBrightness+0x5c>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 4a0:	84 b3       	in	r24, 0x14	; 20
 4a2:	80 62       	ori	r24, 0x20	; 32
 4a4:	84 bb       	out	0x14, r24	; 20
 4a6:	81 e2       	ldi	r24, 0x21	; 33
 4a8:	8a 95       	dec	r24
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <TM1637_turnOnAndSetBrightness+0x2a>
 4ac:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 4ae:	90 ff       	sbrs	r25, 0
 4b0:	04 c0       	rjmp	.+8      	; 0x4ba <TM1637_turnOnAndSetBrightness+0x3c>
 4b2:	84 b3       	in	r24, 0x14	; 20
 4b4:	8f 7e       	andi	r24, 0xEF	; 239
 4b6:	84 bb       	out	0x14, r24	; 20
 4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <TM1637_turnOnAndSetBrightness+0x42>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 4ba:	84 b3       	in	r24, 0x14	; 20
 4bc:	80 61       	ori	r24, 0x10	; 16
 4be:	84 bb       	out	0x14, r24	; 20
 4c0:	81 e2       	ldi	r24, 0x21	; 33
 4c2:	8a 95       	dec	r24
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <TM1637_turnOnAndSetBrightness+0x44>
 4c6:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 4c8:	84 b3       	in	r24, 0x14	; 20
 4ca:	8f 7d       	andi	r24, 0xDF	; 223
 4cc:	84 bb       	out	0x14, r24	; 20
 4ce:	82 e4       	ldi	r24, 0x42	; 66
 4d0:	8a 95       	dec	r24
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <TM1637_turnOnAndSetBrightness+0x52>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <TM1637_turnOnAndSetBrightness+0x58>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 4d6:	96 95       	lsr	r25
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 4d8:	2f 5f       	subi	r18, 0xFF	; 255
 4da:	28 30       	cpi	r18, 0x08	; 8
 4dc:	08 f3       	brcs	.-62     	; 0x4a0 <TM1637_turnOnAndSetBrightness+0x22>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 4de:	84 b3       	in	r24, 0x14	; 20
 4e0:	80 62       	ori	r24, 0x20	; 32
 4e2:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 4e4:	84 b3       	in	r24, 0x14	; 20
 4e6:	8f 7e       	andi	r24, 0xEF	; 239
 4e8:	84 bb       	out	0x14, r24	; 20
 4ea:	82 e4       	ldi	r24, 0x42	; 66
 4ec:	8a 95       	dec	r24
 4ee:	f1 f7       	brne	.-4      	; 0x4ec <TM1637_turnOnAndSetBrightness+0x6e>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <TM1637_turnOnAndSetBrightness+0x74>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 4f2:	84 b3       	in	r24, 0x14	; 20
 4f4:	8f 7d       	andi	r24, 0xDF	; 223
 4f6:	84 bb       	out	0x14, r24	; 20
 4f8:	81 e2       	ldi	r24, 0x21	; 33
 4fa:	8a 95       	dec	r24
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <TM1637_turnOnAndSetBrightness+0x7c>
 4fe:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 500:	9c 99       	sbic	0x13, 4	; 19
 502:	03 c0       	rjmp	.+6      	; 0x50a <TM1637_turnOnAndSetBrightness+0x8c>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 504:	84 b3       	in	r24, 0x14	; 20
 506:	80 61       	ori	r24, 0x10	; 16
 508:	84 bb       	out	0x14, r24	; 20
 50a:	81 e2       	ldi	r24, 0x21	; 33
 50c:	8a 95       	dec	r24
 50e:	f1 f7       	brne	.-4      	; 0x50c <TM1637_turnOnAndSetBrightness+0x8e>
 510:	00 00       	nop

static inline void TM1637_writeBrightnessReg(void) {
  // Write TM1637_CMD_SET_BRIGHTNESS + TM1637_brightness_reg
  TM1637_COMM_START;
  TM1637_writeByte(TM1637_CMD_SET_BRIGHTNESS | (TM1637_brightness_reg & TM1637_MASK_BRIGHTNESS_REG));
  TM1637_COMM_STOP;
 512:	84 b3       	in	r24, 0x14	; 20
 514:	80 62       	ori	r24, 0x20	; 32
 516:	84 bb       	out	0x14, r24	; 20
 518:	81 e2       	ldi	r24, 0x21	; 33
 51a:	8a 95       	dec	r24
 51c:	f1 f7       	brne	.-4      	; 0x51a <TM1637_turnOnAndSetBrightness+0x9c>
 51e:	00 00       	nop
 520:	84 b3       	in	r24, 0x14	; 20
 522:	80 61       	ori	r24, 0x10	; 16
 524:	84 bb       	out	0x14, r24	; 20
 526:	81 e2       	ldi	r24, 0x21	; 33
 528:	8a 95       	dec	r24
 52a:	f1 f7       	brne	.-4      	; 0x528 <TM1637_turnOnAndSetBrightness+0xaa>
 52c:	00 00       	nop
 52e:	84 b3       	in	r24, 0x14	; 20
 530:	8f 7d       	andi	r24, 0xDF	; 223
 532:	84 bb       	out	0x14, r24	; 20
 534:	82 e4       	ldi	r24, 0x42	; 66
 536:	8a 95       	dec	r24
 538:	f1 f7       	brne	.-4      	; 0x536 <TM1637_turnOnAndSetBrightness+0xb8>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <TM1637_turnOnAndSetBrightness+0xbe>
 53c:	84 b3       	in	r24, 0x14	; 20
 53e:	8f 7e       	andi	r24, 0xEF	; 239
 540:	84 bb       	out	0x14, r24	; 20
 542:	82 e4       	ldi	r24, 0x42	; 66
 544:	8a 95       	dec	r24
 546:	f1 f7       	brne	.-4      	; 0x544 <TM1637_turnOnAndSetBrightness+0xc6>
 548:	00 c0       	rjmp	.+0      	; 0x54a <TM1637_turnOnAndSetBrightness+0xcc>
 54a:	08 95       	ret

0000054c <TM1637_setSegments>:
void TM1637_turnOnAndSetBrightness(uint8_t brightness) {
  TM1637_brightness_reg = TM1637_MASK_ON_OFF | (brightness & TM1637_MASK_BRIGHTNESS);
  TM1637_writeBrightnessReg();
}

void TM1637_setSegments(const uint8_t segments[], uint8_t length, uint8_t pos) {
 54c:	fc 01       	movw	r30, r24
  TM1637_COMM_START;
 54e:	84 b3       	in	r24, 0x14	; 20
 550:	80 61       	ori	r24, 0x10	; 16
 552:	84 bb       	out	0x14, r24	; 20
 554:	82 e4       	ldi	r24, 0x42	; 66
 556:	8a 95       	dec	r24
 558:	f1 f7       	brne	.-4      	; 0x556 <TM1637_setSegments+0xa>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <TM1637_setSegments+0x10>
  // Write TM1637_CMD_SET_DATA + first digit address
  TM1637_writeByte(TM1637_CMD_SET_DATA | (pos & TM1637_MASK_POS));
 55c:	43 70       	andi	r20, 0x03	; 3
 55e:	40 6c       	ori	r20, 0xC0	; 192
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	1d c0       	rjmp	.+58     	; 0x59e <TM1637_setSegments+0x52>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 564:	84 b3       	in	r24, 0x14	; 20
 566:	80 62       	ori	r24, 0x20	; 32
 568:	84 bb       	out	0x14, r24	; 20
 56a:	81 e2       	ldi	r24, 0x21	; 33
 56c:	8a 95       	dec	r24
 56e:	f1 f7       	brne	.-4      	; 0x56c <TM1637_setSegments+0x20>
 570:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 572:	40 ff       	sbrs	r20, 0
 574:	04 c0       	rjmp	.+8      	; 0x57e <TM1637_setSegments+0x32>
 576:	84 b3       	in	r24, 0x14	; 20
 578:	8f 7e       	andi	r24, 0xEF	; 239
 57a:	84 bb       	out	0x14, r24	; 20
 57c:	03 c0       	rjmp	.+6      	; 0x584 <TM1637_setSegments+0x38>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 57e:	84 b3       	in	r24, 0x14	; 20
 580:	80 61       	ori	r24, 0x10	; 16
 582:	84 bb       	out	0x14, r24	; 20
 584:	81 e2       	ldi	r24, 0x21	; 33
 586:	8a 95       	dec	r24
 588:	f1 f7       	brne	.-4      	; 0x586 <TM1637_setSegments+0x3a>
 58a:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 58c:	84 b3       	in	r24, 0x14	; 20
 58e:	8f 7d       	andi	r24, 0xDF	; 223
 590:	84 bb       	out	0x14, r24	; 20
 592:	82 e4       	ldi	r24, 0x42	; 66
 594:	8a 95       	dec	r24
 596:	f1 f7       	brne	.-4      	; 0x594 <TM1637_setSegments+0x48>
 598:	00 c0       	rjmp	.+0      	; 0x59a <TM1637_setSegments+0x4e>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 59a:	46 95       	lsr	r20
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 59c:	9f 5f       	subi	r25, 0xFF	; 255
 59e:	98 30       	cpi	r25, 0x08	; 8
 5a0:	08 f3       	brcs	.-62     	; 0x564 <TM1637_setSegments+0x18>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 5a2:	84 b3       	in	r24, 0x14	; 20
 5a4:	80 62       	ori	r24, 0x20	; 32
 5a6:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 5a8:	84 b3       	in	r24, 0x14	; 20
 5aa:	8f 7e       	andi	r24, 0xEF	; 239
 5ac:	84 bb       	out	0x14, r24	; 20
 5ae:	82 e4       	ldi	r24, 0x42	; 66
 5b0:	8a 95       	dec	r24
 5b2:	f1 f7       	brne	.-4      	; 0x5b0 <TM1637_setSegments+0x64>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <TM1637_setSegments+0x6a>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 5b6:	84 b3       	in	r24, 0x14	; 20
 5b8:	8f 7d       	andi	r24, 0xDF	; 223
 5ba:	84 bb       	out	0x14, r24	; 20
 5bc:	81 e2       	ldi	r24, 0x21	; 33
 5be:	8a 95       	dec	r24
 5c0:	f1 f7       	brne	.-4      	; 0x5be <TM1637_setSegments+0x72>
 5c2:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 5c4:	9c 99       	sbic	0x13, 4	; 19
 5c6:	03 c0       	rjmp	.+6      	; 0x5ce <TM1637_setSegments+0x82>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 5c8:	84 b3       	in	r24, 0x14	; 20
 5ca:	80 61       	ori	r24, 0x10	; 16
 5cc:	84 bb       	out	0x14, r24	; 20
 5ce:	81 e2       	ldi	r24, 0x21	; 33
 5d0:	8a 95       	dec	r24
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <TM1637_setSegments+0x84>
 5d4:	00 00       	nop
void TM1637_setSegments(const uint8_t segments[], uint8_t length, uint8_t pos) {
  TM1637_COMM_START;
  // Write TM1637_CMD_SET_DATA + first digit address
  TM1637_writeByte(TM1637_CMD_SET_DATA | (pos & TM1637_MASK_POS));
  // Write data bytes
  for (uint8_t i = 0; i < length; i++)
 5d6:	40 e0       	ldi	r20, 0x00	; 0
 5d8:	40 c0       	rjmp	.+128    	; 0x65a <TM1637_setSegments+0x10e>
    TM1637_writeByte(segments[i]);
 5da:	df 01       	movw	r26, r30
 5dc:	a4 0f       	add	r26, r20
 5de:	b1 1d       	adc	r27, r1
 5e0:	3c 91       	ld	r19, X
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 5e2:	20 e0       	ldi	r18, 0x00	; 0
 5e4:	1d c0       	rjmp	.+58     	; 0x620 <TM1637_setSegments+0xd4>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 5e6:	94 b3       	in	r25, 0x14	; 20
 5e8:	90 62       	ori	r25, 0x20	; 32
 5ea:	94 bb       	out	0x14, r25	; 20
 5ec:	81 e2       	ldi	r24, 0x21	; 33
 5ee:	8a 95       	dec	r24
 5f0:	f1 f7       	brne	.-4      	; 0x5ee <TM1637_setSegments+0xa2>
 5f2:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 5f4:	30 ff       	sbrs	r19, 0
 5f6:	04 c0       	rjmp	.+8      	; 0x600 <TM1637_setSegments+0xb4>
 5f8:	94 b3       	in	r25, 0x14	; 20
 5fa:	9f 7e       	andi	r25, 0xEF	; 239
 5fc:	94 bb       	out	0x14, r25	; 20
 5fe:	03 c0       	rjmp	.+6      	; 0x606 <TM1637_setSegments+0xba>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 600:	94 b3       	in	r25, 0x14	; 20
 602:	90 61       	ori	r25, 0x10	; 16
 604:	94 bb       	out	0x14, r25	; 20
 606:	81 e2       	ldi	r24, 0x21	; 33
 608:	8a 95       	dec	r24
 60a:	f1 f7       	brne	.-4      	; 0x608 <TM1637_setSegments+0xbc>
 60c:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 60e:	94 b3       	in	r25, 0x14	; 20
 610:	9f 7d       	andi	r25, 0xDF	; 223
 612:	94 bb       	out	0x14, r25	; 20
 614:	82 e4       	ldi	r24, 0x42	; 66
 616:	8a 95       	dec	r24
 618:	f1 f7       	brne	.-4      	; 0x616 <TM1637_setSegments+0xca>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <TM1637_setSegments+0xd0>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 61c:	36 95       	lsr	r19
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 61e:	2f 5f       	subi	r18, 0xFF	; 255
 620:	28 30       	cpi	r18, 0x08	; 8
 622:	08 f3       	brcs	.-62     	; 0x5e6 <TM1637_setSegments+0x9a>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 624:	84 b3       	in	r24, 0x14	; 20
 626:	80 62       	ori	r24, 0x20	; 32
 628:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 62a:	84 b3       	in	r24, 0x14	; 20
 62c:	8f 7e       	andi	r24, 0xEF	; 239
 62e:	84 bb       	out	0x14, r24	; 20
 630:	82 e4       	ldi	r24, 0x42	; 66
 632:	8a 95       	dec	r24
 634:	f1 f7       	brne	.-4      	; 0x632 <TM1637_setSegments+0xe6>
 636:	00 c0       	rjmp	.+0      	; 0x638 <TM1637_setSegments+0xec>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 638:	94 b3       	in	r25, 0x14	; 20
 63a:	9f 7d       	andi	r25, 0xDF	; 223
 63c:	94 bb       	out	0x14, r25	; 20
 63e:	81 e2       	ldi	r24, 0x21	; 33
 640:	8a 95       	dec	r24
 642:	f1 f7       	brne	.-4      	; 0x640 <TM1637_setSegments+0xf4>
 644:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 646:	9c 99       	sbic	0x13, 4	; 19
 648:	03 c0       	rjmp	.+6      	; 0x650 <TM1637_setSegments+0x104>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 64a:	84 b3       	in	r24, 0x14	; 20
 64c:	80 61       	ori	r24, 0x10	; 16
 64e:	84 bb       	out	0x14, r24	; 20
 650:	81 e2       	ldi	r24, 0x21	; 33
 652:	8a 95       	dec	r24
 654:	f1 f7       	brne	.-4      	; 0x652 <TM1637_setSegments+0x106>
 656:	00 00       	nop
void TM1637_setSegments(const uint8_t segments[], uint8_t length, uint8_t pos) {
  TM1637_COMM_START;
  // Write TM1637_CMD_SET_DATA + first digit address
  TM1637_writeByte(TM1637_CMD_SET_DATA | (pos & TM1637_MASK_POS));
  // Write data bytes
  for (uint8_t i = 0; i < length; i++)
 658:	4f 5f       	subi	r20, 0xFF	; 255
 65a:	46 17       	cp	r20, r22
 65c:	08 f4       	brcc	.+2      	; 0x660 <TM1637_setSegments+0x114>
 65e:	bd cf       	rjmp	.-134    	; 0x5da <TM1637_setSegments+0x8e>
    TM1637_writeByte(segments[i]);
  TM1637_COMM_STOP;
 660:	84 b3       	in	r24, 0x14	; 20
 662:	80 62       	ori	r24, 0x20	; 32
 664:	84 bb       	out	0x14, r24	; 20
 666:	81 e2       	ldi	r24, 0x21	; 33
 668:	8a 95       	dec	r24
 66a:	f1 f7       	brne	.-4      	; 0x668 <TM1637_setSegments+0x11c>
 66c:	00 00       	nop
 66e:	84 b3       	in	r24, 0x14	; 20
 670:	80 61       	ori	r24, 0x10	; 16
 672:	84 bb       	out	0x14, r24	; 20
 674:	81 e2       	ldi	r24, 0x21	; 33
 676:	8a 95       	dec	r24
 678:	f1 f7       	brne	.-4      	; 0x676 <TM1637_setSegments+0x12a>
 67a:	00 00       	nop
 67c:	84 b3       	in	r24, 0x14	; 20
 67e:	8f 7d       	andi	r24, 0xDF	; 223
 680:	84 bb       	out	0x14, r24	; 20
 682:	82 e4       	ldi	r24, 0x42	; 66
 684:	8a 95       	dec	r24
 686:	f1 f7       	brne	.-4      	; 0x684 <TM1637_setSegments+0x138>
 688:	00 c0       	rjmp	.+0      	; 0x68a <TM1637_setSegments+0x13e>
 68a:	84 b3       	in	r24, 0x14	; 20
 68c:	8f 7e       	andi	r24, 0xEF	; 239
 68e:	84 bb       	out	0x14, r24	; 20
 690:	82 e4       	ldi	r24, 0x42	; 66
 692:	8a 95       	dec	r24
 694:	f1 f7       	brne	.-4      	; 0x692 <TM1637_setSegments+0x146>
 696:	00 c0       	rjmp	.+0      	; 0x698 <TM1637_setSegments+0x14c>
 698:	08 95       	ret

0000069a <_exit>:
 69a:	f8 94       	cli

0000069c <__stop_program>:
 69c:	ff cf       	rjmp	.-2      	; 0x69c <__stop_program>
