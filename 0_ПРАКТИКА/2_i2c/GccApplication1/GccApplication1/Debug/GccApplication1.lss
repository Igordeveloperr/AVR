
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000008fe  00000992  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006c  0080006c  0000099e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000099e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b4a  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0c  00000000  00000000  0000369e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000132b  00000000  00000000  000041aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000033c  00000000  00000000  000054d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000601  00000000  00000000  00005814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f0b  00000000  00000000  00005e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00007d20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	de c0       	rjmp	.+444    	; 0x1c0 <__vector_1>
   4:	12 c1       	rjmp	.+548    	; 0x22a <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	99 c0       	rjmp	.+306    	; 0x13c <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee ef       	ldi	r30, 0xFE	; 254
  3a:	f8 e0       	ldi	r31, 0x08	; 8
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 37       	cpi	r26, 0x74	; 116
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	41 d1       	rcall	.+642    	; 0x2dc <main>
  5a:	4f c4       	rjmp	.+2206   	; 0x8fa <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <select_display_digit>:
	0b11101111
};

uint8_t select_display_digit(uint8_t digit)
{
	if (digit >= 0 && digit < 10)
  5e:	8a 30       	cpi	r24, 0x0A	; 10
  60:	30 f4       	brcc	.+12     	; 0x6e <select_display_digit+0x10>
	{
		return display_digit[digit];
  62:	e8 2f       	mov	r30, r24
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	e0 5a       	subi	r30, 0xA0	; 160
  68:	ff 4f       	sbci	r31, 0xFF	; 255
  6a:	80 81       	ld	r24, Z
  6c:	08 95       	ret
	}
	else
	{
		return TM1637_SPAT_BLANK;
  6e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
  70:	08 95       	ret

00000072 <wakeup_display>:

void wakeup_display()
{
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	9b d2       	rcall	.+1334   	; 0x5ac <TM1637_turnOnAndSetBrightness>
  76:	08 95       	ret

00000078 <print_time_on_display>:
}

void print_time_on_display(uint8_t hour, uint8_t min)
{
  78:	ff 92       	push	r15
  7a:	0f 93       	push	r16
  7c:	1f 93       	push	r17
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	28 97       	sbiw	r28, 0x08	; 8
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	f8 94       	cli
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	0f be       	out	0x3f, r0	; 63
  90:	cd bf       	out	0x3d, r28	; 61
	uint8_t d_time[DISP_LEN];
	d_time[0] = hour / DIVIDER;
  92:	9d ec       	ldi	r25, 0xCD	; 205
  94:	89 9f       	mul	r24, r25
  96:	21 2d       	mov	r18, r1
  98:	11 24       	eor	r1, r1
  9a:	26 95       	lsr	r18
  9c:	26 95       	lsr	r18
  9e:	26 95       	lsr	r18
  a0:	29 83       	std	Y+1, r18	; 0x01
	d_time[1] = hour % DIVIDER;
  a2:	22 0f       	add	r18, r18
  a4:	32 2f       	mov	r19, r18
  a6:	33 0f       	add	r19, r19
  a8:	33 0f       	add	r19, r19
  aa:	23 0f       	add	r18, r19
  ac:	82 1b       	sub	r24, r18
  ae:	8a 83       	std	Y+2, r24	; 0x02
	d_time[2] = min / DIVIDER;
  b0:	69 9f       	mul	r22, r25
  b2:	81 2d       	mov	r24, r1
  b4:	11 24       	eor	r1, r1
  b6:	86 95       	lsr	r24
  b8:	86 95       	lsr	r24
  ba:	86 95       	lsr	r24
  bc:	8b 83       	std	Y+3, r24	; 0x03
	d_time[3] = min % DIVIDER;
  be:	88 0f       	add	r24, r24
  c0:	98 2f       	mov	r25, r24
  c2:	99 0f       	add	r25, r25
  c4:	99 0f       	add	r25, r25
  c6:	89 0f       	add	r24, r25
  c8:	68 1b       	sub	r22, r24
  ca:	6c 83       	std	Y+4, r22	; 0x04
	
	uint8_t out_time[TM1637_DIGITS_COUNT];
	for(uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
  cc:	f1 2c       	mov	r15, r1
  ce:	12 c0       	rjmp	.+36     	; 0xf4 <print_time_on_display+0x7c>
	{
		out_time[i] = select_display_digit(d_time[i]);
  d0:	0f 2d       	mov	r16, r15
  d2:	10 e0       	ldi	r17, 0x00	; 0
  d4:	e1 e0       	ldi	r30, 0x01	; 1
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	ec 0f       	add	r30, r28
  da:	fd 1f       	adc	r31, r29
  dc:	e0 0f       	add	r30, r16
  de:	f1 1f       	adc	r31, r17
  e0:	80 81       	ld	r24, Z
  e2:	bd df       	rcall	.-134    	; 0x5e <select_display_digit>
  e4:	e5 e0       	ldi	r30, 0x05	; 5
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	ec 0f       	add	r30, r28
  ea:	fd 1f       	adc	r31, r29
  ec:	e0 0f       	add	r30, r16
  ee:	f1 1f       	adc	r31, r17
  f0:	80 83       	st	Z, r24
	d_time[1] = hour % DIVIDER;
	d_time[2] = min / DIVIDER;
	d_time[3] = min % DIVIDER;
	
	uint8_t out_time[TM1637_DIGITS_COUNT];
	for(uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
  f2:	f3 94       	inc	r15
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	8f 15       	cp	r24, r15
  f8:	58 f7       	brcc	.-42     	; 0xd0 <print_time_on_display+0x58>
	{
		out_time[i] = select_display_digit(d_time[i]);
	}
	TM1637_setSegments(out_time, TM1637_DIGITS_COUNT, START_POS);
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	64 e0       	ldi	r22, 0x04	; 4
  fe:	ce 01       	movw	r24, r28
 100:	05 96       	adiw	r24, 0x05	; 5
 102:	bb d2       	rcall	.+1398   	; 0x67a <TM1637_setSegments>
 104:	28 96       	adiw	r28, 0x08	; 8
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	ff 90       	pop	r15
 11a:	08 95       	ret

0000011c <activate_sleep_mode>:
uint8_t interval = 0;

/* реализация спящего режима */
void activate_sleep_mode()
{
	if (interval >= MAX_INTERVAL)
 11c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 120:	8a 30       	cpi	r24, 0x0A	; 10
 122:	58 f0       	brcs	.+22     	; 0x13a <activate_sleep_mode+0x1e>
	{	
		close_menu();
 124:	4c d1       	rcall	.+664    	; 0x3be <close_menu>
		TM1637_turnOff();
 126:	da d1       	rcall	.+948    	; 0x4dc <TM1637_turnOff>
		OCR2 = 1;
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	83 bd       	out	0x23, r24	; 35
		/* жду сброс флагов */
		while (ASSR != ASSR_REG_REDY);
 12c:	82 b5       	in	r24, 0x22	; 34
 12e:	88 30       	cpi	r24, 0x08	; 8
 130:	e9 f7       	brne	.-6      	; 0x12c <activate_sleep_mode+0x10>
		sleep_enable();
 132:	85 b7       	in	r24, 0x35	; 53
 134:	80 68       	ori	r24, 0x80	; 128
 136:	85 bf       	out	0x35, r24	; 53
		sleep_cpu();
 138:	88 95       	sleep
 13a:	08 95       	ret

0000013c <__vector_4>:
	}
}

/* отсчет времени */
ISR(TIMER2_OVF_vect)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	4f 93       	push	r20
 14c:	5f 93       	push	r21
 14e:	6f 93       	push	r22
 150:	7f 93       	push	r23
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
	TCNT2 = 0;
 15e:	14 bc       	out	0x24, r1	; 36
	PORTB ^= (1 << PB1);
 160:	98 b3       	in	r25, 0x18	; 24
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	89 27       	eor	r24, r25
 166:	88 bb       	out	0x18, r24	; 24
	seconds += STEP;
 168:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <seconds>
 16c:	8e 5f       	subi	r24, 0xFE	; 254
 16e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <seconds>
	interval += STEP;
 172:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 176:	8e 5f       	subi	r24, 0xFE	; 254
 178:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	control_seconds(&seconds, &minutes);
 17c:	6a e6       	ldi	r22, 0x6A	; 106
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	8f e6       	ldi	r24, 0x6F	; 111
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	1d d1       	rcall	.+570    	; 0x3c0 <control_seconds>
	control_min(&minutes, &hour);
 186:	6b e6       	ldi	r22, 0x6B	; 107
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	8a e6       	ldi	r24, 0x6A	; 106
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	23 d1       	rcall	.+582    	; 0x3d6 <control_min>
	control_hour(&seconds, &minutes, &hour);
 190:	4b e6       	ldi	r20, 0x6B	; 107
 192:	50 e0       	ldi	r21, 0x00	; 0
 194:	6a e6       	ldi	r22, 0x6A	; 106
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	8f e6       	ldi	r24, 0x6F	; 111
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	27 d1       	rcall	.+590    	; 0x3ec <control_hour>
}
 19e:	ff 91       	pop	r31
 1a0:	ef 91       	pop	r30
 1a2:	bf 91       	pop	r27
 1a4:	af 91       	pop	r26
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	7f 91       	pop	r23
 1ac:	6f 91       	pop	r22
 1ae:	5f 91       	pop	r21
 1b0:	4f 91       	pop	r20
 1b2:	3f 91       	pop	r19
 1b4:	2f 91       	pop	r18
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <__vector_1>:

/* выход из сна + метка когда кот ел */
ISR(INT0_vect)
{
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	2f 93       	push	r18
 1cc:	3f 93       	push	r19
 1ce:	4f 93       	push	r20
 1d0:	5f 93       	push	r21
 1d2:	6f 93       	push	r22
 1d4:	7f 93       	push	r23
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	af 93       	push	r26
 1dc:	bf 93       	push	r27
 1de:	ef 93       	push	r30
 1e0:	ff 93       	push	r31
	sleep_disable();
 1e2:	85 b7       	in	r24, 0x35	; 53
 1e4:	8f 77       	andi	r24, 0x7F	; 127
 1e6:	85 bf       	out	0x35, r24	; 53
	cat_hour = hour;
 1e8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hour>
 1ec:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <cat_hour>
	cat_minutes = minutes;
 1f0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <minutes>
 1f4:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <cat_minutes>
	interval = 0;
 1f8:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
	wakeup_display();
 1fc:	3a df       	rcall	.-396    	; 0x72 <wakeup_display>
	print_time_on_display(cat_hour, cat_minutes);
 1fe:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <cat_minutes>
 202:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <cat_hour>
 206:	38 df       	rcall	.-400    	; 0x78 <print_time_on_display>
}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <__vector_2>:

ISR(INT1_vect)
{
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	2f 93       	push	r18
 236:	3f 93       	push	r19
 238:	4f 93       	push	r20
 23a:	5f 93       	push	r21
 23c:	6f 93       	push	r22
 23e:	7f 93       	push	r23
 240:	8f 93       	push	r24
 242:	9f 93       	push	r25
 244:	af 93       	push	r26
 246:	bf 93       	push	r27
 248:	ef 93       	push	r30
 24a:	ff 93       	push	r31
	sleep_disable();
 24c:	85 b7       	in	r24, 0x35	; 53
 24e:	8f 77       	andi	r24, 0x7F	; 127
 250:	85 bf       	out	0x35, r24	; 53
	wakeup_display();
 252:	0f df       	rcall	.-482    	; 0x72 <wakeup_display>
	event_listener();
 254:	5d d0       	rcall	.+186    	; 0x310 <event_listener>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	2f e3       	ldi	r18, 0x3F	; 63
 258:	8d e0       	ldi	r24, 0x0D	; 13
 25a:	93 e0       	ldi	r25, 0x03	; 3
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <__vector_2+0x32>
 264:	00 c0       	rjmp	.+0      	; 0x266 <__vector_2+0x3c>
 266:	00 00       	nop
	_delay_ms(1000);
	setup_time(&seconds, &minutes, &hour);
 268:	4b e6       	ldi	r20, 0x6B	; 107
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	6a e6       	ldi	r22, 0x6A	; 106
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	8f e6       	ldi	r24, 0x6F	; 111
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	99 d0       	rcall	.+306    	; 0x3a8 <setup_time>
	print_time_on_display(hour, minutes);
 276:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <minutes>
 27a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hour>
 27e:	fc de       	rcall	.-520    	; 0x78 <print_time_on_display>
	interval = 0;
 280:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
}
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	bf 91       	pop	r27
 28a:	af 91       	pop	r26
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	7f 91       	pop	r23
 292:	6f 91       	pop	r22
 294:	5f 91       	pop	r21
 296:	4f 91       	pop	r20
 298:	3f 91       	pop	r19
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <start_timer2_async>:

/* настройка Timer/Counter2 */
void start_timer2_async()
{
	ASSR |= (1 << AS2); // вклю асинхронный режим
 2a6:	82 b5       	in	r24, 0x22	; 34
 2a8:	88 60       	ori	r24, 0x08	; 8
 2aa:	82 bd       	out	0x22, r24	; 34
	/* чищу регистры таймера от мусора */
	TCCR2 = 0;
 2ac:	15 bc       	out	0x25, r1	; 37
	OCR2 = 0;
 2ae:	13 bc       	out	0x23, r1	; 35
	TCNT2 = 0;
 2b0:	14 bc       	out	0x24, r1	; 36
	/* делитель частоты = 256 */
	TCCR2 |= (1 << CS22) | (1 << CS21);
 2b2:	85 b5       	in	r24, 0x25	; 37
 2b4:	86 60       	ori	r24, 0x06	; 6
 2b6:	85 bd       	out	0x25, r24	; 37
	/* жду сброс флагов для старта в асинхронном режиме */
	while (ASSR != ASSR_REG_REDY);
 2b8:	82 b5       	in	r24, 0x22	; 34
 2ba:	88 30       	cpi	r24, 0x08	; 8
 2bc:	e9 f7       	brne	.-6      	; 0x2b8 <start_timer2_async+0x12>
	/* чистим флаги прерываний */
	TIFR |= (1 << OCF2) | (1 << TOV2);
 2be:	88 b7       	in	r24, 0x38	; 56
 2c0:	80 6c       	ori	r24, 0xC0	; 192
 2c2:	88 bf       	out	0x38, r24	; 56
	/* включаю прерывание по переполнению таймера */
	TIMSK |= (1 << TOIE2);
 2c4:	89 b7       	in	r24, 0x39	; 57
 2c6:	80 64       	ori	r24, 0x40	; 64
 2c8:	89 bf       	out	0x39, r24	; 57
 2ca:	08 95       	ret

000002cc <setup_ext_interrapt>:
}

/* настройка внешних прерываний */
void setup_ext_interrapt()
{
	GICR |= (1 << INT0) | (1 << INT1);
 2cc:	8b b7       	in	r24, 0x3b	; 59
 2ce:	80 6c       	ori	r24, 0xC0	; 192
 2d0:	8b bf       	out	0x3b, r24	; 59
	DDRD = 0;
 2d2:	11 ba       	out	0x11, r1	; 17
	PORTD |= (1 << INT0_PIN) | (1 << INT1_PIN) | (1 << MENU_BTN) | (1 << UP_BTN) | (1 << DOWN_BTN);
 2d4:	82 b3       	in	r24, 0x12	; 18
 2d6:	8c 67       	ori	r24, 0x7C	; 124
 2d8:	82 bb       	out	0x12, r24	; 18
 2da:	08 95       	ret

000002dc <main>:
}

int main(void)
{
	ACSR |= (1 << ACD); // ОТКЛЮЧЕНИЕ АЦП
 2dc:	88 b1       	in	r24, 0x08	; 8
 2de:	80 68       	ori	r24, 0x80	; 128
 2e0:	88 b9       	out	0x08, r24	; 8
	start_timer2_async();
 2e2:	e1 df       	rcall	.-62     	; 0x2a6 <start_timer2_async>
	setup_ext_interrapt();
 2e4:	f3 df       	rcall	.-26     	; 0x2cc <setup_ext_interrapt>
	sei();
 2e6:	78 94       	sei
	
	TM1637_init();
 2e8:	90 d0       	rcall	.+288    	; 0x40a <TM1637_init>
	TM1637_turnOnAndSetBrightness(BRIGHTNES);
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	5f d1       	rcall	.+702    	; 0x5ac <TM1637_turnOnAndSetBrightness>
	print_time_on_display(hour, minutes);
 2ee:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <minutes>
 2f2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hour>
 2f6:	c0 de       	rcall	.-640    	; 0x78 <print_time_on_display>
	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 2f8:	85 b7       	in	r24, 0x35	; 53
 2fa:	8f 78       	andi	r24, 0x8F	; 143
 2fc:	80 63       	ori	r24, 0x30	; 48
 2fe:	85 bf       	out	0x35, r24	; 53
	
	DDRB |= (1 << PB1);
 300:	87 b3       	in	r24, 0x17	; 23
 302:	82 60       	ori	r24, 0x02	; 2
 304:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~(1 << PB1);
 306:	88 b3       	in	r24, 0x18	; 24
 308:	8d 7f       	andi	r24, 0xFD	; 253
 30a:	88 bb       	out	0x18, r24	; 24
	
	while(1)
	{
		activate_sleep_mode();
 30c:	07 df       	rcall	.-498    	; 0x11c <activate_sleep_mode>
 30e:	fe cf       	rjmp	.-4      	; 0x30c <main+0x30>

00000310 <event_listener>:
uint8_t min = 0;
uint8_t wait_time = 0;

void event_listener()
{
	TM1637_clear();
 310:	5b d2       	rcall	.+1206   	; 0x7c8 <TM1637_clear>
 312:	2f e3       	ldi	r18, 0x3F	; 63
 314:	8d e0       	ldi	r24, 0x0D	; 13
 316:	93 e0       	ldi	r25, 0x03	; 3
 318:	21 50       	subi	r18, 0x01	; 1
 31a:	80 40       	sbci	r24, 0x00	; 0
 31c:	90 40       	sbci	r25, 0x00	; 0
 31e:	e1 f7       	brne	.-8      	; 0x318 <event_listener+0x8>
 320:	00 c0       	rjmp	.+0      	; 0x322 <event_listener+0x12>
 322:	00 00       	nop
 324:	3e c0       	rjmp	.+124    	; 0x3a2 <event_listener+0x92>
	_delay_ms(1000);
	while(!(PIND & (1 << MENU_BTN)))
	{
		if (wait_time < 6)
 326:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <wait_time>
 32a:	86 30       	cpi	r24, 0x06	; 6
 32c:	98 f4       	brcc	.+38     	; 0x354 <event_listener+0x44>
		{
			if (!(PIND & (1 << UP_BTN)))
 32e:	85 99       	sbic	0x10, 5	; 16
 330:	07 c0       	rjmp	.+14     	; 0x340 <event_listener+0x30>
			{
				wait_time = 0;
 332:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <wait_time>
				hr++;
 336:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 33a:	8f 5f       	subi	r24, 0xFF	; 255
 33c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <hr>
			}
			
			if (!(PIND & (1 << DOWN_BTN)))
 340:	86 99       	sbic	0x10, 6	; 16
 342:	1c c0       	rjmp	.+56     	; 0x37c <event_listener+0x6c>
			{
				wait_time = 0;
 344:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <wait_time>
				hr--;
 348:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 34c:	81 50       	subi	r24, 0x01	; 1
 34e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <hr>
 352:	14 c0       	rjmp	.+40     	; 0x37c <event_listener+0x6c>
			}
		}
		else
		{
			if (!(PIND & (1 << UP_BTN)))
 354:	85 99       	sbic	0x10, 5	; 16
 356:	08 c0       	rjmp	.+16     	; 0x368 <event_listener+0x58>
			{
				wait_time = 6;
 358:	86 e0       	ldi	r24, 0x06	; 6
 35a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <wait_time>
				min++;
 35e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <min>
 362:	8f 5f       	subi	r24, 0xFF	; 255
 364:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <min>
			}
			
			if (!(PIND & (1 << DOWN_BTN)))
 368:	86 99       	sbic	0x10, 6	; 16
 36a:	08 c0       	rjmp	.+16     	; 0x37c <event_listener+0x6c>
			{
				wait_time = 6;
 36c:	86 e0       	ldi	r24, 0x06	; 6
 36e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <wait_time>
				min--;
 372:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <min>
 376:	81 50       	subi	r24, 0x01	; 1
 378:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <min>
			}
		}
		wait_time++;
 37c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <wait_time>
 380:	8f 5f       	subi	r24, 0xFF	; 255
 382:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <wait_time>
 386:	2f e9       	ldi	r18, 0x9F	; 159
 388:	86 e8       	ldi	r24, 0x86	; 134
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	80 40       	sbci	r24, 0x00	; 0
 390:	90 40       	sbci	r25, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <event_listener+0x7c>
 394:	00 c0       	rjmp	.+0      	; 0x396 <event_listener+0x86>
 396:	00 00       	nop
		_delay_ms(500);
		print_time_on_display(hr,min);
 398:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <min>
 39c:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 3a0:	6b de       	rcall	.-810    	; 0x78 <print_time_on_display>

void event_listener()
{
	TM1637_clear();
	_delay_ms(1000);
	while(!(PIND & (1 << MENU_BTN)))
 3a2:	84 9b       	sbis	0x10, 4	; 16
 3a4:	c0 cf       	rjmp	.-128    	; 0x326 <event_listener+0x16>
		}
		wait_time++;
		_delay_ms(500);
		print_time_on_display(hr,min);
	}
}
 3a6:	08 95       	ret

000003a8 <setup_time>:

void setup_time(uint8_t* seconds, uint8_t* minutes, uint8_t* hour)
{
	*seconds = 0;
 3a8:	fc 01       	movw	r30, r24
 3aa:	10 82       	st	Z, r1
	*minutes = min;
 3ac:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <min>
 3b0:	fb 01       	movw	r30, r22
 3b2:	80 83       	st	Z, r24
	*hour = hr;
 3b4:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <hr>
 3b8:	fa 01       	movw	r30, r20
 3ba:	80 83       	st	Z, r24
 3bc:	08 95       	ret

000003be <close_menu>:
}

void close_menu()
{
 3be:	08 95       	ret

000003c0 <control_seconds>:
#include "main.h"

void control_seconds(uint8_t* seconds, uint8_t* minutes)
{
	if (*seconds >= SEC_OVF)
 3c0:	fc 01       	movw	r30, r24
 3c2:	20 81       	ld	r18, Z
 3c4:	2c 33       	cpi	r18, 0x3C	; 60
 3c6:	30 f0       	brcs	.+12     	; 0x3d4 <control_seconds+0x14>
	{
		*minutes = *minutes + 1;
 3c8:	fb 01       	movw	r30, r22
 3ca:	20 81       	ld	r18, Z
 3cc:	2f 5f       	subi	r18, 0xFF	; 255
 3ce:	20 83       	st	Z, r18
		*seconds = 0;
 3d0:	fc 01       	movw	r30, r24
 3d2:	10 82       	st	Z, r1
 3d4:	08 95       	ret

000003d6 <control_min>:
	}
}

void control_min(uint8_t* minutes, uint8_t* hour)
{
	if (*minutes >= MIN_OVF)
 3d6:	fc 01       	movw	r30, r24
 3d8:	20 81       	ld	r18, Z
 3da:	2c 33       	cpi	r18, 0x3C	; 60
 3dc:	30 f0       	brcs	.+12     	; 0x3ea <control_min+0x14>
	{
		*hour = *hour + 1;
 3de:	fb 01       	movw	r30, r22
 3e0:	20 81       	ld	r18, Z
 3e2:	2f 5f       	subi	r18, 0xFF	; 255
 3e4:	20 83       	st	Z, r18
		*minutes = 0;
 3e6:	fc 01       	movw	r30, r24
 3e8:	10 82       	st	Z, r1
 3ea:	08 95       	ret

000003ec <control_hour>:
	}
}

void control_hour(uint8_t* seconds, uint8_t* minutes, uint8_t* hour)
{
 3ec:	fc 01       	movw	r30, r24
	if (*hour == HOUR_OVF && *minutes >= MIN_OVF)
 3ee:	da 01       	movw	r26, r20
 3f0:	9c 91       	ld	r25, X
 3f2:	97 31       	cpi	r25, 0x17	; 23
 3f4:	49 f4       	brne	.+18     	; 0x408 <__DATA_REGION_LENGTH__+0x8>
 3f6:	db 01       	movw	r26, r22
 3f8:	8c 91       	ld	r24, X
 3fa:	8c 33       	cpi	r24, 0x3C	; 60
 3fc:	28 f0       	brcs	.+10     	; 0x408 <__DATA_REGION_LENGTH__+0x8>
	{
		*hour = 0;
 3fe:	da 01       	movw	r26, r20
 400:	1c 92       	st	X, r1
		*minutes = 0;
 402:	db 01       	movw	r26, r22
 404:	1c 92       	st	X, r1
		*seconds = 0;
 406:	10 82       	st	Z, r1
 408:	08 95       	ret

0000040a <TM1637_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40a:	84 b3       	in	r24, 0x14	; 20
 40c:	8f 7e       	andi	r24, 0xEF	; 239
 40e:	84 bb       	out	0x14, r24	; 20
 410:	84 b3       	in	r24, 0x14	; 20
 412:	8f 7d       	andi	r24, 0xDF	; 223
 414:	84 bb       	out	0x14, r24	; 20
 416:	85 b3       	in	r24, 0x15	; 21
 418:	8f 7c       	andi	r24, 0xCF	; 207
 41a:	85 bb       	out	0x15, r24	; 21
 41c:	84 b3       	in	r24, 0x14	; 20
 41e:	80 61       	ori	r24, 0x10	; 16
 420:	84 bb       	out	0x14, r24	; 20
 422:	82 e4       	ldi	r24, 0x42	; 66
 424:	8a 95       	dec	r24
 426:	f1 f7       	brne	.-4      	; 0x424 <TM1637_init+0x1a>
 428:	00 c0       	rjmp	.+0      	; 0x42a <TM1637_init+0x20>
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	20 e4       	ldi	r18, 0x40	; 64
 42e:	1d c0       	rjmp	.+58     	; 0x46a <__stack+0xb>
 430:	84 b3       	in	r24, 0x14	; 20
 432:	80 62       	ori	r24, 0x20	; 32
 434:	84 bb       	out	0x14, r24	; 20
 436:	81 e2       	ldi	r24, 0x21	; 33
 438:	8a 95       	dec	r24
 43a:	f1 f7       	brne	.-4      	; 0x438 <TM1637_init+0x2e>
 43c:	00 00       	nop
 43e:	20 ff       	sbrs	r18, 0
 440:	04 c0       	rjmp	.+8      	; 0x44a <TM1637_init+0x40>
 442:	84 b3       	in	r24, 0x14	; 20
 444:	8f 7e       	andi	r24, 0xEF	; 239
 446:	84 bb       	out	0x14, r24	; 20
 448:	03 c0       	rjmp	.+6      	; 0x450 <TM1637_init+0x46>
 44a:	84 b3       	in	r24, 0x14	; 20
 44c:	80 61       	ori	r24, 0x10	; 16
 44e:	84 bb       	out	0x14, r24	; 20
 450:	81 e2       	ldi	r24, 0x21	; 33
 452:	8a 95       	dec	r24
 454:	f1 f7       	brne	.-4      	; 0x452 <TM1637_init+0x48>
 456:	00 00       	nop
 458:	84 b3       	in	r24, 0x14	; 20
 45a:	8f 7d       	andi	r24, 0xDF	; 223
 45c:	84 bb       	out	0x14, r24	; 20
 45e:	82 e4       	ldi	r24, 0x42	; 66
 460:	8a 95       	dec	r24
 462:	f1 f7       	brne	.-4      	; 0x460 <__stack+0x1>
 464:	00 c0       	rjmp	.+0      	; 0x466 <__stack+0x7>
 466:	26 95       	lsr	r18
 468:	9f 5f       	subi	r25, 0xFF	; 255
 46a:	98 30       	cpi	r25, 0x08	; 8
 46c:	08 f3       	brcs	.-62     	; 0x430 <TM1637_init+0x26>
 46e:	84 b3       	in	r24, 0x14	; 20
 470:	80 62       	ori	r24, 0x20	; 32
 472:	84 bb       	out	0x14, r24	; 20
 474:	84 b3       	in	r24, 0x14	; 20
 476:	8f 7e       	andi	r24, 0xEF	; 239
 478:	84 bb       	out	0x14, r24	; 20
 47a:	82 e4       	ldi	r24, 0x42	; 66
 47c:	8a 95       	dec	r24
 47e:	f1 f7       	brne	.-4      	; 0x47c <__stack+0x1d>
 480:	00 c0       	rjmp	.+0      	; 0x482 <__stack+0x23>
 482:	84 b3       	in	r24, 0x14	; 20
 484:	8f 7d       	andi	r24, 0xDF	; 223
 486:	84 bb       	out	0x14, r24	; 20
 488:	81 e2       	ldi	r24, 0x21	; 33
 48a:	8a 95       	dec	r24
 48c:	f1 f7       	brne	.-4      	; 0x48a <__stack+0x2b>
 48e:	00 00       	nop
 490:	9c 99       	sbic	0x13, 4	; 19
 492:	03 c0       	rjmp	.+6      	; 0x49a <__stack+0x3b>
 494:	84 b3       	in	r24, 0x14	; 20
 496:	80 61       	ori	r24, 0x10	; 16
 498:	84 bb       	out	0x14, r24	; 20
 49a:	81 e2       	ldi	r24, 0x21	; 33
 49c:	8a 95       	dec	r24
 49e:	f1 f7       	brne	.-4      	; 0x49c <__stack+0x3d>
 4a0:	00 00       	nop
 4a2:	84 b3       	in	r24, 0x14	; 20
 4a4:	80 62       	ori	r24, 0x20	; 32
 4a6:	84 bb       	out	0x14, r24	; 20
 4a8:	81 e2       	ldi	r24, 0x21	; 33
 4aa:	8a 95       	dec	r24
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <__stack+0x4b>
 4ae:	00 00       	nop
 4b0:	84 b3       	in	r24, 0x14	; 20
 4b2:	80 61       	ori	r24, 0x10	; 16
 4b4:	84 bb       	out	0x14, r24	; 20
 4b6:	81 e2       	ldi	r24, 0x21	; 33
 4b8:	8a 95       	dec	r24
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <__stack+0x59>
 4bc:	00 00       	nop
 4be:	84 b3       	in	r24, 0x14	; 20
 4c0:	8f 7d       	andi	r24, 0xDF	; 223
 4c2:	84 bb       	out	0x14, r24	; 20
 4c4:	82 e4       	ldi	r24, 0x42	; 66
 4c6:	8a 95       	dec	r24
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <__stack+0x67>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <__stack+0x6d>
 4cc:	84 b3       	in	r24, 0x14	; 20
 4ce:	8f 7e       	andi	r24, 0xEF	; 239
 4d0:	84 bb       	out	0x14, r24	; 20
 4d2:	82 e4       	ldi	r24, 0x42	; 66
 4d4:	8a 95       	dec	r24
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <__stack+0x75>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <__stack+0x7b>
 4da:	08 95       	ret

000004dc <TM1637_turnOff>:
 4dc:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <TM1637_brightness_reg>
 4e0:	87 70       	andi	r24, 0x07	; 7
 4e2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <TM1637_brightness_reg>
 4e6:	84 b3       	in	r24, 0x14	; 20
 4e8:	80 61       	ori	r24, 0x10	; 16
 4ea:	84 bb       	out	0x14, r24	; 20
 4ec:	82 e4       	ldi	r24, 0x42	; 66
 4ee:	8a 95       	dec	r24
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <TM1637_turnOff+0x12>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <TM1637_turnOff+0x18>
 4f4:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <TM1637_brightness_reg>
 4f8:	9f 70       	andi	r25, 0x0F	; 15
 4fa:	90 68       	ori	r25, 0x80	; 128
 4fc:	20 e0       	ldi	r18, 0x00	; 0
 4fe:	1d c0       	rjmp	.+58     	; 0x53a <TM1637_turnOff+0x5e>
 500:	84 b3       	in	r24, 0x14	; 20
 502:	80 62       	ori	r24, 0x20	; 32
 504:	84 bb       	out	0x14, r24	; 20
 506:	81 e2       	ldi	r24, 0x21	; 33
 508:	8a 95       	dec	r24
 50a:	f1 f7       	brne	.-4      	; 0x508 <TM1637_turnOff+0x2c>
 50c:	00 00       	nop
 50e:	90 ff       	sbrs	r25, 0
 510:	04 c0       	rjmp	.+8      	; 0x51a <TM1637_turnOff+0x3e>
 512:	84 b3       	in	r24, 0x14	; 20
 514:	8f 7e       	andi	r24, 0xEF	; 239
 516:	84 bb       	out	0x14, r24	; 20
 518:	03 c0       	rjmp	.+6      	; 0x520 <TM1637_turnOff+0x44>
 51a:	84 b3       	in	r24, 0x14	; 20
 51c:	80 61       	ori	r24, 0x10	; 16
 51e:	84 bb       	out	0x14, r24	; 20
 520:	81 e2       	ldi	r24, 0x21	; 33
 522:	8a 95       	dec	r24
 524:	f1 f7       	brne	.-4      	; 0x522 <TM1637_turnOff+0x46>
 526:	00 00       	nop
 528:	84 b3       	in	r24, 0x14	; 20
 52a:	8f 7d       	andi	r24, 0xDF	; 223
 52c:	84 bb       	out	0x14, r24	; 20
 52e:	82 e4       	ldi	r24, 0x42	; 66
 530:	8a 95       	dec	r24
 532:	f1 f7       	brne	.-4      	; 0x530 <TM1637_turnOff+0x54>
 534:	00 c0       	rjmp	.+0      	; 0x536 <TM1637_turnOff+0x5a>
 536:	96 95       	lsr	r25
 538:	2f 5f       	subi	r18, 0xFF	; 255
 53a:	28 30       	cpi	r18, 0x08	; 8
 53c:	08 f3       	brcs	.-62     	; 0x500 <TM1637_turnOff+0x24>
 53e:	84 b3       	in	r24, 0x14	; 20
 540:	80 62       	ori	r24, 0x20	; 32
 542:	84 bb       	out	0x14, r24	; 20
 544:	84 b3       	in	r24, 0x14	; 20
 546:	8f 7e       	andi	r24, 0xEF	; 239
 548:	84 bb       	out	0x14, r24	; 20
 54a:	82 e4       	ldi	r24, 0x42	; 66
 54c:	8a 95       	dec	r24
 54e:	f1 f7       	brne	.-4      	; 0x54c <TM1637_turnOff+0x70>
 550:	00 c0       	rjmp	.+0      	; 0x552 <TM1637_turnOff+0x76>
 552:	84 b3       	in	r24, 0x14	; 20
 554:	8f 7d       	andi	r24, 0xDF	; 223
 556:	84 bb       	out	0x14, r24	; 20
 558:	81 e2       	ldi	r24, 0x21	; 33
 55a:	8a 95       	dec	r24
 55c:	f1 f7       	brne	.-4      	; 0x55a <TM1637_turnOff+0x7e>
 55e:	00 00       	nop
 560:	9c 99       	sbic	0x13, 4	; 19
 562:	03 c0       	rjmp	.+6      	; 0x56a <TM1637_turnOff+0x8e>
 564:	84 b3       	in	r24, 0x14	; 20
 566:	80 61       	ori	r24, 0x10	; 16
 568:	84 bb       	out	0x14, r24	; 20
 56a:	81 e2       	ldi	r24, 0x21	; 33
 56c:	8a 95       	dec	r24
 56e:	f1 f7       	brne	.-4      	; 0x56c <TM1637_turnOff+0x90>
 570:	00 00       	nop
 572:	84 b3       	in	r24, 0x14	; 20
 574:	80 62       	ori	r24, 0x20	; 32
 576:	84 bb       	out	0x14, r24	; 20
 578:	81 e2       	ldi	r24, 0x21	; 33
 57a:	8a 95       	dec	r24
 57c:	f1 f7       	brne	.-4      	; 0x57a <TM1637_turnOff+0x9e>
 57e:	00 00       	nop
 580:	84 b3       	in	r24, 0x14	; 20
 582:	80 61       	ori	r24, 0x10	; 16
 584:	84 bb       	out	0x14, r24	; 20
 586:	81 e2       	ldi	r24, 0x21	; 33
 588:	8a 95       	dec	r24
 58a:	f1 f7       	brne	.-4      	; 0x588 <TM1637_turnOff+0xac>
 58c:	00 00       	nop
 58e:	84 b3       	in	r24, 0x14	; 20
 590:	8f 7d       	andi	r24, 0xDF	; 223
 592:	84 bb       	out	0x14, r24	; 20
 594:	82 e4       	ldi	r24, 0x42	; 66
 596:	8a 95       	dec	r24
 598:	f1 f7       	brne	.-4      	; 0x596 <TM1637_turnOff+0xba>
 59a:	00 c0       	rjmp	.+0      	; 0x59c <TM1637_turnOff+0xc0>
 59c:	84 b3       	in	r24, 0x14	; 20
 59e:	8f 7e       	andi	r24, 0xEF	; 239
 5a0:	84 bb       	out	0x14, r24	; 20
 5a2:	82 e4       	ldi	r24, 0x42	; 66
 5a4:	8a 95       	dec	r24
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <TM1637_turnOff+0xc8>
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <TM1637_turnOff+0xce>
 5aa:	08 95       	ret

000005ac <TM1637_turnOnAndSetBrightness>:
  TM1637_brightness_reg = (TM1637_brightness_reg & TM1637_MASK_ON_OFF) | (brightness & TM1637_MASK_BRIGHTNESS);
  TM1637_writeBrightnessReg();
}

void TM1637_turnOnAndSetBrightness(uint8_t brightness) {
  TM1637_brightness_reg = TM1637_MASK_ON_OFF | (brightness & TM1637_MASK_BRIGHTNESS);
 5ac:	87 70       	andi	r24, 0x07	; 7
 5ae:	88 60       	ori	r24, 0x08	; 8
 5b0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <TM1637_brightness_reg>
  TM1637_COMM_STOP;
}

static inline void TM1637_writeBrightnessReg(void) {
  // Write TM1637_CMD_SET_BRIGHTNESS + TM1637_brightness_reg
  TM1637_COMM_START;
 5b4:	84 b3       	in	r24, 0x14	; 20
 5b6:	80 61       	ori	r24, 0x10	; 16
 5b8:	84 bb       	out	0x14, r24	; 20
 5ba:	82 e4       	ldi	r24, 0x42	; 66
 5bc:	8a 95       	dec	r24
 5be:	f1 f7       	brne	.-4      	; 0x5bc <TM1637_turnOnAndSetBrightness+0x10>
 5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <TM1637_turnOnAndSetBrightness+0x16>
  TM1637_writeByte(TM1637_CMD_SET_BRIGHTNESS | (TM1637_brightness_reg & TM1637_MASK_BRIGHTNESS_REG));
 5c2:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <TM1637_brightness_reg>
 5c6:	9f 70       	andi	r25, 0x0F	; 15
 5c8:	90 68       	ori	r25, 0x80	; 128
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 5ca:	20 e0       	ldi	r18, 0x00	; 0
 5cc:	1d c0       	rjmp	.+58     	; 0x608 <TM1637_turnOnAndSetBrightness+0x5c>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 5ce:	84 b3       	in	r24, 0x14	; 20
 5d0:	80 62       	ori	r24, 0x20	; 32
 5d2:	84 bb       	out	0x14, r24	; 20
 5d4:	81 e2       	ldi	r24, 0x21	; 33
 5d6:	8a 95       	dec	r24
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <TM1637_turnOnAndSetBrightness+0x2a>
 5da:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 5dc:	90 ff       	sbrs	r25, 0
 5de:	04 c0       	rjmp	.+8      	; 0x5e8 <TM1637_turnOnAndSetBrightness+0x3c>
 5e0:	84 b3       	in	r24, 0x14	; 20
 5e2:	8f 7e       	andi	r24, 0xEF	; 239
 5e4:	84 bb       	out	0x14, r24	; 20
 5e6:	03 c0       	rjmp	.+6      	; 0x5ee <TM1637_turnOnAndSetBrightness+0x42>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 5e8:	84 b3       	in	r24, 0x14	; 20
 5ea:	80 61       	ori	r24, 0x10	; 16
 5ec:	84 bb       	out	0x14, r24	; 20
 5ee:	81 e2       	ldi	r24, 0x21	; 33
 5f0:	8a 95       	dec	r24
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <TM1637_turnOnAndSetBrightness+0x44>
 5f4:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 5f6:	84 b3       	in	r24, 0x14	; 20
 5f8:	8f 7d       	andi	r24, 0xDF	; 223
 5fa:	84 bb       	out	0x14, r24	; 20
 5fc:	82 e4       	ldi	r24, 0x42	; 66
 5fe:	8a 95       	dec	r24
 600:	f1 f7       	brne	.-4      	; 0x5fe <TM1637_turnOnAndSetBrightness+0x52>
 602:	00 c0       	rjmp	.+0      	; 0x604 <TM1637_turnOnAndSetBrightness+0x58>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 604:	96 95       	lsr	r25
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 606:	2f 5f       	subi	r18, 0xFF	; 255
 608:	28 30       	cpi	r18, 0x08	; 8
 60a:	08 f3       	brcs	.-62     	; 0x5ce <TM1637_turnOnAndSetBrightness+0x22>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 60c:	84 b3       	in	r24, 0x14	; 20
 60e:	80 62       	ori	r24, 0x20	; 32
 610:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 612:	84 b3       	in	r24, 0x14	; 20
 614:	8f 7e       	andi	r24, 0xEF	; 239
 616:	84 bb       	out	0x14, r24	; 20
 618:	82 e4       	ldi	r24, 0x42	; 66
 61a:	8a 95       	dec	r24
 61c:	f1 f7       	brne	.-4      	; 0x61a <TM1637_turnOnAndSetBrightness+0x6e>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <TM1637_turnOnAndSetBrightness+0x74>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 620:	84 b3       	in	r24, 0x14	; 20
 622:	8f 7d       	andi	r24, 0xDF	; 223
 624:	84 bb       	out	0x14, r24	; 20
 626:	81 e2       	ldi	r24, 0x21	; 33
 628:	8a 95       	dec	r24
 62a:	f1 f7       	brne	.-4      	; 0x628 <TM1637_turnOnAndSetBrightness+0x7c>
 62c:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 62e:	9c 99       	sbic	0x13, 4	; 19
 630:	03 c0       	rjmp	.+6      	; 0x638 <TM1637_turnOnAndSetBrightness+0x8c>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 632:	84 b3       	in	r24, 0x14	; 20
 634:	80 61       	ori	r24, 0x10	; 16
 636:	84 bb       	out	0x14, r24	; 20
 638:	81 e2       	ldi	r24, 0x21	; 33
 63a:	8a 95       	dec	r24
 63c:	f1 f7       	brne	.-4      	; 0x63a <TM1637_turnOnAndSetBrightness+0x8e>
 63e:	00 00       	nop

static inline void TM1637_writeBrightnessReg(void) {
  // Write TM1637_CMD_SET_BRIGHTNESS + TM1637_brightness_reg
  TM1637_COMM_START;
  TM1637_writeByte(TM1637_CMD_SET_BRIGHTNESS | (TM1637_brightness_reg & TM1637_MASK_BRIGHTNESS_REG));
  TM1637_COMM_STOP;
 640:	84 b3       	in	r24, 0x14	; 20
 642:	80 62       	ori	r24, 0x20	; 32
 644:	84 bb       	out	0x14, r24	; 20
 646:	81 e2       	ldi	r24, 0x21	; 33
 648:	8a 95       	dec	r24
 64a:	f1 f7       	brne	.-4      	; 0x648 <TM1637_turnOnAndSetBrightness+0x9c>
 64c:	00 00       	nop
 64e:	84 b3       	in	r24, 0x14	; 20
 650:	80 61       	ori	r24, 0x10	; 16
 652:	84 bb       	out	0x14, r24	; 20
 654:	81 e2       	ldi	r24, 0x21	; 33
 656:	8a 95       	dec	r24
 658:	f1 f7       	brne	.-4      	; 0x656 <TM1637_turnOnAndSetBrightness+0xaa>
 65a:	00 00       	nop
 65c:	84 b3       	in	r24, 0x14	; 20
 65e:	8f 7d       	andi	r24, 0xDF	; 223
 660:	84 bb       	out	0x14, r24	; 20
 662:	82 e4       	ldi	r24, 0x42	; 66
 664:	8a 95       	dec	r24
 666:	f1 f7       	brne	.-4      	; 0x664 <TM1637_turnOnAndSetBrightness+0xb8>
 668:	00 c0       	rjmp	.+0      	; 0x66a <TM1637_turnOnAndSetBrightness+0xbe>
 66a:	84 b3       	in	r24, 0x14	; 20
 66c:	8f 7e       	andi	r24, 0xEF	; 239
 66e:	84 bb       	out	0x14, r24	; 20
 670:	82 e4       	ldi	r24, 0x42	; 66
 672:	8a 95       	dec	r24
 674:	f1 f7       	brne	.-4      	; 0x672 <TM1637_turnOnAndSetBrightness+0xc6>
 676:	00 c0       	rjmp	.+0      	; 0x678 <TM1637_turnOnAndSetBrightness+0xcc>
 678:	08 95       	ret

0000067a <TM1637_setSegments>:
void TM1637_turnOnAndSetBrightness(uint8_t brightness) {
  TM1637_brightness_reg = TM1637_MASK_ON_OFF | (brightness & TM1637_MASK_BRIGHTNESS);
  TM1637_writeBrightnessReg();
}

void TM1637_setSegments(const uint8_t segments[], uint8_t length, uint8_t pos) {
 67a:	fc 01       	movw	r30, r24
  TM1637_COMM_START;
 67c:	84 b3       	in	r24, 0x14	; 20
 67e:	80 61       	ori	r24, 0x10	; 16
 680:	84 bb       	out	0x14, r24	; 20
 682:	82 e4       	ldi	r24, 0x42	; 66
 684:	8a 95       	dec	r24
 686:	f1 f7       	brne	.-4      	; 0x684 <TM1637_setSegments+0xa>
 688:	00 c0       	rjmp	.+0      	; 0x68a <TM1637_setSegments+0x10>
  // Write TM1637_CMD_SET_DATA + first digit address
  TM1637_writeByte(TM1637_CMD_SET_DATA | (pos & TM1637_MASK_POS));
 68a:	43 70       	andi	r20, 0x03	; 3
 68c:	40 6c       	ori	r20, 0xC0	; 192
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	1d c0       	rjmp	.+58     	; 0x6cc <TM1637_setSegments+0x52>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 692:	84 b3       	in	r24, 0x14	; 20
 694:	80 62       	ori	r24, 0x20	; 32
 696:	84 bb       	out	0x14, r24	; 20
 698:	81 e2       	ldi	r24, 0x21	; 33
 69a:	8a 95       	dec	r24
 69c:	f1 f7       	brne	.-4      	; 0x69a <TM1637_setSegments+0x20>
 69e:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 6a0:	40 ff       	sbrs	r20, 0
 6a2:	04 c0       	rjmp	.+8      	; 0x6ac <TM1637_setSegments+0x32>
 6a4:	84 b3       	in	r24, 0x14	; 20
 6a6:	8f 7e       	andi	r24, 0xEF	; 239
 6a8:	84 bb       	out	0x14, r24	; 20
 6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <TM1637_setSegments+0x38>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 6ac:	84 b3       	in	r24, 0x14	; 20
 6ae:	80 61       	ori	r24, 0x10	; 16
 6b0:	84 bb       	out	0x14, r24	; 20
 6b2:	81 e2       	ldi	r24, 0x21	; 33
 6b4:	8a 95       	dec	r24
 6b6:	f1 f7       	brne	.-4      	; 0x6b4 <TM1637_setSegments+0x3a>
 6b8:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 6ba:	84 b3       	in	r24, 0x14	; 20
 6bc:	8f 7d       	andi	r24, 0xDF	; 223
 6be:	84 bb       	out	0x14, r24	; 20
 6c0:	82 e4       	ldi	r24, 0x42	; 66
 6c2:	8a 95       	dec	r24
 6c4:	f1 f7       	brne	.-4      	; 0x6c2 <TM1637_setSegments+0x48>
 6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <TM1637_setSegments+0x4e>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 6c8:	46 95       	lsr	r20
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 6ca:	9f 5f       	subi	r25, 0xFF	; 255
 6cc:	98 30       	cpi	r25, 0x08	; 8
 6ce:	08 f3       	brcs	.-62     	; 0x692 <TM1637_setSegments+0x18>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 6d0:	84 b3       	in	r24, 0x14	; 20
 6d2:	80 62       	ori	r24, 0x20	; 32
 6d4:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 6d6:	84 b3       	in	r24, 0x14	; 20
 6d8:	8f 7e       	andi	r24, 0xEF	; 239
 6da:	84 bb       	out	0x14, r24	; 20
 6dc:	82 e4       	ldi	r24, 0x42	; 66
 6de:	8a 95       	dec	r24
 6e0:	f1 f7       	brne	.-4      	; 0x6de <TM1637_setSegments+0x64>
 6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <TM1637_setSegments+0x6a>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 6e4:	84 b3       	in	r24, 0x14	; 20
 6e6:	8f 7d       	andi	r24, 0xDF	; 223
 6e8:	84 bb       	out	0x14, r24	; 20
 6ea:	81 e2       	ldi	r24, 0x21	; 33
 6ec:	8a 95       	dec	r24
 6ee:	f1 f7       	brne	.-4      	; 0x6ec <TM1637_setSegments+0x72>
 6f0:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 6f2:	9c 99       	sbic	0x13, 4	; 19
 6f4:	03 c0       	rjmp	.+6      	; 0x6fc <TM1637_setSegments+0x82>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 6f6:	84 b3       	in	r24, 0x14	; 20
 6f8:	80 61       	ori	r24, 0x10	; 16
 6fa:	84 bb       	out	0x14, r24	; 20
 6fc:	81 e2       	ldi	r24, 0x21	; 33
 6fe:	8a 95       	dec	r24
 700:	f1 f7       	brne	.-4      	; 0x6fe <TM1637_setSegments+0x84>
 702:	00 00       	nop
void TM1637_setSegments(const uint8_t segments[], uint8_t length, uint8_t pos) {
  TM1637_COMM_START;
  // Write TM1637_CMD_SET_DATA + first digit address
  TM1637_writeByte(TM1637_CMD_SET_DATA | (pos & TM1637_MASK_POS));
  // Write data bytes
  for (uint8_t i = 0; i < length; i++)
 704:	40 e0       	ldi	r20, 0x00	; 0
 706:	40 c0       	rjmp	.+128    	; 0x788 <TM1637_setSegments+0x10e>
    TM1637_writeByte(segments[i]);
 708:	df 01       	movw	r26, r30
 70a:	a4 0f       	add	r26, r20
 70c:	b1 1d       	adc	r27, r1
 70e:	3c 91       	ld	r19, X
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 710:	20 e0       	ldi	r18, 0x00	; 0
 712:	1d c0       	rjmp	.+58     	; 0x74e <TM1637_setSegments+0xd4>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 714:	94 b3       	in	r25, 0x14	; 20
 716:	90 62       	ori	r25, 0x20	; 32
 718:	94 bb       	out	0x14, r25	; 20
 71a:	81 e2       	ldi	r24, 0x21	; 33
 71c:	8a 95       	dec	r24
 71e:	f1 f7       	brne	.-4      	; 0x71c <TM1637_setSegments+0xa2>
 720:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 722:	30 ff       	sbrs	r19, 0
 724:	04 c0       	rjmp	.+8      	; 0x72e <TM1637_setSegments+0xb4>
 726:	94 b3       	in	r25, 0x14	; 20
 728:	9f 7e       	andi	r25, 0xEF	; 239
 72a:	94 bb       	out	0x14, r25	; 20
 72c:	03 c0       	rjmp	.+6      	; 0x734 <TM1637_setSegments+0xba>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 72e:	94 b3       	in	r25, 0x14	; 20
 730:	90 61       	ori	r25, 0x10	; 16
 732:	94 bb       	out	0x14, r25	; 20
 734:	81 e2       	ldi	r24, 0x21	; 33
 736:	8a 95       	dec	r24
 738:	f1 f7       	brne	.-4      	; 0x736 <TM1637_setSegments+0xbc>
 73a:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 73c:	94 b3       	in	r25, 0x14	; 20
 73e:	9f 7d       	andi	r25, 0xDF	; 223
 740:	94 bb       	out	0x14, r25	; 20
 742:	82 e4       	ldi	r24, 0x42	; 66
 744:	8a 95       	dec	r24
 746:	f1 f7       	brne	.-4      	; 0x744 <TM1637_setSegments+0xca>
 748:	00 c0       	rjmp	.+0      	; 0x74a <TM1637_setSegments+0xd0>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 74a:	36 95       	lsr	r19
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 74c:	2f 5f       	subi	r18, 0xFF	; 255
 74e:	28 30       	cpi	r18, 0x08	; 8
 750:	08 f3       	brcs	.-62     	; 0x714 <TM1637_setSegments+0x9a>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 752:	84 b3       	in	r24, 0x14	; 20
 754:	80 62       	ori	r24, 0x20	; 32
 756:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 758:	84 b3       	in	r24, 0x14	; 20
 75a:	8f 7e       	andi	r24, 0xEF	; 239
 75c:	84 bb       	out	0x14, r24	; 20
 75e:	82 e4       	ldi	r24, 0x42	; 66
 760:	8a 95       	dec	r24
 762:	f1 f7       	brne	.-4      	; 0x760 <TM1637_setSegments+0xe6>
 764:	00 c0       	rjmp	.+0      	; 0x766 <TM1637_setSegments+0xec>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 766:	94 b3       	in	r25, 0x14	; 20
 768:	9f 7d       	andi	r25, 0xDF	; 223
 76a:	94 bb       	out	0x14, r25	; 20
 76c:	81 e2       	ldi	r24, 0x21	; 33
 76e:	8a 95       	dec	r24
 770:	f1 f7       	brne	.-4      	; 0x76e <TM1637_setSegments+0xf4>
 772:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 774:	9c 99       	sbic	0x13, 4	; 19
 776:	03 c0       	rjmp	.+6      	; 0x77e <TM1637_setSegments+0x104>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 778:	84 b3       	in	r24, 0x14	; 20
 77a:	80 61       	ori	r24, 0x10	; 16
 77c:	84 bb       	out	0x14, r24	; 20
 77e:	81 e2       	ldi	r24, 0x21	; 33
 780:	8a 95       	dec	r24
 782:	f1 f7       	brne	.-4      	; 0x780 <TM1637_setSegments+0x106>
 784:	00 00       	nop
void TM1637_setSegments(const uint8_t segments[], uint8_t length, uint8_t pos) {
  TM1637_COMM_START;
  // Write TM1637_CMD_SET_DATA + first digit address
  TM1637_writeByte(TM1637_CMD_SET_DATA | (pos & TM1637_MASK_POS));
  // Write data bytes
  for (uint8_t i = 0; i < length; i++)
 786:	4f 5f       	subi	r20, 0xFF	; 255
 788:	46 17       	cp	r20, r22
 78a:	08 f4       	brcc	.+2      	; 0x78e <TM1637_setSegments+0x114>
 78c:	bd cf       	rjmp	.-134    	; 0x708 <TM1637_setSegments+0x8e>
    TM1637_writeByte(segments[i]);
  TM1637_COMM_STOP;
 78e:	84 b3       	in	r24, 0x14	; 20
 790:	80 62       	ori	r24, 0x20	; 32
 792:	84 bb       	out	0x14, r24	; 20
 794:	81 e2       	ldi	r24, 0x21	; 33
 796:	8a 95       	dec	r24
 798:	f1 f7       	brne	.-4      	; 0x796 <TM1637_setSegments+0x11c>
 79a:	00 00       	nop
 79c:	84 b3       	in	r24, 0x14	; 20
 79e:	80 61       	ori	r24, 0x10	; 16
 7a0:	84 bb       	out	0x14, r24	; 20
 7a2:	81 e2       	ldi	r24, 0x21	; 33
 7a4:	8a 95       	dec	r24
 7a6:	f1 f7       	brne	.-4      	; 0x7a4 <TM1637_setSegments+0x12a>
 7a8:	00 00       	nop
 7aa:	84 b3       	in	r24, 0x14	; 20
 7ac:	8f 7d       	andi	r24, 0xDF	; 223
 7ae:	84 bb       	out	0x14, r24	; 20
 7b0:	82 e4       	ldi	r24, 0x42	; 66
 7b2:	8a 95       	dec	r24
 7b4:	f1 f7       	brne	.-4      	; 0x7b2 <TM1637_setSegments+0x138>
 7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <TM1637_setSegments+0x13e>
 7b8:	84 b3       	in	r24, 0x14	; 20
 7ba:	8f 7e       	andi	r24, 0xEF	; 239
 7bc:	84 bb       	out	0x14, r24	; 20
 7be:	82 e4       	ldi	r24, 0x42	; 66
 7c0:	8a 95       	dec	r24
 7c2:	f1 f7       	brne	.-4      	; 0x7c0 <TM1637_setSegments+0x146>
 7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <TM1637_setSegments+0x14c>
 7c6:	08 95       	ret

000007c8 <TM1637_clear>:
}

void TM1637_clear(void) {
  TM1637_COMM_START;
 7c8:	84 b3       	in	r24, 0x14	; 20
 7ca:	80 61       	ori	r24, 0x10	; 16
 7cc:	84 bb       	out	0x14, r24	; 20
 7ce:	82 e4       	ldi	r24, 0x42	; 66
 7d0:	8a 95       	dec	r24
 7d2:	f1 f7       	brne	.-4      	; 0x7d0 <TM1637_clear+0x8>
 7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <TM1637_clear+0xe>
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	20 ec       	ldi	r18, 0xC0	; 192
 7da:	1d c0       	rjmp	.+58     	; 0x816 <TM1637_clear+0x4e>
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 7dc:	84 b3       	in	r24, 0x14	; 20
 7de:	80 62       	ori	r24, 0x20	; 32
 7e0:	84 bb       	out	0x14, r24	; 20
 7e2:	81 e2       	ldi	r24, 0x21	; 33
 7e4:	8a 95       	dec	r24
 7e6:	f1 f7       	brne	.-4      	; 0x7e4 <TM1637_clear+0x1c>
 7e8:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
 7ea:	20 ff       	sbrs	r18, 0
 7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <TM1637_clear+0x2e>
 7ee:	84 b3       	in	r24, 0x14	; 20
 7f0:	8f 7e       	andi	r24, 0xEF	; 239
 7f2:	84 bb       	out	0x14, r24	; 20
 7f4:	03 c0       	rjmp	.+6      	; 0x7fc <TM1637_clear+0x34>
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 7f6:	84 b3       	in	r24, 0x14	; 20
 7f8:	80 61       	ori	r24, 0x10	; 16
 7fa:	84 bb       	out	0x14, r24	; 20
 7fc:	81 e2       	ldi	r24, 0x21	; 33
 7fe:	8a 95       	dec	r24
 800:	f1 f7       	brne	.-4      	; 0x7fe <TM1637_clear+0x36>
 802:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 804:	84 b3       	in	r24, 0x14	; 20
 806:	8f 7d       	andi	r24, 0xDF	; 223
 808:	84 bb       	out	0x14, r24	; 20
 80a:	82 e4       	ldi	r24, 0x42	; 66
 80c:	8a 95       	dec	r24
 80e:	f1 f7       	brne	.-4      	; 0x80c <TM1637_clear+0x44>
 810:	00 c0       	rjmp	.+0      	; 0x812 <TM1637_clear+0x4a>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
 812:	26 95       	lsr	r18
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 814:	9f 5f       	subi	r25, 0xFF	; 255
 816:	98 30       	cpi	r25, 0x08	; 8
 818:	08 f3       	brcs	.-62     	; 0x7dc <TM1637_clear+0x14>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 81a:	84 b3       	in	r24, 0x14	; 20
 81c:	80 62       	ori	r24, 0x20	; 32
 81e:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 820:	84 b3       	in	r24, 0x14	; 20
 822:	8f 7e       	andi	r24, 0xEF	; 239
 824:	84 bb       	out	0x14, r24	; 20
 826:	82 e4       	ldi	r24, 0x42	; 66
 828:	8a 95       	dec	r24
 82a:	f1 f7       	brne	.-4      	; 0x828 <TM1637_clear+0x60>
 82c:	00 c0       	rjmp	.+0      	; 0x82e <TM1637_clear+0x66>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 82e:	84 b3       	in	r24, 0x14	; 20
 830:	8f 7d       	andi	r24, 0xDF	; 223
 832:	84 bb       	out	0x14, r24	; 20
 834:	81 e2       	ldi	r24, 0x21	; 33
 836:	8a 95       	dec	r24
 838:	f1 f7       	brne	.-4      	; 0x836 <TM1637_clear+0x6e>
 83a:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 83c:	9c 99       	sbic	0x13, 4	; 19
 83e:	03 c0       	rjmp	.+6      	; 0x846 <TM1637_clear+0x7e>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 840:	84 b3       	in	r24, 0x14	; 20
 842:	80 61       	ori	r24, 0x10	; 16
 844:	84 bb       	out	0x14, r24	; 20
 846:	81 e2       	ldi	r24, 0x21	; 33
 848:	8a 95       	dec	r24
 84a:	f1 f7       	brne	.-4      	; 0x848 <TM1637_clear+0x80>
 84c:	00 00       	nop

void TM1637_clear(void) {
  TM1637_COMM_START;
  TM1637_writeByte(TM1637_CMD_SET_DATA);
  // Write blank segment data bytes
  for (uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
 84e:	20 e0       	ldi	r18, 0x00	; 0
 850:	35 c0       	rjmp	.+106    	; 0x8bc <TM1637_clear+0xf4>


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
    TM1637_SET_CLK_LOW_AND_OUTPUT;
 852:	84 b3       	in	r24, 0x14	; 20
 854:	80 62       	ori	r24, 0x20	; 32
 856:	84 bb       	out	0x14, r24	; 20
 858:	81 e2       	ldi	r24, 0x21	; 33
 85a:	8a 95       	dec	r24
 85c:	f1 f7       	brne	.-4      	; 0x85a <TM1637_clear+0x92>
 85e:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    // Set data bit
    if (data & 1) TM1637_SET_DIO_HIGH_AND_INPUT;
    else TM1637_SET_DIO_LOW_AND_OUTPUT;
 860:	84 b3       	in	r24, 0x14	; 20
 862:	80 61       	ori	r24, 0x10	; 16
 864:	84 bb       	out	0x14, r24	; 20
 866:	81 e2       	ldi	r24, 0x21	; 33
 868:	8a 95       	dec	r24
 86a:	f1 f7       	brne	.-4      	; 0x868 <TM1637_clear+0xa0>
 86c:	00 00       	nop
    TM1637_QUARTER_CYCLE_DELAY;

    TM1637_SET_CLK_HIGH_AND_INPUT;
 86e:	84 b3       	in	r24, 0x14	; 20
 870:	8f 7d       	andi	r24, 0xDF	; 223
 872:	84 bb       	out	0x14, r24	; 20
 874:	82 e4       	ldi	r24, 0x42	; 66
 876:	8a 95       	dec	r24
 878:	f1 f7       	brne	.-4      	; 0x876 <TM1637_clear+0xae>
 87a:	00 c0       	rjmp	.+0      	; 0x87c <TM1637_clear+0xb4>
  };


static inline uint8_t TM1637_writeByte(uint8_t data) {
  // Write data byte
  for (uint8_t i = 0; i < 8; i++) {
 87c:	9f 5f       	subi	r25, 0xFF	; 255
 87e:	01 c0       	rjmp	.+2      	; 0x882 <TM1637_clear+0xba>
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	98 30       	cpi	r25, 0x08	; 8
 884:	30 f3       	brcs	.-52     	; 0x852 <TM1637_clear+0x8a>
    TM1637_HALF_CYCLE_DELAY;
    data >>= 1;
  }

  // Prepare for receiving acknowledgement
  TM1637_SET_CLK_LOW_AND_OUTPUT;
 886:	84 b3       	in	r24, 0x14	; 20
 888:	80 62       	ori	r24, 0x20	; 32
 88a:	84 bb       	out	0x14, r24	; 20
  TM1637_SET_DIO_HIGH_AND_INPUT;
 88c:	84 b3       	in	r24, 0x14	; 20
 88e:	8f 7e       	andi	r24, 0xEF	; 239
 890:	84 bb       	out	0x14, r24	; 20
 892:	82 e4       	ldi	r24, 0x42	; 66
 894:	8a 95       	dec	r24
 896:	f1 f7       	brne	.-4      	; 0x894 <TM1637_clear+0xcc>
 898:	00 c0       	rjmp	.+0      	; 0x89a <TM1637_clear+0xd2>
  TM1637_HALF_CYCLE_DELAY;

  // Read acknowledgement
  TM1637_SET_CLK_HIGH_AND_INPUT;
 89a:	84 b3       	in	r24, 0x14	; 20
 89c:	8f 7d       	andi	r24, 0xDF	; 223
 89e:	84 bb       	out	0x14, r24	; 20
 8a0:	81 e2       	ldi	r24, 0x21	; 33
 8a2:	8a 95       	dec	r24
 8a4:	f1 f7       	brne	.-4      	; 0x8a2 <TM1637_clear+0xda>
 8a6:	00 00       	nop
  TM1637_QUARTER_CYCLE_DELAY;
  uint8_t ack = TM1637_READ_DIO;
  if (ack == 0)                     // Not strictly necessary, but it's a good idea
 8a8:	9c 99       	sbic	0x13, 4	; 19
 8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <TM1637_clear+0xea>
    TM1637_SET_DIO_LOW_AND_OUTPUT;  // to avoid unnecessary voltage changes on DIO when possible
 8ac:	84 b3       	in	r24, 0x14	; 20
 8ae:	80 61       	ori	r24, 0x10	; 16
 8b0:	84 bb       	out	0x14, r24	; 20
 8b2:	81 e2       	ldi	r24, 0x21	; 33
 8b4:	8a 95       	dec	r24
 8b6:	f1 f7       	brne	.-4      	; 0x8b4 <TM1637_clear+0xec>
 8b8:	00 00       	nop

void TM1637_clear(void) {
  TM1637_COMM_START;
  TM1637_writeByte(TM1637_CMD_SET_DATA);
  // Write blank segment data bytes
  for (uint8_t i = 0; i < TM1637_DIGITS_COUNT; i++)
 8ba:	2f 5f       	subi	r18, 0xFF	; 255
 8bc:	24 30       	cpi	r18, 0x04	; 4
 8be:	00 f3       	brcs	.-64     	; 0x880 <TM1637_clear+0xb8>
    TM1637_writeByte(TM1637_SPAT_BLANK);
  TM1637_COMM_STOP;
 8c0:	84 b3       	in	r24, 0x14	; 20
 8c2:	80 62       	ori	r24, 0x20	; 32
 8c4:	84 bb       	out	0x14, r24	; 20
 8c6:	81 e2       	ldi	r24, 0x21	; 33
 8c8:	8a 95       	dec	r24
 8ca:	f1 f7       	brne	.-4      	; 0x8c8 <TM1637_clear+0x100>
 8cc:	00 00       	nop
 8ce:	84 b3       	in	r24, 0x14	; 20
 8d0:	80 61       	ori	r24, 0x10	; 16
 8d2:	84 bb       	out	0x14, r24	; 20
 8d4:	81 e2       	ldi	r24, 0x21	; 33
 8d6:	8a 95       	dec	r24
 8d8:	f1 f7       	brne	.-4      	; 0x8d6 <TM1637_clear+0x10e>
 8da:	00 00       	nop
 8dc:	84 b3       	in	r24, 0x14	; 20
 8de:	8f 7d       	andi	r24, 0xDF	; 223
 8e0:	84 bb       	out	0x14, r24	; 20
 8e2:	82 e4       	ldi	r24, 0x42	; 66
 8e4:	8a 95       	dec	r24
 8e6:	f1 f7       	brne	.-4      	; 0x8e4 <TM1637_clear+0x11c>
 8e8:	00 c0       	rjmp	.+0      	; 0x8ea <TM1637_clear+0x122>
 8ea:	84 b3       	in	r24, 0x14	; 20
 8ec:	8f 7e       	andi	r24, 0xEF	; 239
 8ee:	84 bb       	out	0x14, r24	; 20
 8f0:	82 e4       	ldi	r24, 0x42	; 66
 8f2:	8a 95       	dec	r24
 8f4:	f1 f7       	brne	.-4      	; 0x8f2 <TM1637_clear+0x12a>
 8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <TM1637_clear+0x130>
 8f8:	08 95       	ret

000008fa <_exit>:
 8fa:	f8 94       	cli

000008fc <__stop_program>:
 8fc:	ff cf       	rjmp	.-2      	; 0x8fc <__stop_program>
